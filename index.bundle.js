/*! For license information please see index.bundle.js.LICENSE.txt */
!function(){var i={"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/assets/scss/style.scss":function(t,e,i){"use strict";i.r(e);var n=i("./node_modules/css-loader/dist/runtime/sourceMaps.js"),n=i.n(n),r=i("./node_modules/css-loader/dist/runtime/api.js"),i=i.n(r)()(n());i.push([t.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Roboto", sans-serif;\n  font-size: 16px;\n  color: #333;\n  line-height: 1.5;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.cover_area {\n  position: relative;\n}\n.cover_area .canvas-container {\n  position: absolute !important;\n  top: 0;\n  left: 0;\n}\n.cover_area #body_canvas {\n  border: 1px solid #000;\n}\n.cover_area #frame_canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 999;\n  pointer-events: none;\n  border: 1px solid #ccc;\n}\n\n.result {\n  position: relative;\n  display: block;\n}\n\n.controls_wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: baseline;\n  align-items: center;\n  width: 250px;\n  max-width: 300px;\n  height: 100vh;\n  background-color: #333;\n  color: #fff;\n}\n.controls_wrapper .title {\n  color: #fff;\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 20px;\n}\n.controls_wrapper a,\n.controls_wrapper button {\n  margin-bottom: 20px;\n  width: 200px;\n  height: 32px;\n  z-index: 1;\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 25px;\n  background-color: teal;\n  border: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-decoration: none;\n  font-size: 14px;\n}\n.controls_wrapper h6 {\n  color: #fff;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 20px;\n}\n.controls_wrapper .slider {\n  -webkit-appearance: none;\n  width: 200px;\n  height: 10px;\n  border-radius: 5px;\n  background: #fff;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: 0.2s;\n  transition: opacity 0.2s;\n}\n.controls_wrapper .slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 25px;\n  height: 25px;\n  border-radius: 50%;\n  background: teal;\n  cursor: pointer;\n}\n.controls_wrapper .slider::-moz-range-thumb {\n  width: 25px;\n  height: 25px;\n  border-radius: 50%;\n  background: teal;\n  cursor: pointer;\n}\n.controls_wrapper .divider {\n  width: 100%;\n  height: 1px;\n  background-color: #fff;\n  margin: 20px 0;\n}\n.controls_wrapper .filebox {\n  position: relative;\n  width: 200px;\n  height: 32px;\n  overflow: hidden;\n  background-color: teal;\n  border-radius: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n}\n.controls_wrapper .filebox input[type=file] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 200px;\n  height: 32px;\n  opacity: 0;\n  cursor: pointer;\n}',"",{version:3,sources:["webpack://./src/assets/scss/style.scss"],names:[],mappings:"AAAA;EACC,SAAA;EACA,UAAA;EACA,sBAAA;AACD;;AACA;EACC,iCAAA;EACA,eAAA;EACA,WAAA;EACA,gBAAA;EACA,aAAA;EACA,uBAAA;EACA,qBAAA;AAED;;AACA;EACC,kBAAA;AAED;AADC;EACC,6BAAA;EACA,MAAA;EACA,OAAA;AAGF;AADC;EACC,sBAAA;AAGF;AADC;EACC,kBAAA;EACA,MAAA;EACA,OAAA;EACA,YAAA;EACA,oBAAA;EACA,sBAAA;AAGF;;AACA;EACC,kBAAA;EACA,cAAA;AAED;;AACA;EACC,eAAA;EACA,MAAA;EACA,OAAA;EACA,aAAA;EACA,aAAA;EACA,sBAAA;EACA,yBAAA;EACA,mBAAA;EACA,YAAA;EACA,gBAAA;EACA,aAAA;EACA,sBAAA;EACG,WAAA;AAEJ;AADC;EACC,WAAA;EACA,eAAA;EACA,gBAAA;EACA,mBAAA;AAGF;AADC;;EAEC,mBAAA;EACA,YAAA;EACA,YAAA;EACA,UAAA;EACA,WAAA;EACA,iBAAA;EACA,mBAAA;EACA,sBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,qBAAA;EACA,eAAA;AAGF;AAAI;EACI,WAAA;EACA,eAAA;EACA,gBAAA;EACA,mBAAA;AAER;AAAC;EACC,wBAAA;EACA,YAAA;EACA,YAAA;EACA,kBAAA;EACA,gBAAA;EACA,aAAA;EACA,YAAA;EACA,wBAAA;EACA,wBAAA;AAEF;AAAE;EACC,wBAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,gBAAA;EACA,eAAA;AAEH;AACE;EACC,WAAA;EACA,YAAA;EACA,kBAAA;EACA,gBAAA;EACA,eAAA;AACH;AAGI;EACI,WAAA;EACA,WAAA;EACA,sBAAA;EACA,cAAA;AADR;AAGI;EACI,kBAAA;EACA,YAAA;EACA,YAAA;EACA,gBAAA;EACA,sBAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AADR;AAEQ;EACI,kBAAA;EACA,MAAA;EACA,OAAA;EACA,YAAA;EACA,YAAA;EACA,UAAA;EACA,eAAA;AAAZ",sourcesContent:['* {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tbox-sizing: border-box;\r\n}\r\nbody {\r\n\tfont-family: "Roboto", sans-serif;\r\n\tfont-size: 16px;\r\n\tcolor: #333;\r\n\tline-height: 1.5;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-content: center;\r\n}\r\n\r\n.cover_area {\r\n\tposition: relative;\r\n\t.canvas-container {\r\n\t\tposition: absolute !important;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\t#body_canvas {\r\n\t\tborder: 1px solid #000;\r\n\t}\r\n\t#frame_canvas {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tz-index: 999;\r\n\t\tpointer-events: none;\r\n\t\tborder: 1px solid #ccc;\r\n\t}\r\n}\r\n\r\n.result {\r\n\tposition: relative;\r\n\tdisplay: block;\r\n}\r\n\r\n.controls_wrapper {\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tpadding: 10px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: baseline;\r\n\talign-items: center;\r\n\twidth: 250px;\r\n\tmax-width: 300px;\r\n\theight: 100vh;\r\n\tbackground-color: #333;\r\n    color: #fff;\r\n\t.title {\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 20px;\r\n\t\tfont-weight: 700;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\ta,\r\n\tbutton {\r\n\t\tmargin-bottom: 20px;\r\n\t\twidth: 200px;\r\n\t\theight: 32px;\r\n\t\tz-index: 1;\r\n\t\tcolor: #fff;\r\n\t\tpadding: 5px 10px;\r\n\t\tborder-radius: 25px;\r\n\t\tbackground-color: teal;\r\n\t\tborder: none;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\ttext-decoration: none;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n    h6{\r\n        color: #fff;\r\n        font-size: 14px;\r\n        font-weight: 700;\r\n        margin-bottom: 20px;\r\n    }\r\n\t.slider {\r\n\t\t-webkit-appearance: none;\r\n\t\twidth: 200px;\r\n\t\theight: 10px;\r\n\t\tborder-radius: 5px;\r\n\t\tbackground: #fff;\r\n\t\toutline: none;\r\n\t\topacity: 0.7;\r\n\t\t-webkit-transition: 0.2s;\r\n\t\ttransition: opacity 0.2s;\r\n\r\n\t\t&::-webkit-slider-thumb {\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\tappearance: none;\r\n\t\t\twidth: 25px;\r\n\t\t\theight: 25px;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbackground: teal;\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\r\n\t\t&::-moz-range-thumb {\r\n\t\t\twidth: 25px;\r\n\t\t\theight: 25px;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbackground: teal;\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t}\r\n\r\n    .divider{\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: #fff;\r\n        margin: 20px 0;\r\n    }\r\n    .filebox{\r\n        position: relative;\r\n        width: 200px;\r\n        height: 32px;\r\n        overflow: hidden;\r\n        background-color: teal;\r\n        border-radius: 25px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 14px;\r\n        input[type="file"]{\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 200px;\r\n            height: 32px;\r\n            opacity: 0;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n'],sourceRoot:""}]),e.default=i},"./node_modules/css-loader/dist/runtime/api.js":function(t){"use strict";t.exports=function(n){var l=[];return l.toString=function(){return this.map(function(t){var e="",i=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),i&&(e+="@layer".concat(0<t[5].length?" ".concat(t[5]):""," {")),e+=n(t),i&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e}).join("")},l.i=function(t,e,i,n,r){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(s[a]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);i&&s[c[0]]||(void 0!==r&&(void 0!==c[5]&&(c[1]="@layer".concat(0<c[5].length?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),e&&(c[2]&&(c[1]="@media ".concat(c[2]," {").concat(c[1],"}")),c[2]=e),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),l.push(c))}},l}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":function(t){"use strict";t.exports=function(t){var e,i=t[1],n=t[3];return n?("function"==typeof btoa?(t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),t="/*# ".concat(t," */"),e=n.sources.map(function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}),[i].concat(e).concat([t])):[i]).join("\n"):i}},"./node_modules/fabric/dist/fabric.js":function(I,i,t){var L,B,s,o,a,n,R,X,Y,W,h,H,r,U,e,G,c,V,N,q,K,J,l,u,f,$,Z,d,g,Q,p,tt,m,v,y,et,_,it,x,b,nt,C,S,w,rt,T,A,O,z=z||{version:"5.2.4"};function st(t,e){this.__eventListeners[t]&&(t=this.__eventListeners[t],e?t[t.indexOf(e)]=!1:z.util.array.fill(t,!1))}function ot(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);this.on(t,i)}function at(t,e,i,n,r,s,o){for(var a,h,c,l,u,f,d,g,p,m,v,y,_,x=Math.PI,o=o*x/180,b=z.util.sin(o),C=z.util.cos(o),S=0,w=0,o=-C*t*.5-b*e*.5,T=-C*e*.5+b*t*.5,A=(i=Math.abs(i))*i,O=(n=Math.abs(n))*n,L=T*T,B=o*o,E=A*O-A*L-O*B,k=0,P=(E<0?(i*=P=Math.sqrt(1-E/(A*O)),n*=P):k=(r===s?-1:1)*Math.sqrt(E/(A*L+O*B)),k*i*T/n),r=-k*n*o/i,R=C*P-b*r+.5*t,X=b*P+C*r+.5*e,j=ht(1,0,(o-P)/i,(T-r)/n),E=ht((o-P)/i,(T-r)/n,(-o-P)/i,(-T-r)/n),Y=(0===s&&0<E?E-=2*x:1===s&&E<0&&(E+=2*x),Math.ceil(Math.abs(E/x*2))),D=[],M=E/Y,W=8/3*Math.sin(M/4)*Math.sin(M/4)/Math.sin(M/2),F=j+M,I=0;I<Y;I++)D[I]=(a=j,h=F,c=C,l=b,u=i,f=n,d=R,g=X,p=W,m=S,v=w,_=y=void 0,y=z.util.cos(a),a=z.util.sin(a),_=z.util.cos(h),h=z.util.sin(h),["C",m+p*(-c*u*a-l*f*y),v+p*(-l*u*a+c*f*y),(d=c*u*_-l*f*h+d)+p*(c*u*h+l*f*_),(g=l*u*_+c*f*h+g)+p*(l*u*h-c*f*_),d,g]),S=D[I][5],w=D[I][6],j=F,F+=M;return D}function ht(t,e,i,n){e=Math.atan2(e,t),t=Math.atan2(n,i);return e<=t?t-e:2*Math.PI-(e-t)}function E(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))}function ct(t,e,i){for(var n,r={x:e,y:i},s=0,o=1;o<=100;o+=1)n=t(o/100),s+=E(r.x,r.y,n.x,n.y),r=n;return s}function lt(t,e){for(var i,n,r,s=0,o=0,a=t.iterator,h={x:t.x,y:t.y},c=.01,t=t.angleFinder;o<e&&1e-4<c;)i=a(s),r=s,e<(n=E(h.x,h.y,i.x,i.y))+o?(s-=c,c/=2):(h=i,s+=c,o+=n);return i.angle=t(r),i}function ut(t){for(var e,i,n,r,s=0,o=t.length,a=0,h=0,c=0,l=0,u=[],f=0;f<o;f++){switch(n={x:a,y:h,command:(e=t[f])[0]},e[0]){case"M":n.length=0,c=a=e[1],l=h=e[2];break;case"L":n.length=E(a,h,e[1],e[2]),a=e[1],h=e[2];break;case"C":i=function(r,s,o,a,h,c,l,u){return function(t){var e=t*t*t,i=3*t*t*(1-t),n=3*t*(1-t)*(1-t),t=(1-t)*(1-t)*(1-t);return{x:l*e+h*i+o*n+r*t,y:u*e+c*i+a*n+s*t}}}(a,h,e[1],e[2],e[3],e[4],e[5],e[6]),r=function(i,n,r,s,o,a,h,c){return function(t){var e=1-t;return Math.atan2(3*e*e*(s-n)+6*e*t*(a-s)+3*t*t*(c-a),3*e*e*(r-i)+6*e*t*(o-r)+3*t*t*(h-o))}}(a,h,e[1],e[2],e[3],e[4],e[5],e[6]),n.iterator=i,n.angleFinder=r,n.length=ct(i,a,h),a=e[5],h=e[6];break;case"Q":i=function(n,r,s,o,a,h){return function(t){var e=t*t,i=2*t*(1-t),t=(1-t)*(1-t);return{x:a*e+s*i+n*t,y:h*e+o*i+r*t}}}(a,h,e[1],e[2],e[3],e[4]),r=function(i,n,r,s,o,a){return function(t){var e=1-t;return Math.atan2(2*e*(s-n)+2*t*(a-s),2*e*(r-i)+2*t*(o-r))}}(a,h,e[1],e[2],e[3],e[4]),n.iterator=i,n.angleFinder=r,n.length=ct(i,a,h),a=e[3],h=e[4];break;case"Z":case"z":n.destX=c,n.destY=l,n.length=E(a,h,c,l),a=c,h=l}s+=n.length,u.push(n)}return u.push({length:s,x:a,y:h}),u}function ft(t,e,i){if(t&&0!==t.length){var n=t.length-1,r=e?t[n][e]:t[n];if(e)for(;n--;)i(t[n][e],r)&&(r=t[n][e]);else for(;n--;)i(t[n],r)&&(r=t[n]);return r}}function k(t,e,i){if(i)if(!z.isLikelyNode&&e instanceof Element)t=e;else if(e instanceof Array){t=[];for(var n=0,r=e.length;n<r;n++)t[n]=k({},e[n],i)}else if(e&&"object"==typeof e)for(var s in e)"canvas"===s||"group"===s?t[s]=null:e.hasOwnProperty(s)&&(t[s]=k({},e[s],i));else t=e;else for(var s in e)t[s]=e[s];return t}function dt(){}function gt(){}function pt(t){for(var e=null,i=this;i.constructor.superclass;){var n=i.constructor.superclass.prototype[t];if(i[t]!==n){e=n;break}i=i.constructor.superclass.prototype}return e?1<arguments.length?e.apply(this,h.call(arguments,1)):e.call(this):console.log("tried to callSuper "+t+", method not found in prototype chain",this)}i.fabric=z,"undefined"!=typeof document&&"undefined"!=typeof window?(document instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document)?z.document=document:z.document=document.implementation.createHTMLDocument(""),z.window=window):(e=new(t("?7b10").JSDOM)(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),{features:{FetchExternalResources:["img"]},resources:"usable"}).window,z.document=e.document,z.jsdomImplForWrapper=t("?6799").implForWrapper,z.nodeCanvas=t("?9748").Canvas,z.window=e,DOMParser=z.window.DOMParser),z.isTouchSupported="ontouchstart"in z.window||"ontouchstart"in z.document||z.window&&z.window.navigator&&0<z.window.navigator.maxTouchPoints,z.isLikelyNode="undefined"!=typeof Buffer&&"undefined"==typeof window,z.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-dashoffset","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id","paint-order","vector-effect","instantiated_by_use","clip-path"],z.DPI=96,z.reNum="(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)",z.commaWsp="(?:\\s+,?\\s*|,\\s*)",z.rePathCommand=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/gi,z.reNonWord=/[ \n\.,;!\?\-]/,z.fontPaths={},z.iMatrix=[1,0,0,1,0,0],z.svgNS="http://www.w3.org/2000/svg",z.perfLimitSizeTotal=2097152,z.maxCacheSideLimit=4096,z.minCacheSideLimit=256,z.charWidthsCache={},z.textureSize=2048,z.disableStyleCopyPaste=!1,z.enableGLFiltering=!0,z.devicePixelRatio=z.window.devicePixelRatio||z.window.webkitDevicePixelRatio||z.window.mozDevicePixelRatio||1,z.browserShadowBlurConstant=1,z.arcToSegmentsCache={},z.boundsOfCurveCache={},z.cachesBoundsOfCurve=!0,z.forceGLPutImageData=!1,z.initFilterBackend=function(){return z.enableGLFiltering&&z.isWebglSupported&&z.isWebglSupported(z.textureSize)?(console.log("max texture size: "+z.maxTextureSize),new z.WebglFilterBackend({tileSize:z.textureSize})):z.Canvas2dFilterBackend?new z.Canvas2dFilterBackend:void 0},"undefined"!=typeof document&&"undefined"!=typeof window&&(window.fabric=z),z.Observable={fire:function(t,e){if(this.__eventListeners){var i=this.__eventListeners[t];if(i){for(var n=0,r=i.length;n<r;n++)i[n]&&i[n].call(this,e||{});this.__eventListeners[t]=i.filter(function(t){return!1!==t})}}return this},on:function(t,e){if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var i in t)this.on(i,t[i]);else this.__eventListeners[t]||(this.__eventListeners[t]=[]),this.__eventListeners[t].push(e);return this},once:function(t,e){if(1===arguments.length)for(var i in t)ot.call(this,i,t[i]);else ot.call(this,t,e);return this},off:function(t,e){if(this.__eventListeners)if(0===arguments.length)for(t in this.__eventListeners)st.call(this,t);else if(1===arguments.length&&"object"==typeof arguments[0])for(var i in t)st.call(this,i,t[i]);else st.call(this,t,e);return this}},z.Collection={_objects:[],add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var t=0,e=arguments.length;t<e;t++)this._onObjectAdded(arguments[t]);return this.renderOnAddRemove&&this.requestRenderAll(),this},insertAt:function(t,e,i){var n=this._objects;return i?n[e]=t:n.splice(e,0,t),this._onObjectAdded&&this._onObjectAdded(t),this.renderOnAddRemove&&this.requestRenderAll(),this},remove:function(){for(var t,e=this._objects,i=!1,n=0,r=arguments.length;n<r;n++)-1!==(t=e.indexOf(arguments[n]))&&(i=!0,e.splice(t,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[n]));return this.renderOnAddRemove&&i&&this.requestRenderAll(),this},forEachObject:function(t,e){for(var i=this.getObjects(),n=0,r=i.length;n<r;n++)t.call(e,i[n],n,i);return this},getObjects:function(e){return void 0===e?this._objects.concat():this._objects.filter(function(t){return t.type===e})},item:function(t){return this._objects[t]},isEmpty:function(){return 0===this._objects.length},size:function(){return this._objects.length},contains:function(e,t){return-1<this._objects.indexOf(e)||!!t&&this._objects.some(function(t){return"function"==typeof t.contains&&t.contains(e,!0)})},complexity:function(){return this._objects.reduce(function(t,e){return t+=e.complexity?e.complexity():0},0)}},z.CommonMethods={_setOptions:function(t){for(var e in t)this.set(e,t[e])},_initGradient:function(t,e){!t||!t.colorStops||t instanceof z.Gradient||this.set(e,new z.Gradient(t))},_initPattern:function(t,e,i){!t||!t.source||t instanceof z.Pattern?i&&i():this.set(e,new z.Pattern(t,i))},_setObject:function(t){for(var e in t)this._set(e,t[e])},set:function(t,e){return"object"==typeof t?this._setObject(t):this._set(t,e),this},_set:function(t,e){this[t]=e},toggle:function(t){var e=this.get(t);return"boolean"==typeof e&&this.set(t,!e),this},get:function(t){return this[t]}},L=i,B=Math.sqrt,s=Math.atan2,o=Math.pow,a=Math.PI/180,n=Math.PI/2,z.util={cos:function(t){if(0===t)return 1;switch((t=t<0?-t:t)/n){case 1:case 3:return 0;case 2:return-1}return Math.cos(t)},sin:function(t){if(0===t)return 0;var e=t<0?-1:1;switch(t/n){case 1:return e;case 2:return 0;case 3:return-e}return Math.sin(t)},removeFromArray:function(t,e){e=t.indexOf(e);return-1!==e&&t.splice(e,1),t},getRandomInt:function(t,e){return Math.floor(Math.random()*(e-t+1))+t},degreesToRadians:function(t){return t*a},radiansToDegrees:function(t){return t/a},rotatePoint:function(t,e,i){t=new z.Point(t.x-e.x,t.y-e.y),t=z.util.rotateVector(t,i);return new z.Point(t.x,t.y).addEquals(e)},rotateVector:function(t,e){var i=z.util.sin(e),e=z.util.cos(e);return{x:t.x*e-t.y*i,y:t.x*i+t.y*e}},createVector:function(t,e){return new z.Point(e.x-t.x,e.y-t.y)},calcAngleBetweenVectors:function(t,e){return Math.acos((t.x*e.x+t.y*e.y)/(Math.hypot(t.x,t.y)*Math.hypot(e.x,e.y)))},getHatVector:function(t){return new z.Point(t.x,t.y).multiply(1/Math.hypot(t.x,t.y))},getBisector:function(t,e,i){e=z.util.createVector(t,e),t=z.util.createVector(t,i),i=z.util.calcAngleBetweenVectors(e,t),t=z.util.calcAngleBetweenVectors(z.util.rotateVector(e,i),t);return{vector:z.util.getHatVector(z.util.rotateVector(e,i*(0===t?1:-1)/2)),angle:i}},projectStrokeOnPoints:function(o,a,h){function c(t){var e=u/Math.hypot(t.x,t.y);return new z.Point(t.x*e*f.x,t.y*e*f.y)}var l=[],u=a.strokeWidth/2,f=a.strokeUniform?new z.Point(1/a.scaleX,1/a.scaleY):new z.Point(1,1);return o.length<=1||o.forEach(function(t,e){var i,n,t=new z.Point(t.x,t.y),e=(0===e?(s=o[e+1],r=h?c(z.util.createVector(s,t)).addEquals(t):o[o.length-1]):s=e===o.length-1?(r=o[e-1],h?c(z.util.createVector(r,t)).addEquals(t):o[0]):(r=o[e-1],o[e+1]),z.util.getBisector(t,r,s)),r=e.vector,s=e.angle;"miter"===a.strokeLineJoin&&(i=-u/Math.sin(s/2),n=new z.Point(r.x*i*f.x,r.y*i*f.y),Math.hypot(n.x,n.y)/u<=a.strokeMiterLimit)||(i=-u*Math.SQRT2,n=new z.Point(r.x*i*f.x,r.y*i*f.y)),l.push(t.add(n)),l.push(t.subtract(n))}),l},transformPoint:function(t,e,i){return i?new z.Point(e[0]*t.x+e[2]*t.y,e[1]*t.x+e[3]*t.y):new z.Point(e[0]*t.x+e[2]*t.y+e[4],e[1]*t.x+e[3]*t.y+e[5])},makeBoundingBoxFromPoints:function(t,e){if(e)for(var i=0;i<t.length;i++)t[i]=z.util.transformPoint(t[i],e);var n=[t[0].x,t[1].x,t[2].x,t[3].x],r=z.util.array.min(n),n=z.util.array.max(n)-r,s=[t[0].y,t[1].y,t[2].y,t[3].y],o=z.util.array.min(s);return{left:r,top:o,width:n,height:z.util.array.max(s)-o}},invertTransform:function(t){var e=1/(t[0]*t[3]-t[1]*t[2]),e=[e*t[3],-e*t[1],-e*t[2],e*t[0]],t=z.util.transformPoint({x:t[4],y:t[5]},e,!0);return e[4]=-t.x,e[5]=-t.y,e},toFixed:function(t,e){return parseFloat(Number(t).toFixed(e))},parseUnit:function(t,e){var i=/\D{0,2}$/.exec(t),n=parseFloat(t);switch(e=e||z.Text.DEFAULT_SVG_FONT_SIZE,i[0]){case"mm":return n*z.DPI/25.4;case"cm":return n*z.DPI/2.54;case"in":return n*z.DPI;case"pt":return n*z.DPI/72;case"pc":return n*z.DPI/72*12;case"em":return n*e;default:return n}},falseFunction:function(){return!1},getKlass:function(t,e){return t=z.util.string.camelize(t.charAt(0).toUpperCase()+t.slice(1)),z.util.resolveNamespace(e)[t]},getSvgAttributes:function(t){var e=["instantiated_by_use","style","id","class"];switch(t){case"linearGradient":e=e.concat(["x1","y1","x2","y2","gradientUnits","gradientTransform"]);break;case"radialGradient":e=e.concat(["gradientUnits","gradientTransform","cx","cy","r","fx","fy","fr"]);break;case"stop":e=e.concat(["offset","stop-color","stop-opacity"])}return e},resolveNamespace:function(t){if(!t)return z;for(var e=t.split("."),i=e.length,n=L||z.window,r=0;r<i;++r)n=n[e[r]];return n},loadImage:function(t,e,i,n){var r,s;t?((r=z.util.createImage()).onload=s=function(){e&&e.call(i,r,!1),r=r.onload=r.onerror=null},r.onerror=function(){z.log("Error loading "+r.src),e&&e.call(i,null,!0),r=r.onload=r.onerror=null},0!==t.indexOf("data")&&null!=n&&(r.crossOrigin=n),"data:image/svg"===t.substring(0,14)&&(r.onload=null,z.util.loadImageInDom(r,s)),r.src=t):e&&e.call(i,t)},loadImageInDom:function(t,e){var i=z.document.createElement("div");i.style.width=i.style.height="1px",i.style.left=i.style.top="-100%",i.style.position="absolute",i.appendChild(t),z.document.querySelector("body").appendChild(i),t.onload=function(){e(),i.parentNode.removeChild(i),i=null}},enlivenObjects:function(t,e,r,s){var o=[],i=0,n=(t=t||[]).length;function a(){++i===n&&e&&e(o.filter(function(t){return t}))}n?t.forEach(function(i,n){i&&i.type?z.util.getKlass(i.type,r).fromObject(i,function(t,e){e||(o[n]=t),s&&s(i,t,e),a()}):a()}):e&&e(o)},enlivenObjectEnlivables:function(e,r,t){var s=z.Object.ENLIVEN_PROPS.filter(function(t){return!!e[t]});z.util.enlivenObjects(s.map(function(t){return e[t]}),function(i){var n={};s.forEach(function(t,e){n[t]=i[e],r&&(r[t]=i[e])}),t&&t(n)})},enlivenPatterns:function(t,e){function i(){++r===s&&e&&e(n)}var n=[],r=0,s=(t=t||[]).length;s?t.forEach(function(t,e){t&&t.source?new z.Pattern(t,function(t){n[e]=t,i()}):(n[e]=t,i())}):e&&e(n)},groupSVGElements:function(t,e,i){return t&&1===t.length?(void 0!==i&&(t[0].sourcePath=i),t[0]):(e&&(e.width&&e.height?e.centerPoint={x:e.width/2,y:e.height/2}:(delete e.width,delete e.height)),t=new z.Group(t,e),void 0!==i&&(t.sourcePath=i),t)},populateWithProperties:function(t,e,i){if(i&&Array.isArray(i))for(var n=0,r=i.length;n<r;n++)i[n]in t&&(e[i[n]]=t[i[n]])},createCanvasElement:function(){return z.document.createElement("canvas")},copyCanvasElement:function(t){var e=z.util.createCanvasElement();return e.width=t.width,e.height=t.height,e.getContext("2d").drawImage(t,0,0),e},toDataURL:function(t,e,i){return t.toDataURL("image/"+e,i)},createImage:function(){return z.document.createElement("img")},multiplyTransformMatrices:function(t,e,i){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],i?0:t[0]*e[4]+t[2]*e[5]+t[4],i?0:t[1]*e[4]+t[3]*e[5]+t[5]]},qrDecompose:function(t){var e=s(t[1],t[0]),i=o(t[0],2)+o(t[1],2),n=B(i),r=(t[0]*t[3]-t[2]*t[1])/n,i=s(t[0]*t[2]+t[1]*t[3],i);return{angle:e/a,scaleX:n,scaleY:r,skewX:i/a,skewY:0,translateX:t[4],translateY:t[5]}},calcRotateMatrix:function(t){var e;return t.angle?(t=z.util.degreesToRadians(t.angle),[e=z.util.cos(t),t=z.util.sin(t),-t,e,0,0]):z.iMatrix.concat()},calcDimensionsMatrix:function(t){var e=void 0===t.scaleX?1:t.scaleX,i=void 0===t.scaleY?1:t.scaleY,e=[t.flipX?-e:e,0,0,t.flipY?-i:i,0,0],i=z.util.multiplyTransformMatrices,n=z.util.degreesToRadians;return t.skewX&&(e=i(e,[1,0,Math.tan(n(t.skewX)),1],!0)),e=t.skewY?i(e,[1,Math.tan(n(t.skewY)),0,1],!0):e},composeMatrix:function(t){var e=[1,0,0,1,t.translateX||0,t.translateY||0],i=z.util.multiplyTransformMatrices;return t.angle&&(e=i(e,z.util.calcRotateMatrix(t))),e=1!==t.scaleX||1!==t.scaleY||t.skewX||t.skewY||t.flipX||t.flipY?i(e,z.util.calcDimensionsMatrix(t)):e},resetObjectTransform:function(t){t.scaleX=1,t.scaleY=1,t.skewX=0,t.skewY=0,t.flipX=!1,t.flipY=!1,t.rotate(0)},saveObjectTransform:function(t){return{scaleX:t.scaleX,scaleY:t.scaleY,skewX:t.skewX,skewY:t.skewY,angle:t.angle,left:t.left,flipX:t.flipX,flipY:t.flipY,top:t.top}},isTransparent:function(t,e,i,n){0<n&&(n<e?e-=n:e=0,n<i?i-=n:i=0);for(var r=!0,s=t.getImageData(e,i,2*n||1,2*n||1),o=s.data.length,a=3;a<o&&!1!=(r=s.data[a]<=0);a+=4);return s=null,r},parsePreserveAspectRatioAttribute:function(t){var e,i="meet",t=t.split(" ");return t&&t.length&&("meet"!==(i=t.pop())&&"slice"!==i?(e=i,i="meet"):t.length&&(e=t.pop())),{meetOrSlice:i,alignX:"none"!==e?e.slice(1,4):"none",alignY:"none"!==e?e.slice(5,8):"none"}},clearFabricFontCache:function(t){(t=(t||"").toLowerCase())?z.charWidthsCache[t]&&delete z.charWidthsCache[t]:z.charWidthsCache={}},limitDimsByArea:function(t,e){t=Math.sqrt(e*t),e=Math.floor(e/t);return{x:Math.floor(t),y:e}},capValue:function(t,e,i){return Math.max(t,Math.min(e,i))},findScaleToFit:function(t,e){return Math.min(e.width/t.width,e.height/t.height)},findScaleToCover:function(t,e){return Math.max(e.width/t.width,e.height/t.height)},matrixToSVG:function(t){return"matrix("+t.map(function(t){return z.util.toFixed(t,z.Object.NUM_FRACTION_DIGITS)}).join(" ")+")"},removeTransformFromObject:function(t,e){e=z.util.invertTransform(e),e=z.util.multiplyTransformMatrices(e,t.calcOwnMatrix());z.util.applyTransformToObject(t,e)},addTransformToObject:function(t,e){z.util.applyTransformToObject(t,z.util.multiplyTransformMatrices(e,t.calcOwnMatrix()))},applyTransformToObject:function(t,e){var e=z.util.qrDecompose(e),i=new z.Point(e.translateX,e.translateY);t.flipX=!1,t.flipY=!1,t.set("scaleX",e.scaleX),t.set("scaleY",e.scaleY),t.skewX=e.skewX,t.skewY=e.skewY,t.angle=e.angle,t.setPositionByOrigin(i,"center","center")},sizeAfterTransform:function(t,e,i){t/=2,e/=2,t=[{x:-t,y:-e},{x:t,y:-e},{x:-t,y:e},{x:t,y:e}],e=z.util.calcDimensionsMatrix(i),i=z.util.makeBoundingBoxFromPoints(t,e);return{x:i.width,y:i.height}},mergeClipPaths:function(t,e){var i=t,n=e,e=(i.inverted&&!n.inverted&&(i=e,n=t),z.util.applyTransformToObject(n,z.util.multiplyTransformMatrices(z.util.invertTransform(i.calcTransformMatrix()),n.calcTransformMatrix())),i.inverted&&n.inverted);return e&&(i.inverted=n.inverted=!1),new z.Group([i],{clipPath:n,inverted:e})},hasStyleChanged:function(t,e,i){return i=i||!1,t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.deltaY!==e.deltaY||i&&(t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough)},stylesToArray:function(t,e){for(var t=z.util.object.clone(t,!0),i=e.split("\n"),n=-1,r={},s=[],o=0;o<i.length;o++)if(t[o])for(var a=0;a<i[o].length;a++){n++;var h=t[o][a];h&&(z.util.hasStyleChanged(r,h,!0)?s.push({start:n,end:n+1,style:h}):s[s.length-1].end++),r=h||{}}else n+=i[o].length;return s},stylesFromArray:function(t,e){if(!Array.isArray(t))return t;for(var i=e.split("\n"),n=-1,r=0,s={},o=0;o<i.length;o++)for(var a=0;a<i[o].length;a++)n++,t[r]&&t[r].start<=n&&n<t[r].end&&(s[o]=s[o]||{},s[o][a]=Object.assign({},t[r].style),n===t[r].end-1&&r++);return s}},R=Array.prototype.join,X={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},Y={m:"l",M:"L"},z.util.joinPath=function(t){return t.map(function(t){return t.join(" ")}).join(" ")},z.util.parsePath=function(t){var e,i,n,r=[],s=[],o=z.rePathCommand,a="[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*",h="("+a+")"+z.commaWsp,c="([01])"+z.commaWsp+"?",l=new RegExp(h+"?"+h+"?"+h+c+c+h+"?("+a+")","g");if(t&&t.match)for(var u,f=0,d=(u=t.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi)).length;f<d;f++){var g,p=(e=u[f]).slice(1).trim(),m=e.charAt(s.length=0),v=[m];if("a"===m.toLowerCase())for(;g=l.exec(p);)for(var y=1;y<g.length;y++)s.push(g[y]);else for(;n=o.exec(p);)s.push(n[0]);for(var y=0,_=s.length;y<_;y++)i=parseFloat(s[y]),isNaN(i)||v.push(i);var x=X[m.toLowerCase()],b=Y[m]||m;if(x<v.length-1)for(var C=1,S=v.length;C<S;C+=x)r.push([m].concat(v.slice(C,C+x))),m=b;else r.push(v)}return r},z.util.makePathSimpler=function(t){for(var e,i,n,r,s,o=0,a=0,h=t.length,c=0,l=0,u=[],f=0;f<h;++f){switch(i=!1,(e=t[f].slice(0))[0]){case"l":e[0]="L",e[1]+=o,e[2]+=a;case"L":o=e[1],a=e[2];break;case"h":e[1]+=o;case"H":e[0]="L",e[2]=a,o=e[1];break;case"v":e[1]+=a;case"V":e[0]="L",a=e[1],e[1]=o,e[2]=a;break;case"m":e[0]="M",e[1]+=o,e[2]+=a;case"M":o=e[1],a=e[2],c=e[1],l=e[2];break;case"c":e[0]="C",e[1]+=o,e[2]+=a,e[3]+=o,e[4]+=a,e[5]+=o,e[6]+=a;case"C":r=e[3],s=e[4],o=e[5],a=e[6];break;case"s":e[0]="S",e[1]+=o,e[2]+=a,e[3]+=o,e[4]+=a;case"S":s="C"===n?(r=2*o-r,2*a-s):(r=o,a),o=e[3],a=e[4],e[0]="C",e[5]=e[3],e[6]=e[4],e[3]=e[1],e[4]=e[2],e[1]=r,e[2]=s,r=e[3],s=e[4];break;case"q":e[0]="Q",e[1]+=o,e[2]+=a,e[3]+=o,e[4]+=a;case"Q":r=e[1],s=e[2],o=e[3],a=e[4];break;case"t":e[0]="T",e[1]+=o,e[2]+=a;case"T":s="Q"===n?(r=2*o-r,2*a-s):(r=o,a),e[0]="Q",o=e[1],a=e[2],e[1]=r,e[2]=s,e[3]=o,e[4]=a;break;case"a":e[0]="A",e[6]+=o,e[7]+=a;case"A":i=!0,u=u.concat(function(t,e,i){for(var n=i[1],r=i[2],s=i[3],o=i[4],a=i[5],h=at(i[6]-t,i[7]-e,n,r,o,a,s),c=0,l=h.length;c<l;c++)h[c][1]+=t,h[c][2]+=e,h[c][3]+=t,h[c][4]+=e,h[c][5]+=t,h[c][6]+=e;return h}(o,a,e)),o=e[6],a=e[7];break;case"z":case"Z":o=c,a=l}i||u.push(e),n=e[0]}return u},z.util.getSmoothPathFromPoints=function(t,e){var i,n,r=[],s=new z.Point(t[0].x,t[0].y),o=new z.Point(t[1].x,t[1].y),a=t.length,h=1,c=0,l=2<a;for(l&&(h=t[2].x<o.x?-1:t[2].x===o.x?0:1,c=t[2].y<o.y?-1:t[2].y===o.y?0:1),r.push(["M",s.x-h*(e=e||0),s.y-c*e]),i=1;i<a;i++)s.eq(o)||(n=s.midPointFrom(o),r.push(["Q",s.x,s.y,n.x,n.y])),s=t[i],i+1<t.length&&(o=t[i+1]);return l&&(h=s.x>t[i-2].x?1:s.x===t[i-2].x?0:-1,c=s.y>t[i-2].y?1:s.y===t[i-2].y?0:-1),r.push(["L",s.x+h*e,s.y+c*e]),r},z.util.getPathSegmentsInfo=ut,z.util.getBoundsOfCurve=function(t,e,i,n,r,s,o,a){var h;if(z.cachesBoundsOfCurve&&(h=R.call(arguments),z.boundsOfCurveCache[h]))return z.boundsOfCurveCache[h];for(var c,l,u,f=Math.sqrt,d=Math.min,g=Math.max,p=Math.abs,m=[],v=[[],[]],y=6*t-12*i+6*r,_=-3*t+9*i-9*r+3*o,x=3*i-3*t,b=0;b<2;++b)0<b&&(y=6*e-12*n+6*s,_=-3*e+9*n-9*s+3*a,x=3*n-3*e),p(_)<1e-12?p(y)<1e-12||0<(c=-x/y)&&c<1&&m.push(c):(u=y*y-4*x*_)<0||(0<(l=(-y+(u=f(u)))/(2*_))&&l<1&&m.push(l),0<(l=(-y-u)/(2*_))&&l<1&&m.push(l));for(var C,S=m.length,w=S;S--;)v[0][S]=(C=1-(c=m[S]))*C*C*t+3*C*C*c*i+3*C*c*c*r+c*c*c*o,v[1][S]=C*C*C*e+3*C*C*c*n+3*C*c*c*s+c*c*c*a;return v[0][w]=t,v[1][w]=e,v[0][w+1]=o,v[1][w+1]=a,w=[{x:d.apply(null,v[0]),y:d.apply(null,v[1])},{x:g.apply(null,v[0]),y:g.apply(null,v[1])}],z.cachesBoundsOfCurve&&(z.boundsOfCurveCache[h]=w),w},z.util.getPointOnPath=function(t,e,i){i=i||ut(t);for(var n=0;0<e-i[n].length&&n<i.length-2;)e-=i[n].length,n++;var r,s=i[n],o=e/s.length,a=s.command,h=t[n];switch(a){case"M":return{x:s.x,y:s.y,angle:0};case"Z":case"z":return(r=new z.Point(s.x,s.y).lerp(new z.Point(s.destX,s.destY),o)).angle=Math.atan2(s.destY-s.y,s.destX-s.x),r;case"L":return(r=new z.Point(s.x,s.y).lerp(new z.Point(h[1],h[2]),o)).angle=Math.atan2(h[2]-s.y,h[1]-s.x),r;case"C":case"Q":return lt(s,e)}},z.util.transformPath=function(t,r,e){return e&&(r=z.util.multiplyTransformMatrices(r,[1,0,0,1,-e.x,-e.y])),t.map(function(t){for(var e=t.slice(0),i={},n=1;n<t.length-1;n+=2)i.x=t[n],i.y=t[n+1],i=z.util.transformPoint(i,r),e[n]=i.x,e[n+1]=i.y;return e})},W=Array.prototype.slice,z.util.array={fill:function(t,e){for(var i=t.length;i--;)t[i]=e;return t},invoke:function(t,e){for(var i=W.call(arguments,2),n=[],r=0,s=t.length;r<s;r++)n[r]=i.length?t[r][e].apply(t[r],i):t[r][e].call(t[r]);return n},min:function(t,e){return ft(t,e,function(t,e){return t<e})},max:function(t,e){return ft(t,e,function(t,e){return e<=t})}},z.util.object={extend:k,clone:function(t,e){return k({},t,e)}},z.util.object.extend(z.util,z.Observable),z.util.string={camelize:function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},capitalize:function(t,e){return t.charAt(0).toUpperCase()+(e?t.slice(1):t.slice(1).toLowerCase())},escapeXml:function(t){return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},graphemeSplit:function(t){for(var e,i=0,n=[],i=0;i<t.length;i++)!1!==(e=function(t,e){var i=t.charCodeAt(e);if(isNaN(i))return"";if(i<55296||57343<i)return t.charAt(e);if(55296<=i&&i<=56319){if(t.length<=e+1)throw"High surrogate without following low surrogate";i=t.charCodeAt(e+1);if(i<56320||57343<i)throw"High surrogate without following low surrogate";return t.charAt(e)+t.charAt(e+1)}if(0===e)throw"Low surrogate without preceding high surrogate";i=t.charCodeAt(e-1);if(i<55296||56319<i)throw"Low surrogate without preceding high surrogate";return!1}(t,i))&&n.push(e);return n}},h=Array.prototype.slice,H=function(){for(var t in{toString:1})if("toString"===t)return!1;return!0}(),z.util.createClass=function(){var t=null,e=h.call(arguments,0);function i(){this.initialize.apply(this,arguments)}"function"==typeof e[0]&&(t=e.shift()),i.superclass=t,i.subclasses=[],t&&(gt.prototype=t.prototype,i.prototype=new gt,t.subclasses.push(i));for(var n=0,r=e.length;n<r;n++)!function(t,n,r){for(var e in n)e in t.prototype&&"function"==typeof t.prototype[e]&&-1<(n[e]+"").indexOf("callSuper")?t.prototype[e]=function(i){return function(){var t=this.constructor.superclass,e=(this.constructor.superclass=r,n[i].apply(this,arguments));if(this.constructor.superclass=t,"initialize"!==i)return e}}(e):t.prototype[e]=n[e],H&&(n.toString!==Object.prototype.toString&&(t.prototype.toString=n.toString),n.valueOf!==Object.prototype.valueOf&&(t.prototype.valueOf=n.valueOf))}(i,e[n],t);return i.prototype.initialize||(i.prototype.initialize=dt),(i.prototype.constructor=i).prototype.callSuper=pt,i},r=!!z.document.createElement("div").attachEvent,U=["touchstart","touchmove","touchend"],z.util.addListener=function(t,e,i,n){t&&t.addEventListener(e,i,!r&&n)},z.util.removeListener=function(t,e,i,n){t&&t.removeEventListener(e,i,!r&&n)},z.util.getPointer=function(t){var e=t.target,e=z.util.getScrollLeftTop(e),i=(i=(t=t).changedTouches)&&i[0]?i[0]:t;return{x:i.clientX+e.left,y:i.clientY+e.top}},z.util.isTouchEvent=function(t){return-1<U.indexOf(t.type)||"touch"===t.pointerType},t=z.document.createElement("div"),e="string"==typeof t.style.opacity,t="string"==typeof t.style.filter,G=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,c=function(t){return t},e?c=function(t,e){return t.style.opacity=e,t}:t&&(c=function(t,e){var i=t.style;return t.currentStyle&&!t.currentStyle.hasLayout&&(i.zoom=1),G.test(i.filter)?i.filter=i.filter.replace(G,e=.9999<=e?"":"alpha(opacity="+100*e+")"):i.filter+=" alpha(opacity="+100*e+")",t}),z.util.setStyle=function(t,e){var i,n=t.style;if(n){if("string"==typeof e)return t.style.cssText+=";"+e,-1<e.indexOf("opacity")?c(t,e.match(/opacity:\s*(\d?\.?\d*)/)[1]):t;for(var r in e)"opacity"===r?c(t,e[r]):(i="float"===r||"cssFloat"===r?void 0===n.styleFloat?"cssFloat":"styleFloat":r,n.setProperty(i,e[r]))}return t};var mt,P,j,vt=Array.prototype.slice,t=function(t){return vt.call(t,0)};try{P=t(z.document.childNodes)instanceof Array}catch(t){}function yt(t,e){var i,n=z.document.createElement(t);for(i in e)"class"===i?n.className=e[i]:"for"===i?n.htmlFor=e[i]:n.setAttribute(i,e[i]);return n}function _t(t){for(var e=0,i=0,n=z.document.documentElement,r=z.document.body||{scrollLeft:0,scrollTop:0};t&&(t.parentNode||t.host)&&((t=t.parentNode||t.host)===z.document?(e=r.scrollLeft||n.scrollLeft||0,i=r.scrollTop||n.scrollTop||0):(e+=t.scrollLeft||0,i+=t.scrollTop||0),1!==t.nodeType||"fixed"!==t.style.position););return{left:e,top:i}}function xt(){}function bt(){return!1}function Ct(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e}function St(){return q.apply(z.window,arguments)}function wt(t,e,i){var n="rgba("+parseInt(t[0]+i*(e[0]-t[0]),10)+","+parseInt(t[1]+i*(e[1]-t[1]),10)+","+parseInt(t[2]+i*(e[2]-t[2]),10);return n+(","+(t&&e?parseFloat(t[3]+i*(e[3]-t[3])):1))+")"}function Tt(t,e,i,n){return n=t<Math.abs(e)?(t=e,i/4):0===e&&0===t?i/(2*Math.PI)*Math.asin(1):i/(2*Math.PI)*Math.asin(e/t),{a:t,c:e,p:i,s:n}}function At(t,e,i){return t.a*Math.pow(2,10*--e)*Math.sin((e*i-t.s)*(2*Math.PI)/t.p)}function Ot(t,e,i,n){return i-Et(n-t,0,i,n)+e}function Et(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}P||(t=function(t){for(var e=new Array(t.length),i=t.length;i--;)e[i]=t[i];return e}),mt=z.document.defaultView&&z.document.defaultView.getComputedStyle?function(t,e){t=z.document.defaultView.getComputedStyle(t,null);return t?t[e]:void 0}:function(t,e){var i=t.style[e];return i=!i&&t.currentStyle?t.currentStyle[e]:i},P=z.document.documentElement.style,j="userSelect"in P?"userSelect":"MozUserSelect"in P?"MozUserSelect":"WebkitUserSelect"in P?"WebkitUserSelect":"KhtmlUserSelect"in P?"KhtmlUserSelect":"",z.util.makeElementUnselectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=z.util.falseFunction),j?t.style[j]="none":"string"==typeof t.unselectable&&(t.unselectable="on"),t},z.util.makeElementSelectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=null),j?t.style[j]="":"string"==typeof t.unselectable&&(t.unselectable=""),t},z.util.setImageSmoothing=function(t,e){t.imageSmoothingEnabled=t.imageSmoothingEnabled||t.webkitImageSmoothingEnabled||t.mozImageSmoothingEnabled||t.msImageSmoothingEnabled||t.oImageSmoothingEnabled,t.imageSmoothingEnabled=e},z.util.getById=function(t){return"string"==typeof t?z.document.getElementById(t):t},z.util.toArray=t,z.util.addClass=function(t,e){t&&-1===(" "+t.className+" ").indexOf(" "+e+" ")&&(t.className+=(t.className?" ":"")+e)},z.util.makeElement=yt,z.util.wrapElement=function(t,e,i){return"string"==typeof e&&(e=yt(e,i)),t.parentNode&&t.parentNode.replaceChild(e,t),e.appendChild(t),e},z.util.getScrollLeftTop=_t,z.util.getElementOffset=function(t){var e,i,n=t&&t.ownerDocument,r={left:0,top:0},s={left:0,top:0},o={borderLeftWidth:"left",borderTopWidth:"top",paddingLeft:"left",paddingTop:"top"};if(!n)return s;for(i in o)s[o[i]]+=parseInt(mt(t,i),10)||0;return n=n.documentElement,void 0!==t.getBoundingClientRect&&(r=t.getBoundingClientRect()),e=_t(t),{left:r.left+e.left-(n.clientLeft||0)+s.left,top:r.top+e.top-(n.clientTop||0)+s.top}},z.util.getNodeCanvas=function(t){return(t=z.jsdomImplForWrapper(t))._canvas||t._image},z.util.cleanUpJsdomNode=function(t){!z.isLikelyNode||(t=z.jsdomImplForWrapper(t))&&(t._image=null,t._canvas=null,t._currentSrc=null,t._attributes=null,t._classList=null)},z.util.request=function(t,e){var i,n=(e=e||{}).method?e.method.toUpperCase():"GET",r=e.onComplete||function(){},s=new z.window.XMLHttpRequest,o=e.body||e.parameters;return s.onreadystatechange=function(){4===s.readyState&&(r(s),s.onreadystatechange=xt)},"GET"===n&&(o=null,"string"==typeof e.parameters&&(i=t,e=e.parameters,t=i+(/\?/.test(i)?"&":"?")+e)),s.open(n,t,!0),"POST"!==n&&"PUT"!==n||s.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),s.send(o),s},z.log=console.log,z.warn=console.warn,V=z.util.object.extend,N=z.util.object.clone,t=[],z.util.object.extend(t,{cancelAll:function(){var t=this.splice(0);return t.forEach(function(t){t.cancel()}),t},cancelByCanvas:function(e){var t;return e?((t=this.filter(function(t){return"object"==typeof t.target&&t.target.canvas===e})).forEach(function(t){t.cancel()}),t):[]},cancelByTarget:function(t){t=this.findAnimationsByTarget(t);return t.forEach(function(t){t.cancel()}),t},findAnimationIndex:function(t){return this.indexOf(this.findAnimation(t))},findAnimation:function(e){return this.find(function(t){return t.cancel===e})},findAnimationsByTarget:function(e){return e?this.filter(function(t){return t.target===e}):[]}}),q=z.window.requestAnimationFrame||z.window.webkitRequestAnimationFrame||z.window.mozRequestAnimationFrame||z.window.oRequestAnimationFrame||z.window.msRequestAnimationFrame||function(t){return z.window.setTimeout(t,1e3/60)},K=z.window.cancelAnimationFrame||z.window.clearTimeout,z.util.animate=function(e){function v(){var t=z.runningAnimations.indexOf(_);return-1<t&&z.runningAnimations.splice(t,1)[0]}var y=!1,_=V(N(e=e||{}),{cancel:function(){return y=!0,v()},currentValue:"startValue"in e?e.startValue:0,completionRate:0,durationRate:0});return z.runningAnimations.push(_),St(function(t){var s,o=t||+new Date,a=e.duration||500,h=o+a,c=e.onChange||bt,l=e.abort||bt,u=e.onComplete||bt,f=e.easing||Ct,d="startValue"in e&&0<e.startValue.length,g="startValue"in e?e.startValue:0,p="endValue"in e?e.endValue:100,m=e.byValue||(d?g.map(function(t,e){return p[e]-g[e]}):p-g);e.onStart&&e.onStart(),function t(e){s=e||+new Date;var i=h<s?a:s-o,e=i/a,n=d?g.map(function(t,e){return f(i,g[e],m[e],a)}):f(i,g,m,a),r=d?Math.abs((n[0]-g[0])/m[0]):Math.abs((n-g)/m);_.currentValue=d?n.slice():n,_.completionRate=r,_.durationRate=e,y||(l(n,r,e)?v():h<s?(_.currentValue=d?p.slice():p,_.completionRate=1,_.durationRate=1,c(d?p.slice():p,1,1),u(p,1,1),v()):(c(n,r,e),St(t)))}(o)}),_.cancel},z.util.requestAnimFrame=St,z.util.cancelAnimFrame=function(){return K.apply(z.window,arguments)},z.runningAnimations=t,z.util.animateColor=function(t,e,i,r){var t=new z.Color(t).getSource(),n=new z.Color(e).getSource(),s=r.onComplete,o=r.onChange;return r=r||{},z.util.animate(z.util.object.extend(r,{duration:i||500,startValue:t,endValue:n,byValue:n,easing:function(t,e,i,n){return wt(e,i,r.colorEasing?r.colorEasing(t,n):1-Math.cos(t/n*(Math.PI/2)))},onComplete:function(t,e,i){if(s)return s(wt(n,n,0),e,i)},onChange:function(t,e,i){if(o){if(Array.isArray(t))return o(wt(t,t,0),e,i);o(t,e,i)}}}))},z.util.ease={easeInQuad:function(t,e,i,n){return i*(t/=n)*t+e},easeOutQuad:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},easeInOutQuad:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,n){return i*(t/=n)*t*t+e},easeOutCubic:function(t,e,i,n){return i*((t=t/n-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,n){return i*(t/=n)*t*t*t+e},easeOutQuart:function(t,e,i,n){return-i*((t=t/n-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},easeOutQuint:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e},easeOutSine:function(t,e,i,n){return i*Math.sin(t/n*(Math.PI/2))+e},easeInOutSine:function(t,e,i,n){return-i/2*(Math.cos(Math.PI*t/n)-1)+e},easeInExpo:function(t,e,i,n){return 0===t?e:i*Math.pow(2,10*(t/n-1))+e},easeOutExpo:function(t,e,i,n){return t===n?e+i:i*(1-Math.pow(2,-10*t/n))+e},easeInOutExpo:function(t,e,i,n){return 0===t?e:t===n?e+i:(t/=n/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,n){return-i*(Math.sqrt(1-(t/=n)*t)-1)+e},easeOutCirc:function(t,e,i,n){return i*Math.sqrt(1-(t=t/n-1)*t)+e},easeInOutCirc:function(t,e,i,n){return(t/=n/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(t,e,i,n){var r=0;return 0===t?e:1===(t/=n)?e+i:-At(Tt(i,i,r=r||.3*n,1.70158),t,n)+e},easeOutElastic:function(t,e,i,n){var r=0;return 0===t?e:1===(t/=n)?e+i:(i=Tt(i,i,r=r||.3*n,1.70158)).a*Math.pow(2,-10*t)*Math.sin((t*n-i.s)*(2*Math.PI)/i.p)+i.c+e},easeInOutElastic:function(t,e,i,n){var r=0;return 0===t?e:2===(t/=n/2)?e+i:(i=Tt(i,i,r=r||n*(.3*1.5),1.70158),t<1?-.5*At(i,t,n)+e:i.a*Math.pow(2,-10*--t)*Math.sin((t*n-i.s)*(2*Math.PI)/i.p)*.5+i.c+e)},easeInBack:function(t,e,i,n,r){return i*(t/=n)*t*(((r=void 0===r?1.70158:r)+1)*t-r)+e},easeOutBack:function(t,e,i,n,r){return i*((t=t/n-1)*t*(((r=void 0===r?1.70158:r)+1)*t+r)+1)+e},easeInOutBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),(t/=n/2)<1?i/2*(t*t*((1+(r*=1.525))*t-r))+e:i/2*((t-=2)*t*((1+(r*=1.525))*t+r)+2)+e},easeInBounce:Ot,easeOutBounce:Et,easeInOutBounce:function(t,e,i,n){return t<n/2?.5*Ot(2*t,0,i,n)+e:.5*Et(2*t-n,0,i,n)+.5*i+e}},function(t){"use strict";var u,e,f,i,n,_=t.fabric||(t.fabric={}),g=_.util.object.extend,d=_.util.object.clone,p=_.util.toFixed,x=_.util.parseUnit,m=_.util.multiplyTransformMatrices,v={cx:"left",x:"left",r:"radius",cy:"top",y:"top",display:"visible",visibility:"visible",transform:"transformMatrix","fill-opacity":"fillOpacity","fill-rule":"fillRule","font-family":"fontFamily","font-size":"fontSize","font-style":"fontStyle","font-weight":"fontWeight","letter-spacing":"charSpacing","paint-order":"paintFirst","stroke-dasharray":"strokeDashArray","stroke-dashoffset":"strokeDashOffset","stroke-linecap":"strokeLineCap","stroke-linejoin":"strokeLineJoin","stroke-miterlimit":"strokeMiterLimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-decoration":"textDecoration","text-anchor":"textAnchor",opacity:"opacity","clip-path":"clipPath","clip-rule":"clipRule","vector-effect":"strokeUniform","image-rendering":"imageSmoothing"},y={stroke:"strokeOpacity",fill:"fillOpacity"},b="font-size",C="clip-path";function r(t){return new RegExp("^("+t.join("|")+")\\b","i")}function S(t,e){for(var i,n=[],r=0,s=e.length;r<s;r++)i=e[r],i=t.getElementsByTagName(i),n=n.concat(Array.prototype.slice.call(i));return n}function w(t,e,i){t[i]=Math.tan(_.util.degreesToRadians(e[0]))}function T(t,e){var i,n={};for(i in _.cssRules[e])if(function(t,e){var i,n=!0;(i=s(t,e.pop()))&&e.length&&(n=function(t,e){var i,n=!0;for(;t.parentNode&&1===t.parentNode.nodeType&&e.length;)n&&(i=e.pop()),t=t.parentNode,n=s(t,i);return 0===e.length}(t,e));return i&&n&&0===e.length}(t,i.split(" ")))for(var r in _.cssRules[e][i])n[r]=_.cssRules[e][i][r];return n}function s(t,e){var i,n=t.nodeName,r=t.getAttribute("class"),t=t.getAttribute("id"),s=new RegExp("^"+n,"i");if(e=e.replace(s,""),t&&e.length&&(s=new RegExp("#"+t+"(?![a-zA-Z\\-]+)","i"),e=e.replace(s,"")),r&&e.length)for(i=(r=r.split(" ")).length;i--;)s=new RegExp("\\."+r[i]+"(?![a-zA-Z\\-]+)","i"),e=e.replace(s,"");return 0===e.length}function A(t,e){var i;if(i=t.getElementById?t.getElementById(e):i)return i;for(var n,r=t.getElementsByTagName("*"),s=0,o=r.length;s<o;s++)if(e===(n=r[s]).getAttribute("id"))return n}_.svgValidTagNamesRegEx=r(["path","circle","polygon","polyline","ellipse","rect","line","image","text"]),_.svgViewBoxElementsRegEx=r(["symbol","image","marker","pattern","view","svg"]),_.svgInvalidAncestorsRegEx=r(["pattern","defs","symbol","metadata","clipPath","mask","desc"]),_.svgValidParentsRegEx=r(["symbol","g","a","svg","clipPath","defs"]),_.cssRules={},_.gradientDefs={},_.clipPaths={},_.parseTransformAttribute=(u=_.iMatrix,t=_.reNum,e=_.commaWsp,f="(?:"+("(?:(matrix)\\s*\\(\\s*("+t+")"+e+"("+t+")"+e+"("+t+")"+e+"("+t+")"+e+"("+t+")"+e+"("+t+")\\s*\\))")+"|"+("(?:(translate)\\s*\\(\\s*("+t+")(?:"+e+"("+t+"))?\\s*\\))")+"|"+("(?:(scale)\\s*\\(\\s*("+t+")(?:"+e+"("+t+"))?\\s*\\))")+"|"+("(?:(rotate)\\s*\\(\\s*("+t+")(?:"+e+"("+t+")"+e+"("+t+"))?\\s*\\))")+"|"+("(?:(skewX)\\s*\\(\\s*("+t+")\\s*\\))")+"|"+("(?:(skewY)\\s*\\(\\s*("+t+")\\s*\\))")+")",i=new RegExp("^\\s*(?:"+("(?:"+f+"(?:"+e+"*"+f+")*)")+"?)\\s*$"),n=new RegExp(f,"g"),function(t){var c=u.concat(),l=[];if(!t||!i.test(t))return c;t.replace(n,function(t){var e,i,n,r,s,o,t=new RegExp(f).exec(t).filter(function(t){return!!t}),a=t[1],h=t.slice(2).map(parseFloat);switch(a){case"translate":o=h,(s=c)[4]=o[0],2===o.length&&(s[5]=o[1]);break;case"rotate":h[0]=_.util.degreesToRadians(h[0]),s=c,o=h,e=_.util.cos(o[0]),i=_.util.sin(o[0]),r=n=0,3===o.length&&(n=o[1],r=o[2]),s[0]=e,s[1]=i,s[2]=-i,s[3]=e,s[4]=n-(e*n-i*r),s[5]=r-(i*n+e*r);break;case"scale":i=c,e=(n=h)[0],n=2===n.length?n[1]:n[0],i[0]=e,i[3]=n;break;case"skewX":w(c,h,2);break;case"skewY":w(c,h,1);break;case"matrix":c=h}l.push(c.concat()),c=u.concat()});for(var e=l[0];1<l.length;)l.shift(),e=_.util.multiplyTransformMatrices(e,l[0]);return e});var O=new RegExp("^\\s*("+_.reNum+"+)\\s*,?\\s*("+_.reNum+"+)\\s*,?\\s*("+_.reNum+"+)\\s*,?\\s*("+_.reNum+"+)\\s*$");function E(t){if(!_.svgViewBoxElementsRegEx.test(t.nodeName))return{};var e,i,n,r=t.getAttribute("viewBox"),s=1,o=1,a=t.getAttribute("width"),h=t.getAttribute("height"),c=t.getAttribute("x")||0,l=t.getAttribute("y")||0,u=t.getAttribute("preserveAspectRatio")||"",f=!r||!(r=r.match(O)),d=!a||!h||"100%"===a||"100%"===h,g=f&&d,p={},m="",v=0,y=0;if(p.width=0,p.height=0,p.toBeParsed=g,f&&(c||l)&&t.parentNode&&"#document"!==t.parentNode.nodeName&&(m=" translate("+x(c)+" "+x(l)+") ",i=(t.getAttribute("transform")||"")+m,t.setAttribute("transform",i),t.removeAttribute("x"),t.removeAttribute("y")),!g)if(f)p.width=x(a),p.height=x(h);else if(g=-parseFloat(r[1]),f=-parseFloat(r[2]),e=parseFloat(r[3]),r=parseFloat(r[4]),p.minX=g,p.minY=f,p.viewBoxWidth=e,p.viewBoxHeight=r,d?(p.width=e,p.height=r):(p.width=x(a),p.height=x(h),s=p.width/e,o=p.height/r),"none"!==(u=_.util.parsePreserveAspectRatioAttribute(u)).alignX&&("meet"===u.meetOrSlice&&(o=s=o<s?o:s),"slice"===u.meetOrSlice&&(o=s=o<s?s:o),v=p.width-e*s,y=p.height-r*s,"Mid"===u.alignX&&(v/=2),"Mid"===u.alignY&&(y/=2),"Min"===u.alignX&&(v=0),"Min"===u.alignY&&(y=0)),1!==s||1!==o||0!=g||0!=f||0!==c||0!==l){if(i=(m=(c||l)&&"#document"!==t.parentNode.nodeName?" translate("+x(c)+" "+x(l)+") ":m)+" matrix("+s+" 0 0 "+o+" "+(g*s+v)+" "+(f*o+y)+") ","svg"===t.nodeName){for(n=t.ownerDocument.createElementNS(_.svgNS,"g");t.firstChild;)n.appendChild(t.firstChild);t.appendChild(n)}else(n=t).removeAttribute("x"),n.removeAttribute("y"),i=n.getAttribute("transform")+i;n.setAttribute("transform",i)}return p}_.parseSVGDocument=function(t,i,e,n){if(t){!function(t){for(var e=S(t,["use","svg:use"]),i=0;e.length&&i<e.length;){var n=e[i],r=n.getAttribute("xlink:href")||n.getAttribute("href");if(null===r)return;var s,r=r.slice(1),o=n.getAttribute("x")||0,a=n.getAttribute("y")||0,h=A(t,r).cloneNode(!0),c=(h.getAttribute("transform")||"")+" translate("+o+", "+a+")",r=e.length,l=_.svgNS;if(E(h),/^svg$/i.test(h.nodeName)){for(var u,f=h.ownerDocument.createElementNS(l,"g"),d=0,g=(u=h.attributes).length;d<g;d++)s=u.item(d),f.setAttributeNS(l,s.nodeName,s.nodeValue);for(;h.firstChild;)f.appendChild(h.firstChild);h=f}for(d=0,g=(u=n.attributes).length;d<g;d++)"x"!==(s=u.item(d)).nodeName&&"y"!==s.nodeName&&"xlink:href"!==s.nodeName&&"href"!==s.nodeName&&("transform"===s.nodeName?c=s.nodeValue+" "+c:h.setAttribute(s.nodeName,s.nodeValue));h.setAttribute("transform",c),h.setAttribute("instantiated_by_use","1"),h.removeAttribute("id"),n.parentNode.replaceChild(h,n),e.length===r&&i++}}(t);var r=_.Object.__uid++,s=E(t),o=_.util.toArray(t.getElementsByTagName("*"));if(s.crossOrigin=n&&n.crossOrigin,s.svgUid=r,0===o.length&&_.isLikelyNode){for(var a=[],h=0,c=(o=t.selectNodes('//*[name(.)!="svg"]')).length;h<c;h++)a[h]=o[h];o=a}var l,u=o.filter(function(t){return E(t),_.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))&&!function(t,e){for(;t=t&&t.parentNode;)if(t.nodeName&&e.test(t.nodeName.replace("svg:",""))&&!t.getAttribute("instantiated_by_use"))return 1}(t,_.svgInvalidAncestorsRegEx)});u&&u.length?(l={},o.filter(function(t){return"clipPath"===t.nodeName.replace("svg:","")}).forEach(function(t){var e=t.getAttribute("id");l[e]=_.util.toArray(t.getElementsByTagName("*")).filter(function(t){return _.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))})}),_.gradientDefs[r]=_.getGradientDefs(t),_.cssRules[r]=_.getCSSRules(t),_.clipPaths[r]=l,_.parseElements(u,function(t,e){i&&(i(t,s,e,o),delete _.gradientDefs[r],delete _.cssRules[r],delete _.clipPaths[r])},d(s),e,n)):i&&i([],{})}};var o=new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*("+_.reNum+"(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|"+_.reNum+"))?\\s+(.*)");g(_,{parseFontDeclaration:function(t,e){var i,n,r,s,t=t.match(o);t&&(i=t[1],n=t[3],r=t[4],s=t[5],t=t[6],i&&(e.fontStyle=i),n&&(e.fontWeight=isNaN(parseFloat(n))?n:parseFloat(n)),r&&(e.fontSize=x(r)),t&&(e.fontFamily=t),s&&(e.lineHeight="normal"===s?1:s))},getGradientDefs:function(t){for(var e,i=S(t,["linearGradient","radialGradient","svg:linearGradient","svg:radialGradient"]),n=0,r={},n=i.length;n--;)(e=i[n]).getAttribute("xlink:href")&&!function t(e,i){var n="xlink:href",r=A(e,i.getAttribute(n).slice(1));if(r&&r.getAttribute(n)&&t(e,r),["gradientTransform","x1","x2","y1","y2","gradientUnits","cx","cy","r","fx","fy"].forEach(function(t){r&&!i.hasAttribute(t)&&r.hasAttribute(t)&&i.setAttribute(t,r.getAttribute(t))}),!i.children.length)for(var s=r.cloneNode(!0);s.firstChild;)i.appendChild(s.firstChild);i.removeAttribute(n)}(t,e),r[e.getAttribute("id")]=e;return r},parseAttributes:function(i,t,e){if(i){var n,r,s={},o=(void 0===e&&(e=i.getAttribute("svgUid")),i.parentNode&&_.svgValidParentsRegEx.test(i.parentNode.nodeName)&&(s=_.parseAttributes(i.parentNode,t,e)),t.reduce(function(t,e){return(n=i.getAttribute(e))&&(t[e]=n),t},{})),t=g(T(i,e),_.parseStyleAttribute(i)),o=g(o,t);t[C]&&i.setAttribute(C,t[C]),r=e=s.fontSize||_.Text.DEFAULT_SVG_FONT_SIZE,o[b]&&(o[b]=r=x(o[b],e));var a,h,c,l={};for(h in o)a=function(t,e,i,n){var r,s=Array.isArray(e);if("fill"!==t&&"stroke"!==t||"none"!==e){if("strokeUniform"===t)return"non-scaling-stroke"===e;if("strokeDashArray"===t)e="none"===e?null:e.replace(/,/g," ").split(/\s+/).map(parseFloat);else if("transformMatrix"===t)e=i&&i.transformMatrix?m(i.transformMatrix,_.parseTransformAttribute(e)):_.parseTransformAttribute(e);else if("visible"===t)e="none"!==e&&"hidden"!==e,i&&!1===i.visible&&(e=!1);else if("opacity"===t)e=parseFloat(e),i&&void 0!==i.opacity&&(e*=i.opacity);else if("textAnchor"===t)e="start"===e?"left":"end"===e?"right":"center";else if("charSpacing"===t)r=x(e,n)/n*1e3;else if("paintFirst"===t){var i=e.indexOf("fill"),o=e.indexOf("stroke"),e="fill";(-1<i&&-1<o&&o<i||-1===i&&-1<o)&&(e="stroke")}else{if("href"===t||"xlink:href"===t||"font"===t)return e;if("imageSmoothing"===t)return"optimizeQuality"===e;r=s?e.map(x):x(e,n)}}else e="";return!s&&isNaN(r)?e:r}(c=(c=h)in v?v[c]:c,o[h],s,r),l[c]=a;l&&l.font&&_.parseFontDeclaration(l.font,l);var u,t=g(s,l);if(_.svgValidParentsRegEx.test(i.nodeName))return t;var f,d=t;for(f in y)if(void 0!==d[y[f]]&&""!==d[f]){if(void 0===d[f]){if(!_.Object.prototype[f])continue;d[f]=_.Object.prototype[f]}0!==d[f].indexOf("url(")&&(u=new _.Color(d[f]),d[f]=u.setAlpha(p(u.getAlpha()*d[y[f]],2)).toRgba())}return d}},parseElements:function(t,e,i,n,r){new _.ElementsParser(t,e,i,n,r).parse()},parseStyleAttribute:function(t){var e,i,n,r={},t=t.getAttribute("style");if(t)if("string"==typeof t)e=r,t.replace(/;\s*$/,"").split(";").forEach(function(t){t=t.split(":");i=t[0].trim().toLowerCase(),n=t[1].trim(),e[i]=n});else{var s,o,a,h=t,c=r;for(a in h)void 0!==h[a]&&(s=a.toLowerCase(),o=h[a],c[s]=o)}return r},parsePointsAttribute:function(t){if(!t)return null;for(var e=[],i=0,n=(t=(t=t.replace(/,/g," ").trim()).split(/\s+/)).length;i<n;i+=2)e.push({x:parseFloat(t[i]),y:parseFloat(t[i+1])});return e},getCSSRules:function(t){for(var e=t.getElementsByTagName("style"),o={},a=0,h=e.length;a<h;a++){var i=e[a].textContent;""!==(i=i.replace(/\/\*[\s\S]*?\*\//g,"")).trim()&&i.split("}").filter(function(t){return t.trim()}).forEach(function(t){var e=t.split("{"),i={},n=e[1].trim().split(";").filter(function(t){return t.trim()});for(a=0,h=n.length;a<h;a++){var r=n[a].split(":"),s=r[0].trim(),r=r[1].trim();i[s]=r}(t=e[0].trim()).split(",").forEach(function(t){""!==(t=t.replace(/^svg/i,"").trim())&&(o[t]?_.util.object.extend(o[t],i):o[t]=_.util.object.clone(i))})})}return o},loadSVGFromURL:function(t,r,e,i){t=t.replace(/^\n\s*/,"").trim(),new _.util.request(t,{method:"get",onComplete:function(t){t=t.responseXML;if(!t||!t.documentElement)return r&&r(null),!1;_.parseSVGDocument(t.documentElement,function(t,e,i,n){r&&r(t,e,i,n)},e,i)}})},loadSVGFromString:function(t,r,e,i){t=(new _.window.DOMParser).parseFromString(t.trim(),"text/xml");_.parseSVGDocument(t.documentElement,function(t,e,i,n){r(t,e,i,n)},e,i)}})}(i),z.ElementsParser=function(t,e,i,n,r,s){this.elements=t,this.callback=e,this.options=i,this.reviver=n,this.svgUid=i&&i.svgUid||0,this.parsingOptions=r,this.regexUrl=/^url\(['"]?#([^'"]+)['"]?\)/g,this.doc=s},(t=z.ElementsParser.prototype).parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},t.createObjects=function(){var i=this;this.elements.forEach(function(t,e){t.setAttribute("svgUid",i.svgUid),i.createObject(t,e)})},t.findTag=function(t){return z[z.util.string.capitalize(t.tagName.replace("svg:",""))]},t.createObject=function(t,e){var i=this.findTag(t);if(i&&i.fromElement)try{i.fromElement(t,this.createCallback(e,t),this.options)}catch(t){z.log(t)}else this.checkIfDone()},t.createCallback=function(i,n){var r=this;return function(t){var e;r.resolveGradient(t,n,"fill"),r.resolveGradient(t,n,"stroke"),t instanceof z.Image&&t._originalElement&&(e=t.parsePreserveAspectRatioAttribute(n)),t._removeTransformMatrix(e),r.resolveClipPath(t,n),r.reviver&&r.reviver(n,t),r.instances[i]=t,r.checkIfDone()}},t.extractPropertyDefinition=function(t,e,i){var t=t[e],e=this.regexUrl;if(e.test(t))return e.lastIndex=0,t=e.exec(t)[1],e.lastIndex=0,z[i][this.svgUid][t]},t.resolveGradient=function(t,e,i){var n=this.extractPropertyDefinition(t,i,"gradientDefs");n&&(e=e.getAttribute(i+"-opacity"),n=z.Gradient.fromElement(n,t,e,this.options),t.set(i,n))},t.createClipPathCallback=function(t,e){return function(t){t._removeTransformMatrix(),t.fillRule=t.clipRule,e.push(t)}},t.resolveClipPath=function(t,e){var i,n=this.extractPropertyDefinition(t,"clipPath","clipPaths");if(n){for(var r=[],s=z.util.invertTransform(t.calcTransformMatrix()),o=n[0].parentNode,a=e;a.parentNode&&a.getAttribute("clip-path")!==t.clipPath;)a=a.parentNode;a.parentNode.appendChild(o);for(var h=0;h<n.length;h++)i=n[h],this.findTag(i).fromElement(i,this.createClipPathCallback(t,r),this.options);n=1===r.length?r[0]:new z.Group(r),e=z.util.multiplyTransformMatrices(s,n.calcTransformMatrix()),n.clipPath&&this.resolveClipPath(n,a);o=z.util.qrDecompose(e);n.flipX=!1,n.flipY=!1,n.set("scaleX",o.scaleX),n.set("scaleY",o.scaleY),n.angle=o.angle,n.skewX=o.skewX,n.skewY=0,n.setPositionByOrigin({x:o.translateX,y:o.translateY},"center","center"),t.clipPath=n}else delete t.clipPath},t.checkIfDone=function(){0==--this.numElements&&(this.instances=this.instances.filter(function(t){return null!=t}),this.callback(this.instances,this.elements))},function(t){"use strict";t=t.fabric||(t.fabric={});function i(t,e){this.x=t,this.y=e}t.Point?t.warn("fabric.Point is already defined"):(t.Point=i).prototype={type:"point",constructor:i,add:function(t){return new i(this.x+t.x,this.y+t.y)},addEquals:function(t){return this.x+=t.x,this.y+=t.y,this},scalarAdd:function(t){return new i(this.x+t,this.y+t)},scalarAddEquals:function(t){return this.x+=t,this.y+=t,this},subtract:function(t){return new i(this.x-t.x,this.y-t.y)},subtractEquals:function(t){return this.x-=t.x,this.y-=t.y,this},scalarSubtract:function(t){return new i(this.x-t,this.y-t)},scalarSubtractEquals:function(t){return this.x-=t,this.y-=t,this},multiply:function(t){return new i(this.x*t,this.y*t)},multiplyEquals:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return new i(this.x/t,this.y/t)},divideEquals:function(t){return this.x/=t,this.y/=t,this},eq:function(t){return this.x===t.x&&this.y===t.y},lt:function(t){return this.x<t.x&&this.y<t.y},lte:function(t){return this.x<=t.x&&this.y<=t.y},gt:function(t){return this.x>t.x&&this.y>t.y},gte:function(t){return this.x>=t.x&&this.y>=t.y},lerp:function(t,e){return void 0===e&&(e=.5),e=Math.max(Math.min(1,e),0),new i(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)},distanceFrom:function(t){var e=this.x-t.x,t=this.y-t.y;return Math.sqrt(e*e+t*t)},midPointFrom:function(t){return this.lerp(t)},min:function(t){return new i(Math.min(this.x,t.x),Math.min(this.y,t.y))},max:function(t){return new i(Math.max(this.x,t.x),Math.max(this.y,t.y))},toString:function(){return this.x+","+this.y},setXY:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setFromPoint:function(t){return this.x=t.x,this.y=t.y,this},swap:function(t){var e=this.x,i=this.y;this.x=t.x,this.y=t.y,t.x=e,t.y=i},clone:function(){return new i(this.x,this.y)}}}(i),function(t){"use strict";var a=t.fabric||(t.fabric={});function h(t){this.status=t,this.points=[]}a.Intersection?a.warn("fabric.Intersection is already defined"):(a.Intersection=h,a.Intersection.prototype={constructor:h,appendPoint:function(t){return this.points.push(t),this},appendPoints:function(t){return this.points=this.points.concat(t),this}},a.Intersection.intersectLineLine=function(t,e,i,n){var r,s=(n.x-i.x)*(t.y-i.y)-(n.y-i.y)*(t.x-i.x),o=(e.x-t.x)*(t.y-i.y)-(e.y-t.y)*(t.x-i.x),n=(n.y-i.y)*(e.x-t.x)-(n.x-i.x)*(e.y-t.y);return 0!=n?(i=o/n,0<=(n=s/n)&&n<=1&&0<=i&&i<=1?(r=new h("Intersection")).appendPoint(new a.Point(t.x+n*(e.x-t.x),t.y+n*(e.y-t.y))):r=new h):r=new h(0==s||0==o?"Coincident":"Parallel"),r},a.Intersection.intersectLinePolygon=function(t,e,i){for(var n,r,s=new h,o=i.length,a=0;a<o;a++)r=i[a],n=i[(a+1)%o],r=h.intersectLineLine(t,e,r,n),s.appendPoints(r.points);return 0<s.points.length&&(s.status="Intersection"),s},a.Intersection.intersectPolygonPolygon=function(t,e){for(var i=new h,n=t.length,r=0;r<n;r++){var s=t[r],o=t[(r+1)%n],s=h.intersectLinePolygon(s,o,e);i.appendPoints(s.points)}return 0<i.points.length&&(i.status="Intersection"),i},a.Intersection.intersectPolygonRectangle=function(t,e,i){var n=e.min(i),e=e.max(i),i=new a.Point(e.x,n.y),r=new a.Point(n.x,e.y),s=h.intersectLinePolygon(n,i,t),i=h.intersectLinePolygon(i,e,t),e=h.intersectLinePolygon(e,r,t),r=h.intersectLinePolygon(r,n,t),n=new h;return n.appendPoints(s.points),n.appendPoints(i.points),n.appendPoints(e.points),n.appendPoints(r.points),0<n.points.length&&(n.status="Intersection"),n})}(i),function(t){"use strict";var c=t.fabric||(t.fabric={});function a(t){t?this._tryParsingColor(t):this.setSource([0,0,0,1])}function h(t,e,i){return i<0&&(i+=1),1<i&&--i,i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}c.Color?c.warn("fabric.Color is already defined."):(c.Color=a,c.Color.prototype={_tryParsingColor:function(t){var e;(e=(e=(e=(e=(e="transparent"===(t=t in a.colorNameMap?a.colorNameMap[t]:t)?[255,255,255,0]:e)||a.sourceFromHex(t))||a.sourceFromRgb(t))||a.sourceFromHsl(t))||[0,0,0,1])&&this.setSource(e)},_rgbToHsl:function(t,e,i){var n,r=c.util.array.max([t/=255,e/=255,i/=255]),s=c.util.array.min([t,e,i]),o=(r+s)/2;if(r===s)n=h=0;else{var a=r-s,h=.5<o?a/(2-r-s):a/(r+s);switch(r){case t:n=(e-i)/a+(e<i?6:0);break;case e:n=(i-t)/a+2;break;case i:n=(t-e)/a+4}n/=6}return[Math.round(360*n),Math.round(100*h),Math.round(100*o)]},getSource:function(){return this._source},setSource:function(t){this._source=t},toRgb:function(){var t=this.getSource();return"rgb("+t[0]+","+t[1]+","+t[2]+")"},toRgba:function(){var t=this.getSource();return"rgba("+t[0]+","+t[1]+","+t[2]+","+t[3]+")"},toHsl:function(){var t=this.getSource(),t=this._rgbToHsl(t[0],t[1],t[2]);return"hsl("+t[0]+","+t[1]+"%,"+t[2]+"%)"},toHsla:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsla("+e[0]+","+e[1]+"%,"+e[2]+"%,"+t[3]+")"},toHex:function(){var t,e=this.getSource(),i=e[0].toString(16);return i=1===i.length?"0"+i:i,t=1===(t=e[1].toString(16)).length?"0"+t:t,e=1===(e=e[2].toString(16)).length?"0"+e:e,i.toUpperCase()+t.toUpperCase()+e.toUpperCase()},toHexa:function(){var t=this.getSource(),t=Math.round(255*t[3]);return t=1===(t=t.toString(16)).length?"0"+t:t,this.toHex()+t.toUpperCase()},getAlpha:function(){return this.getSource()[3]},setAlpha:function(t){var e=this.getSource();return e[3]=t,this.setSource(e),this},toGrayscale:function(){var t=this.getSource(),e=parseInt((.3*t[0]+.59*t[1]+.11*t[2]).toFixed(0),10),t=t[3];return this.setSource([e,e,e,t]),this},toBlackWhite:function(t){var e=this.getSource(),i=(.3*e[0]+.59*e[1]+.11*e[2]).toFixed(0),e=e[3];return t=t||127,i=Number(i)<Number(t)?0:255,this.setSource([i,i,i,e]),this},overlayWith:function(t){t instanceof a||(t=new a(t));for(var e=[],i=this.getAlpha(),n=this.getSource(),r=t.getSource(),s=0;s<3;s++)e.push(Math.round(.5*n[s]+.5*r[s]));return e[3]=i,this.setSource(e),this}},c.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i,c.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i,c.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,c.Color.colorNameMap={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aqua:"#00FFFF",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blue:"#0000FF",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",darkgreen:"#006400",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",fuchsia:"#FF00FF",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",lightgreen:"#90EE90",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",lime:"#00FF00",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",maroon:"#800000",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",navy:"#000080",oldlace:"#FDF5E6",olive:"#808000",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",purple:"#800080",rebeccapurple:"#663399",red:"#FF0000",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",silver:"#C0C0C0",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",teal:"#008080",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",white:"#FFFFFF",whitesmoke:"#F5F5F5",yellow:"#FFFF00",yellowgreen:"#9ACD32"},c.Color.fromRgb=function(t){return a.fromSource(a.sourceFromRgb(t))},c.Color.sourceFromRgb=function(t){var e,i,n,t=t.match(a.reRGBa);if(t)return e=parseInt(t[1],10)/(/%$/.test(t[1])?100:1)*(/%$/.test(t[1])?255:1),i=parseInt(t[2],10)/(/%$/.test(t[2])?100:1)*(/%$/.test(t[2])?255:1),n=parseInt(t[3],10)/(/%$/.test(t[3])?100:1)*(/%$/.test(t[3])?255:1),[parseInt(e,10),parseInt(i,10),parseInt(n,10),t[4]?parseFloat(t[4]):1]},c.Color.fromRgba=a.fromRgb,c.Color.fromHsl=function(t){return a.fromSource(a.sourceFromHsl(t))},c.Color.sourceFromHsl=function(t){var e,i,n,r,s,o,t=t.match(a.reHSLa);if(t)return e=(parseFloat(t[1])%360+360)%360/360,n=parseFloat(t[2])/(/%$/.test(t[2])?100:1),i=parseFloat(t[3])/(/%$/.test(t[3])?100:1),0==n?r=s=o=i:(r=h(n=2*i-(i=i<=.5?i*(1+n):i+n-i*n),i,e+1/3),s=h(n,i,e),o=h(n,i,e-1/3)),[Math.round(255*r),Math.round(255*s),Math.round(255*o),t[4]?parseFloat(t[4]):1]},c.Color.fromHsla=a.fromHsl,c.Color.fromHex=function(t){return a.fromSource(a.sourceFromHex(t))},c.Color.sourceFromHex=function(t){var e,i,n,r,s;if(t.match(a.reHex))return e=3===(t=t.slice(t.indexOf("#")+1)).length||4===t.length,s=8===t.length||4===t.length,i=e?t.charAt(0)+t.charAt(0):t.substring(0,2),n=e?t.charAt(1)+t.charAt(1):t.substring(2,4),r=e?t.charAt(2)+t.charAt(2):t.substring(4,6),s=s?e?t.charAt(3)+t.charAt(3):t.substring(6,8):"FF",[parseInt(i,16),parseInt(n,16),parseInt(r,16),parseFloat((parseInt(s,16)/255).toFixed(2))]},c.Color.fromSource=function(t){var e=new a;return e.setSource(t),e})}(i),function(t){"use strict";var a=t.fabric||(t.fabric={}),r=["e","se","s","sw","w","nw","n","ne","e"],s=["ns","nesw","ew","nwse"],o={},h="left",c="top",l="right",u="bottom",f="center",d={top:u,bottom:c,left:l,right:h,center:f},g=a.util.radiansToDegrees,p=Math.sign||function(t){return(0<t)-(t<0)||+t};function m(t,e){t=t.angle+g(Math.atan2(e.y,e.x))+360;return Math.round(t%360/45)}function v(t,e){var i=e.transform.target,n=i.canvas,r=a.util.object.clone(e);r.target=i,n&&n.fire("object:"+t,r),i.fire(t,e)}function y(t,e){e=e.canvas,t=t[e.uniScaleKey];return e.uniformScaling&&!t||!e.uniformScaling&&t}function _(t){return t.originX===f&&t.originY===f}function x(t,e,i){var n=t.lockScalingX,t=t.lockScalingY;return!(!n||!t)||(!(e||!n&&!t||!i)||(!(!n||"x"!==e)||!(!t||"y"!==e)))}function b(t,e,i,n){return{e:t,transform:e,pointer:{x:i,y:n}}}function C(o){return function(t,e,i,n){var r=e.target,s=r.getCenterPoint(),s=r.translateToOriginPoint(s,e.originX,e.originY),t=o(t,e,i,n);return r.setPositionByOrigin(s,e.originX,e.originY),t}}function S(s,o){return function(t,e,i,n){var r=o(t,e,i,n);return r&&v(s,b(t,e,i,n)),r}}function w(t,e,i,n,r){var s=t.target,t=s.controls[t.corner],o=s.canvas.getZoom(),o=s.padding/o,s=s.toLocalPoint(new a.Point(n,r),e,i);return s.x>=o&&(s.x-=o),s.x<=-o&&(s.x+=o),s.y>=o&&(s.y-=o),s.y<=o&&(s.y+=o),s.x-=t.offsetX,s.y-=t.offsetY,s}function T(t){return t.flipX!==t.flipY}function A(t,e,i,n,r){0!==t[e]&&(e=r/t._getTransformedDimensions()[n]*t[i],t.set(i,e))}function O(t,e,i,n){var r,s=e.target,o=s._getTransformedDimensions(0,s.skewY),i=w(e,e.originX,e.originY,i,n),n=Math.abs(2*i.x)-o.x,i=s.skewX,n=(n<2?r=0:(r=g(Math.atan2(n/s.scaleX,o.y/s.scaleY)),e.originX===h&&e.originY===u&&(r=-r),e.originX===l&&e.originY===c&&(r=-r),T(s)&&(r=-r)),i!==r);return n&&(o=s._getTransformedDimensions().y,s.set("skewX",r),A(s,"skewY","scaleY","y",o)),n}function E(t,e,i,n){var r,s=e.target,o=s._getTransformedDimensions(s.skewX,0),i=w(e,e.originX,e.originY,i,n),n=Math.abs(2*i.y)-o.y,i=s.skewY,n=(n<2?r=0:(r=g(Math.atan2(n/s.scaleY,o.x/s.scaleX)),e.originX===h&&e.originY===u&&(r=-r),e.originX===l&&e.originY===c&&(r=-r),T(s)&&(r=-r)),i!==r);return n&&(o=s._getTransformedDimensions().x,s.set("skewY",r),A(s,"skewX","scaleX","x",o)),n}function k(t,e,i,n,r){var s=e.target,o=s.lockScalingX,a=s.lockScalingY,r=(r=r||{}).by,t=y(t,s),h=x(s,r,t),c=e.gestureScale;if(h)return!1;if(c)l=e.scaleX*c,u=e.scaleY*c;else{if(h=w(e,e.originX,e.originY,i,n),c="y"!==r?p(h.x):1,i="x"!==r?p(h.y):1,e.signX||(e.signX=c),e.signY||(e.signY=i),s.lockScalingFlip&&(e.signX!==c||e.signY!==i))return!1;var l,u,n=s._getTransformedDimensions();u=t&&!r?(t=Math.abs(h.x)+Math.abs(h.y),f=e.original,t=t/(Math.abs(n.x*f.scaleX/s.scaleX)+Math.abs(n.y*f.scaleY/s.scaleY)),l=f.scaleX*t,f.scaleY*t):(l=Math.abs(h.x*s.scaleX/n.x),Math.abs(h.y*s.scaleY/n.y)),_(e)&&(l*=2,u*=2),e.signX!==c&&"y"!==r&&(e.originX=d[e.originX],l*=-1,e.signX=c),e.signY!==i&&"x"!==r&&(e.originY=d[e.originY],u*=-1,e.signY=i)}var f=s.scaleX,t=s.scaleY;return r?("x"===r&&s.set("scaleX",l),"y"===r&&s.set("scaleY",u)):(o||s.set("scaleX",l),a||s.set("scaleY",u)),f!==s.scaleX||t!==s.scaleY}o.scaleCursorStyleHandler=function(t,e,i){var t=y(t,i),n="";return 0!==e.x&&0===e.y?n="x":0===e.x&&0!==e.y&&(n="y"),x(i,n,t)?"not-allowed":(n=m(i,e),r[n]+"-resize")},o.skewCursorStyleHandler=function(t,e,i){var n="not-allowed";return 0!==e.x&&i.lockSkewingY||0!==e.y&&i.lockSkewingX?n:(n=m(i,e)%4,s[n]+"-resize")},o.scaleSkewCursorStyleHandler=function(t,e,i){return t[i.canvas.altActionKey]?o.skewCursorStyleHandler(t,e,i):o.scaleCursorStyleHandler(t,e,i)},o.rotationWithSnapping=S("rotating",C(function(t,e,i,n){var r,s=e.target,o=s.translateToOriginPoint(s.getCenterPoint(),e.originX,e.originY);return!s.lockRotation&&(r=Math.atan2(e.ey-o.y,e.ex-o.x),n=Math.atan2(n-o.y,i-o.x),i=g(n-r+e.theta),o=!0,0<s.snapAngle&&(n=s.snapAngle,r=s.snapThreshold||n,e=Math.ceil(i/n)*n,n=Math.floor(i/n)*n,Math.abs(i-n)<r?i=n:Math.abs(i-e)<r&&(i=e)),i<0&&(i=360+i),o=s.angle!==(i%=360),s.angle=i,o)})),o.scalingEqually=S("scaling",C(function(t,e,i,n){return k(t,e,i,n)})),o.scalingX=S("scaling",C(function(t,e,i,n){return k(t,e,i,n,{by:"x"})})),o.scalingY=S("scaling",C(function(t,e,i,n){return k(t,e,i,n,{by:"y"})})),o.scalingYOrSkewingX=function(t,e,i,n){return t[e.target.canvas.altActionKey]?o.skewHandlerX(t,e,i,n):o.scalingY(t,e,i,n)},o.scalingXOrSkewingY=function(t,e,i,n){return t[e.target.canvas.altActionKey]?o.skewHandlerY(t,e,i,n):o.scalingX(t,e,i,n)},o.changeWidth=S("resizing",C(function(t,e,i,n){var r=e.target,i=w(e,e.originX,e.originY,i,n),n=r.strokeWidth/(r.strokeUniform?r.scaleX:1),e=_(e)?2:1,s=r.width,i=Math.abs(i.x*e/r.scaleX)-n;return r.set("width",Math.max(i,0)),s!==i})),o.skewHandlerX=function(t,e,i,n){var r,s=e.target,o=s.skewX,a=e.originY;return!s.lockSkewingX&&(0===o?r=0<w(e,f,f,i,n).x?h:l:(0<o&&(r=a===c?h:l),o<0&&(r=a===c?l:h),T(s)&&(r=r===h?l:h)),e.originX=r,S("skewing",C(O))(t,e,i,n))},o.skewHandlerY=function(t,e,i,n){var r,s=e.target,o=s.skewY,a=e.originX;return!s.lockSkewingY&&(0===o?r=0<w(e,f,f,i,n).y?c:u:(0<o&&(r=a===h?c:u),o<0&&(r=a===h?u:c),T(s)&&(r=r===c?u:c)),e.originY=r,S("skewing",C(E))(t,e,i,n))},o.dragHandler=function(t,e,i,n){var r=e.target,s=i-e.offsetX,o=n-e.offsetY,a=!r.get("lockMovementX")&&r.left!==s,h=!r.get("lockMovementY")&&r.top!==o;return a&&r.set("left",s),h&&r.set("top",o),(a||h)&&v("moving",b(t,e,i,n)),a||h},o.scaleOrSkewActionName=function(t,e,i){return t=t[i.canvas.altActionKey],0===e.x?t?"skewX":"scaleY":0===e.y?t?"skewY":"scaleX":void 0},o.rotationStyleHandler=function(t,e,i){return i.lockRotation?"not-allowed":e.cursorStyle},o.fireEvent=v,o.wrapWithFixedAnchor=C,o.wrapWithFireEvent=S,o.getLocalPoint=w,a.controlsUtils=o}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),u=t.util.degreesToRadians,t=t.controlsUtils;t.renderCircleControl=function(t,e,i,n,r){n=n||{};var s,o=this.sizeX||n.cornerSize||r.cornerSize,a=this.sizeY||n.cornerSize||r.cornerSize,h=(c=(void 0!==n.transparentCorners?n:r).transparentCorners)?"stroke":"fill",c=!c&&(n.cornerStrokeColor||r.cornerStrokeColor),l=e,u=i;t.save(),t.fillStyle=n.cornerColor||r.cornerColor,t.strokeStyle=n.cornerStrokeColor||r.cornerStrokeColor,a<o?(t.scale(1,a/(s=o)),u=i*o/a):o<a?(t.scale(o/(s=a),1),l=e*a/o):s=o,t.lineWidth=1,t.beginPath(),t.arc(l,u,s/2,0,2*Math.PI,!1),t[h](),c&&t.stroke(),t.restore()},t.renderSquareControl=function(t,e,i,n,r){n=n||{};var s=this.sizeX||n.cornerSize||r.cornerSize,o=this.sizeY||n.cornerSize||r.cornerSize,a=(h=(void 0!==n.transparentCorners?n:r).transparentCorners)?"stroke":"fill",h=!h&&(n.cornerStrokeColor||r.cornerStrokeColor),c=s/2,l=o/2;t.save(),t.fillStyle=n.cornerColor||r.cornerColor,t.strokeStyle=n.cornerStrokeColor||r.cornerStrokeColor,t.lineWidth=1,t.translate(e,i),t.rotate(u(r.angle)),t[a+"Rect"](-c,-l,s,o),h&&t.strokeRect(-c,-l,s,o),t.restore()}}(i),function(t){"use strict";var f=t.fabric||(t.fabric={});f.Control=function(t){for(var e in t)this[e]=t[e]},f.Control.prototype={visible:!0,actionName:"scale",angle:0,x:0,y:0,offsetX:0,offsetY:0,sizeX:null,sizeY:null,touchSizeX:null,touchSizeY:null,cursorStyle:"crosshair",withConnection:!1,actionHandler:function(){},mouseDownHandler:function(){},mouseUpHandler:function(){},getActionHandler:function(){return this.actionHandler},getMouseDownHandler:function(){return this.mouseDownHandler},getMouseUpHandler:function(){return this.mouseUpHandler},cursorStyleHandler:function(t,e){return e.cursorStyle},getActionName:function(t,e){return e.actionName},getVisibility:function(t,e){t=t._controlsVisibility;return t&&void 0!==t[e]?t[e]:this.visible},setVisibility:function(t){this.visible=t},positionHandler:function(t,e){return f.util.transformPoint({x:this.x*t.x+this.offsetX,y:this.y*t.y+this.offsetY},e)},calcCornerCoords:function(t,e,i,n,r){var s,o,a,h,c,l,u=r?this.touchSizeX:this.sizeX,r=r?this.touchSizeY:this.sizeY;return u&&r&&u!==r?(h=Math.atan2(r,u),c=Math.sqrt(u*u+r*r)/2,l=h-f.util.degreesToRadians(t),h=Math.PI/2-h-f.util.degreesToRadians(t),s=c*f.util.cos(l),o=c*f.util.sin(l),a=c*f.util.cos(h),h=c*f.util.sin(h)):(c=.7071067812*(u&&r?u:e),l=f.util.degreesToRadians(45-t),s=a=c*f.util.cos(l),o=h=c*f.util.sin(l)),{tl:{x:i-h,y:n-a},tr:{x:i+s,y:n-o},bl:{x:i-s,y:n+o},br:{x:i+h,y:n+a}}},render:function(t,e,i,n,r){("circle"===((n=n||{}).cornerStyle||r.cornerStyle)?f.controlsUtils.renderCircleControl:f.controlsUtils.renderSquareControl).call(this,t,e,i,n,r)}}}(i),J=z.util.object.clone,z.Gradient=z.util.createClass({offsetX:0,offsetY:0,gradientTransform:null,gradientUnits:"pixels",type:"linear",initialize:function(e){(e=e||{}).coords||(e.coords={});var t,i=this;Object.keys(e).forEach(function(t){i[t]=e[t]}),this.id?this.id+="_"+z.Object.__uid++:this.id=z.Object.__uid++,t={x1:e.coords.x1||0,y1:e.coords.y1||0,x2:e.coords.x2||0,y2:e.coords.y2||0},"radial"===this.type&&(t.r1=e.coords.r1||0,t.r2=e.coords.r2||0),this.coords=t,this.colorStops=e.colorStops.slice()},addColorStop:function(t){for(var e in t){var i=new z.Color(t[e]);this.colorStops.push({offset:parseFloat(e),color:i.toRgb(),opacity:i.getAlpha()})}return this},toObject:function(t){var e={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform&&this.gradientTransform.concat()};return z.util.populateWithProperties(this,e,t),e},toSVG:function(t,e){var i,n=J(this.coords,!0),e=e||{},r=J(this.colorStops,!0),s=n.r1>n.r2,o=(this.gradientTransform||z.iMatrix).concat(),a=-this.offsetX,h=-this.offsetY,c=!!e.additionalTransform,l="pixels"===this.gradientUnits?"userSpaceOnUse":"objectBoundingBox";if(r.sort(function(t,e){return t.offset-e.offset}),"objectBoundingBox"==l?(a/=t.width,h/=t.height):(a+=t.width/2,h+=t.height/2),"path"===t.type&&"percentage"!==this.gradientUnits&&(a-=t.pathOffset.x,h-=t.pathOffset.y),o[4]-=a,o[5]-=h,t='id="SVGID_'+this.id+'" gradientUnits="'+l+'"',t+=' gradientTransform="'+(c?e.additionalTransform+" ":"")+z.util.matrixToSVG(o)+'" ',"linear"===this.type?i=["<linearGradient ",t,' x1="',n.x1,'" y1="',n.y1,'" x2="',n.x2,'" y2="',n.y2,'">\n']:"radial"===this.type&&(i=["<radialGradient ",t,' cx="',s?n.x1:n.x2,'" cy="',s?n.y1:n.y2,'" r="',s?n.r1:n.r2,'" fx="',s?n.x2:n.x1,'" fy="',s?n.y2:n.y1,'">\n']),"radial"===this.type){if(s)for((r=r.concat()).reverse(),f=0,d=r.length;f<d;f++)r[f].offset=1-r[f].offset;a=Math.min(n.r1,n.r2);if(0<a)for(var u=a/Math.max(n.r1,n.r2),f=0,d=r.length;f<d;f++)r[f].offset+=u*(1-r[f].offset)}for(f=0,d=r.length;f<d;f++){var g=r[f];i.push("<stop ",'offset="',100*g.offset+"%",'" style="stop-color:',g.color,void 0!==g.opacity?";stop-opacity: "+g.opacity:";",'"/>\n')}return i.push("linear"===this.type?"</linearGradient>\n":"</radialGradient>\n"),i.join("")},toLive:function(t){var e,i,n,r=z.util.object.clone(this.coords);if(this.type){for("linear"===this.type?e=t.createLinearGradient(r.x1,r.y1,r.x2,r.y2):"radial"===this.type&&(e=t.createRadialGradient(r.x1,r.y1,r.r1,r.x2,r.y2,r.r2)),i=0,n=this.colorStops.length;i<n;i++){var s=this.colorStops[i].color,o=this.colorStops[i].opacity,a=this.colorStops[i].offset;void 0!==o&&(s=new z.Color(s).setAlpha(o).toRgba()),e.addColorStop(a,s)}return e}}}),z.util.object.extend(z.Gradient,{fromElement:function(t,e,i,n){for(var r,s,o,a,h,c,l,u=(u=parseFloat(i)/(/%$/.test(i)?100:1))<0?0:1<u?1:u,f=(isNaN(u)&&(u=1),t.getElementsByTagName("stop")),i="userSpaceOnUse"===t.getAttribute("gradientUnits")?"pixels":"percentage",d=t.getAttribute("gradientTransform")||"",g=[],p=0,m=0,v="linearGradient"===t.nodeName||"LINEARGRADIENT"===t.nodeName?(r="linear",{x1:(s=t).getAttribute("x1")||0,y1:s.getAttribute("y1")||0,x2:s.getAttribute("x2")||"100%",y2:s.getAttribute("y2")||0}):(r="radial",{x1:(s=t).getAttribute("fx")||s.getAttribute("cx")||"50%",y1:s.getAttribute("fy")||s.getAttribute("cy")||"50%",r1:0,x2:s.getAttribute("cx")||"50%",y2:s.getAttribute("cy")||"50%",r2:s.getAttribute("r")||"50%"}),y=f.length;y--;)g.push(function(t,e){var i,n,r,s=t.getAttribute("style"),o=t.getAttribute("offset")||0;if(o=(o=parseFloat(o)/(/%$/.test(o)?100:1))<0?0:1<o?1:o,s){var a=s.split(/\s*;\s*/);for(""===a[a.length-1]&&a.pop(),r=a.length;r--;){var h=a[r].split(/\s*:\s*/),c=h[0].trim(),h=h[1].trim();"stop-color"===c?i=h:"stop-opacity"===c&&(n=h)}}return i=i||t.getAttribute("stop-color")||"rgb(0,0,0)",n=n||t.getAttribute("stop-opacity"),s=(i=new z.Color(i)).getAlpha(),n=isNaN(parseFloat(n))?1:parseFloat(n),n*=s*e,{offset:o,color:i.toRgb(),opacity:n}}(f[y],u));return d=z.parseTransformAttribute(d),o=v,a=n,h=i,Object.keys(o).forEach(function(t){"Infinity"===(c=o[t])?l=1:"-Infinity"===c?l=0:(l=parseFloat(o[t],10),"string"==typeof c&&/^(\d+\.\d+)%|(\d+)%$/.test(c)&&(l*=.01,"pixels"===h&&("x1"!==t&&"x2"!==t&&"r2"!==t||(l*=a.viewBoxWidth||a.width),"y1"!==t&&"y2"!==t||(l*=a.viewBoxHeight||a.height)))),o[t]=l}),"pixels"==i&&(p=-e.left,m=-e.top),new z.Gradient({id:t.getAttribute("id"),type:r,coords:v,colorStops:g,gradientUnits:i,gradientTransform:d,offsetX:p,offsetY:m})}}),function(){"use strict";var n=z.util.toFixed;z.Pattern=z.util.createClass({repeat:"repeat",offsetX:0,offsetY:0,crossOrigin:"",patternTransform:null,initialize:function(t,i){var n;t=t||{},this.id=z.Object.__uid++,this.setOptions(t),!t.source||t.source&&"string"!=typeof t.source?i&&i(this):((n=this).source=z.util.createImage(),z.util.loadImage(t.source,function(t,e){n.source=t,i&&i(n,e)},null,this.crossOrigin))},toObject:function(t){var e,i=z.Object.NUM_FRACTION_DIGITS;return"string"==typeof this.source.src?e=this.source.src:"object"==typeof this.source&&this.source.toDataURL&&(e=this.source.toDataURL()),e={type:"pattern",source:e,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:n(this.offsetX,i),offsetY:n(this.offsetY,i),patternTransform:this.patternTransform?this.patternTransform.concat():null},z.util.populateWithProperties(this,e,t),e},toSVG:function(t){var e="function"==typeof this.source?this.source():this.source,i=e.width/t.width,n=e.height/t.height,r=this.offsetX/t.width,t=this.offsetY/t.height,s="";return"repeat-x"!==this.repeat&&"no-repeat"!==this.repeat||(n=1,t&&(n+=Math.abs(t))),"repeat-y"!==this.repeat&&"no-repeat"!==this.repeat||(i=1,r&&(i+=Math.abs(r))),e.src?s=e.src:e.toDataURL&&(s=e.toDataURL()),'<pattern id="SVGID_'+this.id+'" x="'+r+'" y="'+t+'" width="'+i+'" height="'+n+'">\n<image x="0" y="0" width="'+e.width+'" height="'+e.height+'" xlink:href="'+s+'"></image>\n</pattern>\n'},setOptions:function(t){for(var e in t)this[e]=t[e]},toLive:function(t){var e=this.source;if(!e)return"";if(void 0!==e.src){if(!e.complete)return"";if(0===e.naturalWidth||0===e.naturalHeight)return""}return t.createPattern(e,this.repeat)}})}(),function(t){"use strict";var o=t.fabric||(t.fabric={}),a=o.util.toFixed;o.Shadow?o.warn("fabric.Shadow is already defined."):(o.Shadow=o.util.createClass({color:"rgb(0,0,0)",blur:0,offsetX:0,offsetY:0,affectStroke:!1,includeDefaultValues:!0,nonScaling:!1,initialize:function(t){for(var e in t="string"==typeof t?this._parseShadow(t):t)this[e]=t[e];this.id=o.Object.__uid++},_parseShadow:function(t){var t=t.trim(),e=o.Shadow.reOffsetsAndBlur.exec(t)||[];return{color:(t.replace(o.Shadow.reOffsetsAndBlur,"")||"rgb(0,0,0)").trim(),offsetX:parseFloat(e[1],10)||0,offsetY:parseFloat(e[2],10)||0,blur:parseFloat(e[3],10)||0}},toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join("px ")},toSVG:function(t){var e=40,i=40,n=o.Object.NUM_FRACTION_DIGITS,r=o.util.rotateVector({x:this.offsetX,y:this.offsetY},o.util.degreesToRadians(-t.angle)),s=new o.Color(this.color);return t.width&&t.height&&(e=100*a((Math.abs(r.x)+this.blur)/t.width,n)+20,i=100*a((Math.abs(r.y)+this.blur)/t.height,n)+20),t.flipX&&(r.x*=-1),t.flipY&&(r.y*=-1),'<filter id="SVGID_'+this.id+'" y="-'+i+'%" height="'+(100+2*i)+'%" x="-'+e+'%" width="'+(100+2*e)+'%" >\n\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+a(this.blur?this.blur/2:0,n)+'"></feGaussianBlur>\n\t<feOffset dx="'+a(r.x,n)+'" dy="'+a(r.y,n)+'" result="oBlur" ></feOffset>\n\t<feFlood flood-color="'+s.toRgb()+'" flood-opacity="'+s.getAlpha()+'"/>\n\t<feComposite in2="oBlur" operator="in" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n\t</feMerge>\n</filter>\n'},toObject:function(){var e,i;return this.includeDefaultValues?{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling}:(e={},i=o.Shadow.prototype,["color","blur","offsetX","offsetY","affectStroke","nonScaling"].forEach(function(t){this[t]!==i[t]&&(e[t]=this[t])},this),e)}}),o.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/)}(i),function(){"use strict";var r,t,c,a,s,o,i,n,e;z.StaticCanvas?z.warn("fabric.StaticCanvas is already defined."):(r=z.util.object.extend,t=z.util.getElementOffset,c=z.util.removeFromArray,a=z.util.toFixed,s=z.util.transformPoint,o=z.util.invertTransform,i=z.util.getNodeCanvas,n=z.util.createCanvasElement,e=new Error("Could not initialize `canvas` element"),z.StaticCanvas=z.util.createClass(z.CommonMethods,{initialize:function(t,e){e=e||{},this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e)},backgroundColor:"",backgroundImage:null,overlayColor:"",overlayImage:null,includeDefaultValues:!0,stateful:!1,renderOnAddRemove:!0,controlsAboveOverlay:!1,allowTouchScrolling:!1,imageSmoothingEnabled:!0,viewportTransform:z.iMatrix.concat(),backgroundVpt:!0,overlayVpt:!0,enableRetinaScaling:!0,vptCoords:{},skipOffscreen:!0,clipPath:void 0,_initStatic:function(t,e){var i=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(t),this._initOptions(e),this.interactive||this._initRetinaScaling(),e.overlayImage&&this.setOverlayImage(e.overlayImage,i),e.backgroundImage&&this.setBackgroundImage(e.backgroundImage,i),e.backgroundColor&&this.setBackgroundColor(e.backgroundColor,i),e.overlayColor&&this.setOverlayColor(e.overlayColor,i),this.calcOffset()},_isRetinaScaling:function(){return 1<z.devicePixelRatio&&this.enableRetinaScaling},getRetinaScaling:function(){return this._isRetinaScaling()?Math.max(1,z.devicePixelRatio):1},_initRetinaScaling:function(){var t;this._isRetinaScaling()&&(t=z.devicePixelRatio,this.__initRetinaScaling(t,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(t,this.upperCanvasEl,this.contextTop))},__initRetinaScaling:function(t,e,i){e.setAttribute("width",this.width*t),e.setAttribute("height",this.height*t),i.scale(t,t)},calcOffset:function(){return this._offset=t(this.lowerCanvasEl),this},setOverlayImage:function(t,e,i){return this.__setBgOverlayImage("overlayImage",t,e,i)},setBackgroundImage:function(t,e,i){return this.__setBgOverlayImage("backgroundImage",t,e,i)},setOverlayColor:function(t,e){return this.__setBgOverlayColor("overlayColor",t,e)},setBackgroundColor:function(t,e){return this.__setBgOverlayColor("backgroundColor",t,e)},__setBgOverlayImage:function(n,t,r,s){return"string"==typeof t?z.util.loadImage(t,function(t,e){var i;t&&(i=new z.Image(t,s),(this[n]=i).canvas=this),r&&r(t,e)},this,s&&s.crossOrigin):(s&&t.setOptions(s),(this[n]=t)&&(t.canvas=this),r&&r(t,!1)),this},__setBgOverlayColor:function(t,e,i){return this[t]=e,this._initGradient(e,t),this._initPattern(e,t,i),this},_createCanvasElement:function(){var t=n();if(!t)throw e;if(t.style||(t.style={}),void 0===t.getContext)throw e;return t},_initOptions:function(t){var e=this.lowerCanvasEl;this._setOptions(t),this.width=this.width||parseInt(e.width,10)||0,this.height=this.height||parseInt(e.height,10)||0,this.lowerCanvasEl.style&&(e.width=this.width,e.height=this.height,e.style.width=this.width+"px",e.style.height=this.height+"px",this.viewportTransform=this.viewportTransform.slice())},_createLowerCanvas:function(t){t&&t.getContext?this.lowerCanvasEl=t:this.lowerCanvasEl=z.util.getById(t)||this._createCanvasElement(),z.util.addClass(this.lowerCanvasEl,"lower-canvas"),this._originalCanvasStyle=this.lowerCanvasEl.style,this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext("2d")},getWidth:function(){return this.width},getHeight:function(){return this.height},setWidth:function(t,e){return this.setDimensions({width:t},e)},setHeight:function(t,e){return this.setDimensions({height:t},e)},setDimensions:function(t,e){var i,n;for(n in e=e||{},t)i=t[n],e.cssOnly||(this._setBackstoreDimension(n,t[n]),i+="px",this.hasLostContext=!0),e.backstoreOnly||this._setCssDimension(n,i);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(this.contextTop),this._initRetinaScaling(),this.calcOffset(),e.cssOnly||this.requestRenderAll(),this},_setBackstoreDimension:function(t,e){return this.lowerCanvasEl[t]=e,this.upperCanvasEl&&(this.upperCanvasEl[t]=e),this.cacheCanvasEl&&(this.cacheCanvasEl[t]=e),this[t]=e,this},_setCssDimension:function(t,e){return this.lowerCanvasEl.style[t]=e,this.upperCanvasEl&&(this.upperCanvasEl.style[t]=e),this.wrapperEl&&(this.wrapperEl.style[t]=e),this},getZoom:function(){return this.viewportTransform[0]},setViewportTransform:function(t){var e,i,n,r=this._activeObject,s=this.backgroundImage,o=this.overlayImage;for(this.viewportTransform=t,i=0,n=this._objects.length;i<n;i++)(e=this._objects[i]).group||e.setCoords(!0);return r&&r.setCoords(),s&&s.setCoords(!0),o&&o.setCoords(!0),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},zoomToPoint:function(t,e){var i=t,n=this.viewportTransform.slice(0),e=(t=s(t,o(this.viewportTransform)),n[0]=e,n[3]=e,s(t,n));return n[4]+=i.x-e.x,n[5]+=i.y-e.y,this.setViewportTransform(n)},setZoom:function(t){return this.zoomToPoint(new z.Point(0,0),t),this},absolutePan:function(t){var e=this.viewportTransform.slice(0);return e[4]=-t.x,e[5]=-t.y,this.setViewportTransform(e)},relativePan:function(t){return this.absolutePan(new z.Point(-t.x-this.viewportTransform[4],-t.y-this.viewportTransform[5]))},getElement:function(){return this.lowerCanvasEl},_onObjectAdded:function(t){this.stateful&&t.setupState(),t._set("canvas",this),t.setCoords(),this.fire("object:added",{target:t}),t.fire("added")},_onObjectRemoved:function(t){this.fire("object:removed",{target:t}),t.fire("removed"),delete t.canvas},clearContext:function(t){return t.clearRect(0,0,this.width,this.height),this},getContext:function(){return this.contextContainer},clear:function(){return this.remove.apply(this,this.getObjects()),this.backgroundImage=null,this.overlayImage=null,this.backgroundColor="",this.overlayColor="",this._hasITextHandlers&&(this.off("mouse:up",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire("canvas:cleared"),this.renderOnAddRemove&&this.requestRenderAll(),this},renderAll:function(){var t=this.contextContainer;return this.renderCanvas(t,this._objects),this},renderAndReset:function(){this.isRendering=0,this.renderAll()},requestRenderAll:function(){return this.isRendering||(this.isRendering=z.util.requestAnimFrame(this.renderAndResetBound)),this},calcViewportBoundaries:function(){var t={},e=this.width,i=this.height,n=o(this.viewportTransform);return t.tl=s({x:0,y:0},n),t.br=s({x:e,y:i},n),t.tr=new z.Point(t.br.x,t.tl.y),t.bl=new z.Point(t.tl.x,t.br.y),this.vptCoords=t},cancelRequestedRender:function(){this.isRendering&&(z.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},renderCanvas:function(t,e){var i=this.viewportTransform,n=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(t),z.util.setImageSmoothing(t,this.imageSmoothingEnabled),this.fire("before:render",{ctx:t}),this._renderBackground(t),t.save(),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this._renderObjects(t,e),t.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),n&&(n.canvas=this,n.shouldCache(),n._transformDone=!0,n.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(t)),this._renderOverlay(t),this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),this.fire("after:render",{ctx:t})},drawClipPathOnCanvas:function(t){var e=this.viewportTransform,i=this.clipPath;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t.globalCompositeOperation="destination-in",i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},_renderObjects:function(t,e){for(var i=0,n=e.length;i<n;++i)e[i]&&e[i].render(t)},_renderBackgroundOrOverlay:function(t,e){var i=this[e+"Color"],n=this[e+"Image"],r=this.viewportTransform,e=this[e+"Vpt"];(i||n)&&(i&&(t.save(),t.beginPath(),t.moveTo(0,0),t.lineTo(this.width,0),t.lineTo(this.width,this.height),t.lineTo(0,this.height),t.closePath(),t.fillStyle=i.toLive?i.toLive(t,this):i,e&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),t.transform(1,0,0,1,i.offsetX||0,i.offsetY||0),(i=i.gradientTransform||i.patternTransform)&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.fill(),t.restore()),n&&(t.save(),e&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),n.render(t),t.restore()))},_renderBackground:function(t){this._renderBackgroundOrOverlay(t,"background")},_renderOverlay:function(t){this._renderBackgroundOrOverlay(t,"overlay")},getCenter:function(){return{top:this.height/2,left:this.width/2}},getCenterPoint:function(){return new z.Point(this.width/2,this.height/2)},centerObjectH:function(t){return this._centerObject(t,new z.Point(this.getCenterPoint().x,t.getCenterPoint().y))},centerObjectV:function(t){return this._centerObject(t,new z.Point(t.getCenterPoint().x,this.getCenterPoint().y))},centerObject:function(t){var e=this.getCenterPoint();return this._centerObject(t,e)},viewportCenterObject:function(t){var e=this.getVpCenter();return this._centerObject(t,e)},viewportCenterObjectH:function(t){var e=this.getVpCenter();return this._centerObject(t,new z.Point(e.x,t.getCenterPoint().y)),this},viewportCenterObjectV:function(t){var e=this.getVpCenter();return this._centerObject(t,new z.Point(t.getCenterPoint().x,e.y))},getVpCenter:function(){var t=this.getCenterPoint(),e=o(this.viewportTransform);return s(t,e)},_centerObject:function(t,e){return t.setPositionByOrigin(e,"center","center"),t.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},toDatalessJSON:function(t){return this.toDatalessObject(t)},toObject:function(t){return this._toObjectMethod("toObject",t)},toDatalessObject:function(t){return this._toObjectMethod("toDatalessObject",t)},_toObjectMethod:function(t,e){var i=this.clipPath,n={version:z.version,objects:this._toObjects(t,e)};return i&&!i.excludeFromExport&&(n.clipPath=this._toObject(this.clipPath,t,e)),r(n,this.__serializeBgOverlay(t,e)),z.util.populateWithProperties(this,n,e),n},_toObjects:function(e,i){return this._objects.filter(function(t){return!t.excludeFromExport}).map(function(t){return this._toObject(t,e,i)},this)},_toObject:function(t,e,i){this.includeDefaultValues||(n=t.includeDefaultValues,t.includeDefaultValues=!1);var n,e=t[e](i);return this.includeDefaultValues||(t.includeDefaultValues=n),e},__serializeBgOverlay:function(t,e){var i={},n=this.backgroundImage,r=this.overlayImage,s=this.backgroundColor,o=this.overlayColor;return s&&s.toObject?s.excludeFromExport||(i.background=s.toObject(e)):s&&(i.background=s),o&&o.toObject?o.excludeFromExport||(i.overlay=o.toObject(e)):o&&(i.overlay=o),n&&!n.excludeFromExport&&(i.backgroundImage=this._toObject(n,t,e)),r&&!r.excludeFromExport&&(i.overlayImage=this._toObject(r,t,e)),i},svgViewportTransformation:!0,toSVG:function(t,e){(t=t||{}).reviver=e;var i=[];return this._setSVGPreamble(i,t),this._setSVGHeader(i,t),this.clipPath&&i.push('<g clip-path="url(#'+this.clipPath.clipPathId+')" >\n'),this._setSVGBgOverlayColor(i,"background"),this._setSVGBgOverlayImage(i,"backgroundImage",e),this._setSVGObjects(i,e),this.clipPath&&i.push("</g>\n"),this._setSVGBgOverlayColor(i,"overlay"),this._setSVGBgOverlayImage(i,"overlayImage",e),i.push("</svg>"),i.join("")},_setSVGPreamble:function(t,e){e.suppressPreamble||t.push('<?xml version="1.0" encoding="',e.encoding||"UTF-8",'" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n')},_setSVGHeader:function(t,e){var i,n=e.width||this.width,r=e.height||this.height,s='viewBox="0 0 '+this.width+" "+this.height+'" ',o=z.Object.NUM_FRACTION_DIGITS;e.viewBox?s='viewBox="'+e.viewBox.x+" "+e.viewBox.y+" "+e.viewBox.width+" "+e.viewBox.height+'" ':this.svgViewportTransformation&&(i=this.viewportTransform,s='viewBox="'+a(-i[4]/i[0],o)+" "+a(-i[5]/i[3],o)+" "+a(this.width/i[0],o)+" "+a(this.height/i[3],o)+'" '),t.push("<svg ",'xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',n,'" ','height="',r,'" ',s,'xml:space="preserve">\n',"<desc>Created with Fabric.js ",z.version,"</desc>\n","<defs>\n",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(e),"</defs>\n")},createSVGClipPathMarkup:function(t){var e=this.clipPath;return e?(e.clipPathId="CLIPPATH_"+z.Object.__uid++,'<clipPath id="'+e.clipPathId+'" >\n'+this.clipPath.toClipPathSVG(t.reviver)+"</clipPath>\n"):""},createSVGRefElementsMarkup:function(){var r=this;return["background","overlay"].map(function(t){var e,i,n=r[t+"Color"];if(n&&n.toLive)return t=r[t+"Vpt"],e=r.viewportTransform,i={width:r.width/(t?e[0]:1),height:r.height/(t?e[3]:1)},n.toSVG(i,{additionalTransform:t?z.util.matrixToSVG(e):""})}).join("")},createSVGFontFacesMarkup:function(){var t,e,i,n,r,s,o,a,h,c="",l={},u=z.fontPaths,f=[];for(this._objects.forEach(function t(e){f.push(e),e._objects&&e._objects.forEach(t)}),o=0,a=f.length;o<a;o++)if(e=(t=f[o]).fontFamily,-1!==t.type.indexOf("text")&&!l[e]&&u[e]&&(l[e]=!0,t.styles))for(r in i=t.styles)for(s in n=i[r])!l[e=n[s].fontFamily]&&u[e]&&(l[e]=!0);for(h in l)c+=["\t\t@font-face {\n","\t\t\tfont-family: '",h,"';\n","\t\t\tsrc: url('",u[h],"');\n","\t\t}\n"].join("");return c=c&&['\t<style type="text/css">',"<![CDATA[\n",c,"]]>","</style>\n"].join("")},_setSVGObjects:function(t,e){for(var i,n=this._objects,r=0,s=n.length;r<s;r++)(i=n[r]).excludeFromExport||this._setSVGObject(t,i,e)},_setSVGObject:function(t,e,i){t.push(e.toSVG(i))},_setSVGBgOverlayImage:function(t,e,i){this[e]&&!this[e].excludeFromExport&&this[e].toSVG&&t.push(this[e].toSVG(i))},_setSVGBgOverlayColor:function(t,e){var i,n=this[e+"Color"],r=this.viewportTransform,s=this.width,o=this.height;n&&(n.toLive?(i=n.repeat,r=z.util.invertTransform(r),e=this[e+"Vpt"]?z.util.matrixToSVG(r):"",t.push('<rect transform="'+e+" translate(",s/2,",",o/2,')"',' x="',n.offsetX-s/2,'" y="',n.offsetY-o/2,'" ','width="',"repeat-y"===i||"no-repeat"===i?n.source.width:s,'" height="',"repeat-x"===i||"no-repeat"===i?n.source.height:o,'" fill="url(#SVGID_'+n.id+')"',"></rect>\n")):t.push('<rect x="0" y="0" width="100%" height="100%" ','fill="',n,'"',"></rect>\n"))},sendToBack:function(t){if(t){var e,i,n,r=this._activeObject;if(t===r&&"activeSelection"===t.type)for(e=(n=r._objects).length;e--;)i=n[e],c(this._objects,i),this._objects.unshift(i);else c(this._objects,t),this._objects.unshift(t);this.renderOnAddRemove&&this.requestRenderAll()}return this},bringToFront:function(t){if(t){var e,i,n,r=this._activeObject;if(t===r&&"activeSelection"===t.type)for(n=r._objects,e=0;e<n.length;e++)i=n[e],c(this._objects,i),this._objects.push(i);else c(this._objects,t),this._objects.push(t);this.renderOnAddRemove&&this.requestRenderAll()}return this},sendBackwards:function(t,e){if(t){var i,n,r,s,o,a=this._activeObject,h=0;if(t===a&&"activeSelection"===t.type)for(o=a._objects,i=0;i<o.length;i++)n=o[i],0+h<(r=this._objects.indexOf(n))&&(s=r-1,c(this._objects,n),this._objects.splice(s,0,n)),h++;else 0!==(r=this._objects.indexOf(t))&&(s=this._findNewLowerIndex(t,r,e),c(this._objects,t),this._objects.splice(s,0,t));this.renderOnAddRemove&&this.requestRenderAll()}return this},_findNewLowerIndex:function(t,e,i){var n,r;if(i){for(r=(n=e)-1;0<=r;--r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e-1;return n},bringForward:function(t,e){if(t){var i,n,r,s,o,a=this._activeObject,h=0;if(t===a&&"activeSelection"===t.type)for(i=(o=a._objects).length;i--;)n=o[i],(r=this._objects.indexOf(n))<this._objects.length-1-h&&(s=r+1,c(this._objects,n),this._objects.splice(s,0,n)),h++;else(r=this._objects.indexOf(t))!==this._objects.length-1&&(s=this._findNewUpperIndex(t,r,e),c(this._objects,t),this._objects.splice(s,0,t));this.renderOnAddRemove&&this.requestRenderAll()}return this},_findNewUpperIndex:function(t,e,i){var n,r,s;if(i){for(r=(n=e)+1,s=this._objects.length;r<s;++r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e+1;return n},moveTo:function(t,e){return c(this._objects,t),this._objects.splice(e,0,t),this.renderOnAddRemove&&this.requestRenderAll()},dispose:function(){return this.isRendering&&(z.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject(function(t){t.dispose&&t.dispose()}),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,this.lowerCanvasEl.classList.remove("lower-canvas"),z.util.setStyle(this.lowerCanvasEl,this._originalCanvasStyle),delete this._originalCanvasStyle,this.lowerCanvasEl.setAttribute("width",this.width),this.lowerCanvasEl.setAttribute("height",this.height),z.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},toString:function(){return"#<fabric.Canvas ("+this.complexity()+"): { objects: "+this._objects.length+" }>"}}),r(z.StaticCanvas.prototype,z.Observable),r(z.StaticCanvas.prototype,z.Collection),r(z.StaticCanvas.prototype,z.DataURLExporter),r(z.StaticCanvas,{EMPTY_JSON:'{"objects": [], "background": "white"}',supports:function(t){var e=n();return!e||!e.getContext||!(e=e.getContext("2d"))||"setLineDash"!==t?null:void 0!==e.setLineDash}}),z.StaticCanvas.prototype.toJSON=z.StaticCanvas.prototype.toObject,z.isLikelyNode&&(z.StaticCanvas.prototype.createPNGStream=function(){var t=i(this.lowerCanvasEl);return t&&t.createPNGStream()},z.StaticCanvas.prototype.createJPEGStream=function(t){var e=i(this.lowerCanvasEl);return e&&e.createJPEGStream(t)}))}(),z.BaseBrush=z.util.createClass({color:"rgb(0, 0, 0)",width:1,shadow:null,strokeLineCap:"round",strokeLineJoin:"round",strokeMiterLimit:10,strokeDashArray:null,limitedToCanvasSize:!1,_setBrushStyles:function(t){t.strokeStyle=this.color,t.lineWidth=this.width,t.lineCap=this.strokeLineCap,t.miterLimit=this.strokeMiterLimit,t.lineJoin=this.strokeLineJoin,t.setLineDash(this.strokeDashArray||[])},_saveAndTransform:function(t){var e=this.canvas.viewportTransform;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},_setShadow:function(){var t,e,i,n;this.shadow&&(t=this.canvas,e=this.shadow,i=t.contextTop,n=t.getZoom(),t&&t._isRetinaScaling()&&(n*=z.devicePixelRatio),i.shadowColor=e.color,i.shadowBlur=e.blur*n,i.shadowOffsetX=e.offsetX*n,i.shadowOffsetY=e.offsetY*n)},needsFullRender:function(){return new z.Color(this.color).getAlpha()<1||!!this.shadow},_resetShadow:function(){var t=this.canvas.contextTop;t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0},_isOutSideCanvas:function(t){return t.x<0||t.x>this.canvas.getWidth()||t.y<0||t.y>this.canvas.getHeight()}}),z.PencilBrush=z.util.createClass(z.BaseBrush,{decimate:.4,drawStraightLine:!1,straightLineKey:"shiftKey",initialize:function(t){this.canvas=t,this._points=[]},needsFullRender:function(){return this.callSuper("needsFullRender")||this._hasStraightLine},_drawSegment:function(t,e,i){i=e.midPointFrom(i);return t.quadraticCurveTo(e.x,e.y,i.x,i.y),i},onMouseDown:function(t,e){this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],this._prepareForDrawing(t),this._captureDrawingPath(t),this._render())},onMouseMove:function(t,e){var i;this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||this._captureDrawingPath(t)&&1<this._points.length&&(this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this._render()):(t=(e=this._points).length,i=this.canvas.contextTop,this._saveAndTransform(i),this.oldEnd&&(i.beginPath(),i.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(i,e[t-2],e[t-1],!0),i.stroke(),i.restore())))},onMouseUp:function(t){return!this.canvas._isMainEvent(t.e)||(this.drawStraightLine=!1,this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},_prepareForDrawing:function(t){t=new z.Point(t.x,t.y);this._reset(),this._addPoint(t),this.canvas.contextTop.moveTo(t.x,t.y)},_addPoint:function(t){return!(1<this._points.length&&t.eq(this._points[this._points.length-1]))&&(this.drawStraightLine&&1<this._points.length&&(this._hasStraightLine=!0,this._points.pop()),this._points.push(t),!0)},_reset:function(){this._points=[],this._setBrushStyles(this.canvas.contextTop),this._setShadow(),this._hasStraightLine=!1},_captureDrawingPath:function(t){t=new z.Point(t.x,t.y);return this._addPoint(t)},_render:function(t){var e,i,n,r=this._points[0],s=this._points[1];for(t=t||this.canvas.contextTop,this._saveAndTransform(t),t.beginPath(),2===this._points.length&&r.x===s.x&&r.y===s.y&&(n=this.width/1e3,r=new z.Point(r.x,r.y),s=new z.Point(s.x,s.y),r.x-=n,s.x+=n),t.moveTo(r.x,r.y),e=1,i=this._points.length;e<i;e++)this._drawSegment(t,r,s),r=this._points[e],s=this._points[e+1];t.lineTo(r.x,r.y),t.stroke(),t.restore()},convertPointsToSVGPath:function(t){var e=this.width/1e3;return z.util.getSmoothPathFromPoints(t,e)},_isEmptySVGPath:function(t){return"M 0 0 Q 0 0 0 0 L 0 0"===z.util.joinPath(t)},createPath:function(t){t=new z.Path(t,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,t.shadow=new z.Shadow(this.shadow)),t},decimatePoints:function(t,e){if(t.length<=2)return t;for(var i=this.canvas.getZoom(),n=Math.pow(e/i,2),r=t.length-1,s=t[0],o=[s],a=1;a<r-1;a++)n<=Math.pow(s.x-t[a].x,2)+Math.pow(s.y-t[a].y,2)&&(s=t[a],o.push(s));return o.push(t[r]),o},_finalizeAndAddPath:function(){this.canvas.contextTop.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var t=this.convertPointsToSVGPath(this._points);this._isEmptySVGPath(t)?this.canvas.requestRenderAll():(t=this.createPath(t),this.canvas.clearContext(this.canvas.contextTop),this.canvas.fire("before:path:created",{path:t}),this.canvas.add(t),this.canvas.requestRenderAll(),t.setCoords(),this._resetShadow(),this.canvas.fire("path:created",{path:t}))}}),z.CircleBrush=z.util.createClass(z.BaseBrush,{width:10,initialize:function(t){this.canvas=t,this.points=[]},drawDot:function(t){var t=this.addPoint(t),e=this.canvas.contextTop;this._saveAndTransform(e),this.dot(e,t),e.restore()},dot:function(t,e){t.fillStyle=e.fill,t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},onMouseDown:function(t){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(t)},_render:function(){var t,e,i=this.canvas.contextTop,n=this.points;for(this._saveAndTransform(i),t=0,e=n.length;t<e;t++)this.dot(i,n[t]);i.restore()},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(t),this._render()):this.drawDot(t))},onMouseUp:function(){for(var t=this.canvas.renderOnAddRemove,e=(this.canvas.renderOnAddRemove=!1,[]),i=0,n=this.points.length;i<n;i++){var r=this.points[i],r=new z.Circle({radius:r.radius,left:r.x,top:r.y,originX:"center",originY:"center",fill:r.fill});this.shadow&&(r.shadow=new z.Shadow(this.shadow)),e.push(r)}var s=new z.Group(e);s.canvas=this.canvas,this.canvas.fire("before:path:created",{path:s}),this.canvas.add(s),this.canvas.fire("path:created",{path:s}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},addPoint:function(t){var t=new z.Point(t.x,t.y),e=z.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,i=new z.Color(this.color).setAlpha(z.util.getRandomInt(0,100)/100).toRgba();return t.radius=e,t.fill=i,this.points.push(t),t}}),z.SprayBrush=z.util.createClass(z.BaseBrush,{width:10,density:20,dotWidth:1,dotWidthVariance:1,randomOpacity:!1,optimizeOverlapping:!0,initialize:function(t){this.canvas=t,this.sprayChunks=[]},onMouseDown:function(t){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.addSprayChunk(t),this.render(this.sprayChunkPoints))},onMouseUp:function(){for(var t=this.canvas.renderOnAddRemove,e=(this.canvas.renderOnAddRemove=!1,[]),i=0,n=this.sprayChunks.length;i<n;i++)for(var r=this.sprayChunks[i],s=0,o=r.length;s<o;s++){var a=new z.Rect({width:r[s].width,height:r[s].width,left:r[s].x+1,top:r[s].y+1,originX:"center",originY:"center",fill:this.color});e.push(a)}this.optimizeOverlapping&&(e=this._getOptimizedRects(e));var h=new z.Group(e);this.shadow&&h.set("shadow",new z.Shadow(this.shadow)),this.canvas.fire("before:path:created",{path:h}),this.canvas.add(h),this.canvas.fire("path:created",{path:h}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},_getOptimizedRects:function(t){for(var e,i={},n=0,r=t.length;n<r;n++)i[e=t[n].left+""+t[n].top]||(i[e]=t[n]);var s=[];for(e in i)s.push(i[e]);return s},render:function(t){var e,i,n=this.canvas.contextTop;for(n.fillStyle=this.color,this._saveAndTransform(n),e=0,i=t.length;e<i;e++){var r=t[e];void 0!==r.opacity&&(n.globalAlpha=r.opacity),n.fillRect(r.x,r.y,r.width,r.width)}n.restore()},_render:function(){var t,e,i=this.canvas.contextTop;for(i.fillStyle=this.color,this._saveAndTransform(i),t=0,e=this.sprayChunks.length;t<e;t++)this.render(this.sprayChunks[t]);i.restore()},addSprayChunk:function(t){this.sprayChunkPoints=[];for(var e=this.width/2,i=0;i<this.density;i++){var n=z.util.getRandomInt(t.x-e,t.x+e),r=z.util.getRandomInt(t.y-e,t.y+e),s=this.dotWidthVariance?z.util.getRandomInt(Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth,n=new z.Point(n,r);n.width=s,this.randomOpacity&&(n.opacity=z.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(n)}this.sprayChunks.push(this.sprayChunkPoints)}}),z.PatternBrush=z.util.createClass(z.PencilBrush,{getPatternSrc:function(){var t=z.util.createCanvasElement(),e=t.getContext("2d");return t.width=t.height=25,e.fillStyle=this.color,e.beginPath(),e.arc(10,10,10,0,2*Math.PI,!1),e.closePath(),e.fill(),t},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace("this.color",'"'+this.color+'"')},getPattern:function(t){return t.createPattern(this.source||this.getPatternSrc(),"repeat")},_setBrushStyles:function(t){this.callSuper("_setBrushStyles",t),t.strokeStyle=this.getPattern(t)},createPath:function(t){var t=this.callSuper("createPath",t),e=t._getLeftTopCoords().scalarAdd(t.strokeWidth/2);return t.stroke=new z.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-e.x,offsetY:-e.y}),t}});var D,kt=z.util.getPointer,Pt=z.util.degreesToRadians,jt=z.util.isTouchEvent;for(D in z.Canvas=z.util.createClass(z.StaticCanvas,{initialize:function(t,e){e=e||{},this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e),this._initInteractive(),this._createCacheCanvas()},uniformScaling:!0,uniScaleKey:"shiftKey",centeredScaling:!1,centeredRotation:!1,centeredKey:"altKey",altActionKey:"shiftKey",interactive:!0,selection:!0,selectionKey:"shiftKey",altSelectionKey:null,selectionColor:"rgba(100, 100, 255, 0.3)",selectionDashArray:[],selectionBorderColor:"rgba(255, 255, 255, 0.3)",selectionLineWidth:1,selectionFullyContained:!1,hoverCursor:"move",moveCursor:"move",defaultCursor:"default",freeDrawingCursor:"crosshair",notAllowedCursor:"not-allowed",containerClass:"canvas-container",perPixelTargetFind:!1,targetFindTolerance:0,skipTargetFind:!1,isDrawingMode:!1,preserveObjectStacking:!1,snapAngle:0,snapThreshold:null,stopContextMenu:!1,fireRightClick:!1,fireMiddleClick:!1,targets:[],enablePointerEvents:!1,_hoveredTarget:null,_hoveredTargets:[],_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=z.PencilBrush&&new z.PencilBrush(this),this.calcOffset()},_chooseObjectsToRender:function(){var t,e=this.getActiveObjects();if(0<e.length&&!this.preserveObjectStacking){for(var i=[],n=[],r=0,s=this._objects.length;r<s;r++)t=this._objects[r],(-1===e.indexOf(t)?i:n).push(t);1<e.length&&(this._activeObject._objects=n),i.push.apply(i,n)}else i=this._objects;return i},renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&(this.renderTopLayer(this.contextTop),this.hasLostContext=!1);var t=this.contextContainer;return this.renderCanvas(t,this._chooseObjectsToRender()),this},renderTopLayer:function(t){t.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),this.selection&&this._groupSelector&&(this._drawSelection(t),this.contextTopDirty=!0),t.restore()},renderTop:function(){var t=this.contextTop;return this.clearContext(t),this.renderTopLayer(t),this.fire("after:render"),this},_normalizePointer:function(t,e){t=t.calcTransformMatrix(),t=z.util.invertTransform(t),e=this.restorePointerVpt(e);return z.util.transformPoint(e,t)},isTargetTransparent:function(t,e,i){var n,r,s;return t.shouldCache()&&t._cacheCanvas&&t!==this._activeObject?(r=this._normalizePointer(t,{x:e,y:i}),n=Math.max(t.cacheTranslationX+r.x*t.zoomX,0),r=Math.max(t.cacheTranslationY+r.y*t.zoomY,0),z.util.isTransparent(t._cacheContext,Math.round(n),Math.round(r),this.targetFindTolerance)):(n=this.contextCache,r=t.selectionBackgroundColor,s=this.viewportTransform,t.selectionBackgroundColor="",this.clearContext(n),n.save(),n.transform(s[0],s[1],s[2],s[3],s[4],s[5]),t.render(n),n.restore(),t.selectionBackgroundColor=r,z.util.isTransparent(n,e,i,this.targetFindTolerance))},_isSelectionKeyPressed:function(e){return Array.isArray(this.selectionKey)?!!this.selectionKey.find(function(t){return!0===e[t]}):e[this.selectionKey]},_shouldClearSelection:function(t,e){var i=this.getActiveObjects(),n=this._activeObject;return!e||n&&1<i.length&&-1===i.indexOf(e)&&n!==e&&!this._isSelectionKeyPressed(t)||e&&!e.evented||e&&!e.selectable&&n&&n!==e},_shouldCenterTransform:function(t,e,i){var n;if(t)return"scale"===e||"scaleX"===e||"scaleY"===e||"resizing"===e?n=this.centeredScaling||t.centeredScaling:"rotate"===e&&(n=this.centeredRotation||t.centeredRotation),n?!i:i},_getOriginFromCorner:function(t,e){t={x:t.originX,y:t.originY};return"ml"===e||"tl"===e||"bl"===e?t.x="right":"mr"!==e&&"tr"!==e&&"br"!==e||(t.x="left"),"tl"===e||"mt"===e||"tr"===e?t.y="bottom":"bl"!==e&&"mb"!==e&&"br"!==e||(t.y="top"),t},_getActionFromCorner:function(t,e,i,n){return e&&t?(t=n.controls[e]).getActionName(i,t,n):"drag"},_setupCurrentTransform:function(t,e,i){var n,r,s,o,a;e&&(n=this.getPointer(t),r=e.__corner,a=e.controls[r],a=i&&r?a.getActionHandler(t,e,a):z.controlsUtils.dragHandler,i=this._getActionFromCorner(i,r,t,e),s=this._getOriginFromCorner(e,r),o=t[this.centeredKey],a={target:e,action:i,actionHandler:a,corner:r,scaleX:e.scaleX,scaleY:e.scaleY,skewX:e.skewX,skewY:e.skewY,offsetX:n.x-e.left,offsetY:n.y-e.top,originX:s.x,originY:s.y,ex:n.x,ey:n.y,lastX:n.x,lastY:n.y,theta:Pt(e.angle),width:e.width*e.scaleX,shiftKey:t.shiftKey,altKey:o,original:z.util.saveObjectTransform(e)},this._shouldCenterTransform(e,i,o)&&(a.originX="center",a.originY="center"),a.original.originX=s.x,a.original.originY=s.y,this._currentTransform=a,this._beforeTransform(t))},setCursor:function(t){this.upperCanvasEl.style.cursor=t},_drawSelection:function(t){var e=this._groupSelector,i=new z.Point(e.ex,e.ey),i=z.util.transformPoint(i,this.viewportTransform),e=new z.Point(e.ex+e.left,e.ey+e.top),e=z.util.transformPoint(e,this.viewportTransform),n=Math.min(i.x,e.x),r=Math.min(i.y,e.y),s=Math.max(i.x,e.x),i=Math.max(i.y,e.y),e=this.selectionLineWidth/2;this.selectionColor&&(t.fillStyle=this.selectionColor,t.fillRect(n,r,s-n,i-r)),this.selectionLineWidth&&this.selectionBorderColor&&(t.lineWidth=this.selectionLineWidth,t.strokeStyle=this.selectionBorderColor,n+=e,r+=e,s-=e,i-=e,z.Object.prototype._setLineDash.call(this,t,this.selectionDashArray),t.strokeRect(n,r,s-n,i-r))},findTarget:function(t,e){if(!this.skipTargetFind){var i,n,r=this.getPointer(t,!0),s=this._activeObject,o=this.getActiveObjects(),a=jt(t),h=1<o.length&&!e||1===o.length;if(this.targets=[],h&&s._findTargetCorner(r,a))return s;if(1<o.length&&!e&&s===this._searchPossibleTargets([s],r))return s;if(1===o.length&&s===this._searchPossibleTargets([s],r)){if(!this.preserveObjectStacking)return s;i=s,n=this.targets,this.targets=[]}h=this._searchPossibleTargets(this._objects,r);return t[this.altSelectionKey]&&h&&i&&h!==i&&(h=i,this.targets=n),h}},_checkTarget:function(t,e,i){if(e&&e.visible&&e.evented&&e.containsPoint(t))return!((this.perPixelTargetFind||e.perPixelTargetFind)&&!e.isEditing)||(!this.isTargetTransparent(e,i.x,i.y)||void 0)},_searchPossibleTargets:function(t,e){for(var i,n=t.length;n--;){var r=t[n],s=r.group?this._normalizePointer(r.group,e):e;if(this._checkTarget(s,r,e)){(i=t[n]).subTargetCheck&&i instanceof z.Group&&(s=this._searchPossibleTargets(i._objects,e))&&this.targets.push(s);break}}return i},restorePointerVpt:function(t){return z.util.transformPoint(t,z.util.invertTransform(this.viewportTransform))},getPointer:function(t,e){var i,n,r,s;return this._absolutePointer&&!e?this._absolutePointer:this._pointer&&e?this._pointer:(t=kt(t),n=(s=(i=this.upperCanvasEl).getBoundingClientRect()).width||0,r=s.height||0,n&&r||("top"in s&&"bottom"in s&&(r=Math.abs(s.top-s.bottom)),"right"in s&&"left"in s&&(n=Math.abs(s.right-s.left))),this.calcOffset(),t.x=t.x-this._offset.left,t.y=t.y-this._offset.top,e||(t=this.restorePointerVpt(t)),1!==(s=this.getRetinaScaling())&&(t.x/=s,t.y/=s),e=0===n||0===r?{width:1,height:1}:{width:i.width/n,height:i.height/r},{x:t.x*e.width,y:t.y*e.height})},_createUpperCanvas:function(){var t=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,""),e=this.lowerCanvasEl,i=this.upperCanvasEl;i?i.className="":(i=this._createCanvasElement(),this.upperCanvasEl=i),z.util.addClass(i,"upper-canvas "+t),this.wrapperEl.appendChild(i),this._copyCanvasStyle(e,i),this._applyCanvasStyle(i),this.contextTop=i.getContext("2d")},getTopContext:function(){return this.contextTop},_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute("width",this.width),this.cacheCanvasEl.setAttribute("height",this.height),this.contextCache=this.cacheCanvasEl.getContext("2d")},_initWrapperElement:function(){this.wrapperEl=z.util.wrapElement(this.lowerCanvasEl,"div",{class:this.containerClass}),z.util.setStyle(this.wrapperEl,{width:this.width+"px",height:this.height+"px",position:"relative"}),z.util.makeElementUnselectable(this.wrapperEl)},_applyCanvasStyle:function(t){var e=this.width||t.width,i=this.height||t.height;z.util.setStyle(t,{position:"absolute",width:e+"px",height:i+"px",left:0,top:0,"touch-action":this.allowTouchScrolling?"manipulation":"none","-ms-touch-action":this.allowTouchScrolling?"manipulation":"none"}),t.width=e,t.height=i,z.util.makeElementUnselectable(t)},_copyCanvasStyle:function(t,e){e.style.cssText=t.style.cssText},getSelectionContext:function(){return this.contextTop},getSelectionElement:function(){return this.upperCanvasEl},getActiveObject:function(){return this._activeObject},getActiveObjects:function(){var t=this._activeObject;return t?"activeSelection"===t.type&&t._objects?t._objects.slice(0):[t]:[]},_onObjectRemoved:function(t){t===this._activeObject&&(this.fire("before:selection:cleared",{target:t}),this._discardActiveObject(),this.fire("selection:cleared",{target:t}),t.fire("deselected")),t===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper("_onObjectRemoved",t)},_fireSelectionEvents:function(e,i){var n=!1,r=this.getActiveObjects(),s=[],o=[];e.forEach(function(t){-1===r.indexOf(t)&&(n=!0,t.fire("deselected",{e:i,target:t}),o.push(t))}),r.forEach(function(t){-1===e.indexOf(t)&&(n=!0,t.fire("selected",{e:i,target:t}),s.push(t))}),0<e.length&&0<r.length?n&&this.fire("selection:updated",{e:i,selected:s,deselected:o}):0<r.length?this.fire("selection:created",{e:i,selected:s}):0<e.length&&this.fire("selection:cleared",{e:i,deselected:o})},setActiveObject:function(t,e){var i=this.getActiveObjects();return this._setActiveObject(t,e),this._fireSelectionEvents(i,e),this},_setActiveObject:function(t,e){return this._activeObject!==t&&(!!this._discardActiveObject(e,t)&&(!t.onSelect({e:e})&&(this._activeObject=t,!0)))},_discardActiveObject:function(t,e){var i=this._activeObject;if(i){if(i.onDeselect({e:t,object:e}))return!1;this._activeObject=null}return!0},discardActiveObject:function(t){var e=this.getActiveObjects(),i=this.getActiveObject();return e.length&&this.fire("before:selection:cleared",{target:i,e:t}),this._discardActiveObject(t),this._fireSelectionEvents(e,t),this},dispose:function(){var t=this.wrapperEl;return this.removeListeners(),t.removeChild(this.upperCanvasEl),t.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,["upperCanvasEl","cacheCanvasEl"].forEach(function(t){z.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this)),t.parentNode&&t.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,z.StaticCanvas.prototype.dispose.call(this),this},clear:function(){return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper("clear")},drawControls:function(t){var e=this._activeObject;e&&e._renderControls(t)},_toObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(t),e=this.callSuper("_toObject",t,e,i);return this._unwindGroupTransformOnObject(t,n),e},_realizeGroupTransformOnObject:function(e){var i;return e.group&&"activeSelection"===e.group.type&&this._activeObject===e.group?(i={},["angle","flipX","flipY","left","scaleX","scaleY","skewX","skewY","top"].forEach(function(t){i[t]=e[t]}),z.util.addTransformToObject(e,this._activeObject.calcOwnMatrix()),i):null},_unwindGroupTransformOnObject:function(t,e){e&&t.set(e)},_setSVGObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(e);this.callSuper("_setSVGObject",t,e,i),this._unwindGroupTransformOnObject(e,n)},setViewportTransform:function(t){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),z.StaticCanvas.prototype.setViewportTransform.call(this,t)}}),z.StaticCanvas)"prototype"!==D&&(z.Canvas[D]=z.StaticCanvas[D]);function M(t,e){return t.button&&t.button===e-1}function F(t,e){var i;return e?e.toLive?t+": url(#SVGID_"+e.id+"); ":(i=t+": "+(e=new z.Color(e)).toRgb()+"; ",1!==(e=e.getAlpha())&&(i+=t+"-opacity: "+e.toString()+"; "),i):t+": none; "}function Dt(e,t,i){var n={};i.forEach(function(t){n[t]=e[t]}),et(e[t],n,!0)}function Mt(t){var e=t.targetCanvas,i=e.width,n=e.height,r=t.destinationWidth,t=t.destinationHeight;i===r&&n===t||(e.width=r,e.height=t)}function Ft(t,e){var t=t.canvas,e=e.targetCanvas,i=e.getContext("2d"),n=(i.translate(0,e.height),i.scale(1,-1),t.height-e.height);i.drawImage(t,0,n,e.width,e.height,0,0,e.width,e.height)}function It(t,e){var i=e.targetCanvas.getContext("2d"),n=e.destinationWidth,e=e.destinationHeight,r=n*e*4,s=new Uint8Array(this.imageBuffer,0,r),r=new Uint8ClampedArray(this.imageBuffer,0,r),t=(t.readPixels(0,0,n,e,t.RGBA,t.UNSIGNED_BYTE,s),new ImageData(r,n,e));i.putImageData(t,0,0)}function Lt(t){t.textDecoration&&(-1<t.textDecoration.indexOf("underline")&&(t.underline=!0),-1<t.textDecoration.indexOf("line-through")&&(t.linethrough=!0),-1<t.textDecoration.indexOf("overline")&&(t.overline=!0),delete t.textDecoration)}l=z.util.addListener,u=z.util.removeListener,f={passive:!1},z.util.object.extend(z.Canvas.prototype,{mainTouchId:null,_initEventListeners:function(){this.removeListeners(),this._bindEvents(),this.addOrRemove(l,"add")},_getEventPrefix:function(){return this.enablePointerEvents?"pointer":"mouse"},addOrRemove:function(t,e){var i=this.upperCanvasEl,n=this._getEventPrefix();t(z.window,"resize",this._onResize),t(i,n+"down",this._onMouseDown),t(i,n+"move",this._onMouseMove,f),t(i,n+"out",this._onMouseOut),t(i,n+"enter",this._onMouseEnter),t(i,"wheel",this._onMouseWheel),t(i,"contextmenu",this._onContextMenu),t(i,"dblclick",this._onDoubleClick),t(i,"dragover",this._onDragOver),t(i,"dragenter",this._onDragEnter),t(i,"dragleave",this._onDragLeave),t(i,"drop",this._onDrop),this.enablePointerEvents||t(i,"touchstart",this._onTouchStart,f),"undefined"!=typeof eventjs&&e in eventjs&&(eventjs[e](i,"gesture",this._onGesture),eventjs[e](i,"drag",this._onDrag),eventjs[e](i,"orientation",this._onOrientationChange),eventjs[e](i,"shake",this._onShake),eventjs[e](i,"longpress",this._onLongPress))},removeListeners:function(){this.addOrRemove(u,"remove");var t=this._getEventPrefix();u(z.document,t+"up",this._onMouseUp),u(z.document,"touchend",this._onTouchEnd,f),u(z.document,t+"move",this._onMouseMove,f),u(z.document,"touchmove",this._onMouseMove,f)},_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,"dragenter"),this._onDragLeave=this._simpleEventHandler.bind(this,"dragleave"),this._onDrop=this._onDrop.bind(this),this.eventsBound=!0)},_onGesture:function(t,e){this.__onTransformGesture&&this.__onTransformGesture(t,e)},_onDrag:function(t,e){this.__onDrag&&this.__onDrag(t,e)},_onMouseWheel:function(t){this.__onMouseWheel(t)},_onMouseOut:function(e){var i=this._hoveredTarget,n=(this.fire("mouse:out",{target:i,e:e}),this._hoveredTarget=null,i&&i.fire("mouseout",{e:e}),this);this._hoveredTargets.forEach(function(t){n.fire("mouse:out",{target:i,e:e}),t&&i.fire("mouseout",{e:e})}),this._hoveredTargets=[]},_onMouseEnter:function(t){this._currentTransform||this.findTarget(t)||(this.fire("mouse:over",{target:null,e:t}),this._hoveredTarget=null,this._hoveredTargets=[])},_onOrientationChange:function(t,e){this.__onOrientationChange&&this.__onOrientationChange(t,e)},_onShake:function(t,e){this.__onShake&&this.__onShake(t,e)},_onLongPress:function(t,e){this.__onLongPress&&this.__onLongPress(t,e)},_onDragOver:function(t){t.preventDefault();var e=this._simpleEventHandler("dragover",t);this._fireEnterLeaveEvents(e,t)},_onDrop:function(t){return this._simpleEventHandler("drop:before",t),this._simpleEventHandler("drop",t)},_onContextMenu:function(t){return this.stopContextMenu&&(t.stopPropagation(),t.preventDefault()),!1},_onDoubleClick:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"dblclick"),this._resetTransformEventData(t)},getPointerId:function(t){var e=t.changedTouches;return e?e[0]&&e[0].identifier:this.enablePointerEvents?t.pointerId:-1},_isMainEvent:function(t){return!0===t.isPrimary||!1!==t.isPrimary&&("touchend"===t.type&&0===t.touches.length||(!t.changedTouches||t.changedTouches[0].identifier===this.mainTouchId))},_onTouchStart:function(t){t.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(t)),this.__onMouseDown(t),this._resetTransformEventData();var t=this.upperCanvasEl,e=this._getEventPrefix();l(z.document,"touchend",this._onTouchEnd,f),l(z.document,"touchmove",this._onMouseMove,f),u(t,e+"down",this._onMouseDown)},_onMouseDown:function(t){this.__onMouseDown(t),this._resetTransformEventData();var t=this.upperCanvasEl,e=this._getEventPrefix();u(t,e+"move",this._onMouseMove,f),l(z.document,e+"up",this._onMouseUp),l(z.document,e+"move",this._onMouseMove,f)},_onTouchEnd:function(t){var e,i;0<t.touches.length||(this.__onMouseUp(t),this._resetTransformEventData(),this.mainTouchId=null,e=this._getEventPrefix(),u(z.document,"touchend",this._onTouchEnd,f),u(z.document,"touchmove",this._onMouseMove,f),(i=this)._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout(function(){l(i.upperCanvasEl,e+"down",i._onMouseDown),i._willAddMouseDown=0},400))},_onMouseUp:function(t){this.__onMouseUp(t),this._resetTransformEventData();var e=this.upperCanvasEl,i=this._getEventPrefix();this._isMainEvent(t)&&(u(z.document,i+"up",this._onMouseUp),u(z.document,i+"move",this._onMouseMove,f),l(e,i+"move",this._onMouseMove,f))},_onMouseMove:function(t){!this.allowTouchScrolling&&t.preventDefault&&t.preventDefault(),this.__onMouseMove(t)},_onResize:function(){this.calcOffset()},_shouldRender:function(t){var e=this._activeObject;return!!(!!e!=!!t||e&&t&&e!==t)||(e&&e.isEditing,!1)},__onMouseUp:function(t){var e,i,n,r,s,o=this._currentTransform,a=this._groupSelector,h=!1,a=!a||0===a.left&&0===a.top;this._cacheTransformEventData(t),e=this._target,this._handleEvent(t,"up:before"),M(t,3)?this.fireRightClick&&this._handleEvent(t,"up",3,a):M(t,2)?(this.fireMiddleClick&&this._handleEvent(t,"up",2,a),this._resetTransformEventData()):this.isDrawingMode&&this._isCurrentlyDrawing?this._onMouseUpInDrawingMode(t):this._isMainEvent(t)&&(o&&(this._finalizeCurrentTransform(t),h=o.actionPerformed),a||(n=e===this._activeObject,this._maybeGroupObjects(t),h=h||this._shouldRender(e)||!n&&e===this._activeObject),e&&(r=e._findTargetCorner(this.getPointer(t,!0),z.util.isTouchEvent(t)),e.selectable&&e!==this._activeObject&&"up"===e.activeOn?(this.setActiveObject(e,t),h=!0):(n=(i=e.controls[r])&&i.getMouseUpHandler(t,e,i))&&n(t,o,(s=this.getPointer(t)).x,s.y),e.isMoving=!1),!o||o.target===e&&o.corner===r||(r=(n=o.target&&o.target.controls[o.corner])&&n.getMouseUpHandler(t,e,i),s=s||this.getPointer(t),r&&r(t,o,s.x,s.y)),this._setCursorFromEvent(t,e),this._handleEvent(t,"up",1,a),this._groupSelector=null,this._currentTransform=null,e&&(e.__corner=0),h?this.requestRenderAll():a||this.renderTop())},_simpleEventHandler:function(t,e){var i=this.findTarget(e),n=this.targets,r={e:e,target:i,subTargets:n};if(this.fire(t,r),i&&i.fire(t,r),n)for(var s=0;s<n.length;s++)n[s].fire(t,r);return i},_handleEvent:function(t,e,i,n){var r=this._target,s=this.targets||[],o={e:t,target:r,subTargets:s,button:i||1,isClick:n||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};"up"===e&&(o.currentTarget=this.findTarget(t),o.currentSubTargets=this.targets),this.fire("mouse:"+e,o),r&&r.fire("mouse"+e,o);for(var a=0;a<s.length;a++)s[a].fire("mouse"+e,o)},_finalizeCurrentTransform:function(t){var e=this._currentTransform,i=e.target,t={e:t,target:i,transform:e,action:e.action};i._scaling&&(i._scaling=!1),i.setCoords(),(e.actionPerformed||this.stateful&&i.hasStateChanged())&&this._fire("modified",t)},_onMouseDownInDrawingMode:function(t){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(t).requestRenderAll();var e=this.getPointer(t);this.freeDrawingBrush.onMouseDown(e,{e:t,pointer:e}),this._handleEvent(t,"down")},_onMouseMoveInDrawingMode:function(t){var e;this._isCurrentlyDrawing&&(e=this.getPointer(t),this.freeDrawingBrush.onMouseMove(e,{e:t,pointer:e})),this.setCursor(this.freeDrawingCursor),this._handleEvent(t,"move")},_onMouseUpInDrawingMode:function(t){var e=this.getPointer(t);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:t,pointer:e}),this._handleEvent(t,"up")},__onMouseDown:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"down:before");var e,i,n,r,s,o=this._target;M(t,3)?this.fireRightClick&&this._handleEvent(t,"down",3):M(t,2)?this.fireMiddleClick&&this._handleEvent(t,"down",2):this.isDrawingMode?this._onMouseDownInDrawingMode(t):this._isMainEvent(t)&&!this._currentTransform&&(r=this._pointer,this._previousPointer=r,e=this._shouldRender(o),i=this._shouldGroup(t,o),this._shouldClearSelection(t,o)?this.discardActiveObject(t):i&&(this._handleGrouping(t,o),o=this._activeObject),!this.selection||o&&(o.selectable||o.isEditing||o===this._activeObject)||(this._groupSelector={ex:this._absolutePointer.x,ey:this._absolutePointer.y,top:0,left:0}),o&&(n=o===this._activeObject,o.selectable&&"down"===o.activeOn&&this.setActiveObject(o,t),s=o._findTargetCorner(this.getPointer(t,!0),z.util.isTouchEvent(t)),o.__corner=s,o!==this._activeObject||!s&&i||(this._setupCurrentTransform(t,o,n),n=o.controls[s],r=this.getPointer(t),(s=n&&n.getMouseDownHandler(t,o,n))&&s(t,this._currentTransform,r.x,r.y))),this._handleEvent(t,"down"),(e||i)&&this.requestRenderAll())},_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},_cacheTransformEventData:function(t){this._resetTransformEventData(),this._pointer=this.getPointer(t,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(t)||null},_beforeTransform:function(t){var e=this._currentTransform;this.stateful&&e.target.saveState(),this.fire("before:transform",{e:t,transform:e})},__onMouseMove:function(t){var e,i;this._handleEvent(t,"move:before"),this._cacheTransformEventData(t),this.isDrawingMode?this._onMouseMoveInDrawingMode(t):this._isMainEvent(t)&&((i=this._groupSelector)?(e=this._absolutePointer,i.left=e.x-i.ex,i.top=e.y-i.ey,this.renderTop()):this._currentTransform?this._transformObject(t):(e=this.findTarget(t)||null,this._setCursorFromEvent(t,e),this._fireOverOutEvents(e,t)),this._handleEvent(t,"move"),this._resetTransformEventData())},_fireOverOutEvents:function(t,e){var i=this._hoveredTarget,n=this._hoveredTargets,r=this.targets,s=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"mouseout",canvasEvtOut:"mouse:out",evtIn:"mouseover",canvasEvtIn:"mouse:over"});for(var o=0;o<s;o++)this.fireSyntheticInOutEvents(r[o],e,{oldTarget:n[o],evtOut:"mouseout",evtIn:"mouseover"});this._hoveredTarget=t,this._hoveredTargets=this.targets.concat()},_fireEnterLeaveEvents:function(t,e){var i=this._draggedoverTarget,n=this._hoveredTargets,r=this.targets,s=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"dragleave",evtIn:"dragenter"});for(var o=0;o<s;o++)this.fireSyntheticInOutEvents(r[o],e,{oldTarget:n[o],evtOut:"dragleave",evtIn:"dragenter"});this._draggedoverTarget=t},fireSyntheticInOutEvents:function(t,e,i){var n,r,s=i.oldTarget,o=s!==t,a=i.canvasEvtIn,h=i.canvasEvtOut;o&&(n={e:e,target:t,previousTarget:s},r={e:e,target:s,nextTarget:t}),e=t&&o,s&&o&&(h&&this.fire(h,r),s.fire(i.evtOut,r)),e&&(a&&this.fire(a,n),t.fire(i.evtIn,n))},__onMouseWheel:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"wheel"),this._resetTransformEventData()},_transformObject:function(t){var e=this.getPointer(t),i=this._currentTransform;i.reset=!1,i.shiftKey=t.shiftKey,i.altKey=t[this.centeredKey],this._performTransformAction(t,i,e),i.actionPerformed&&this.requestRenderAll()},_performTransformAction:function(t,e,i){var n=i.x,i=i.y,r=e.action,s=!1,o=e.actionHandler;o&&(s=o(t,e,n,i)),"drag"===r&&s&&(e.target.isMoving=!0,this.setCursor(e.target.moveCursor||this.moveCursor)),e.actionPerformed=e.actionPerformed||s},_fire:z.controlsUtils.fireEvent,_setCursorFromEvent:function(t,e){if(!e)return this.setCursor(this.defaultCursor),!1;var i=e.hoverCursor||this.hoverCursor,n=this._activeObject&&"activeSelection"===this._activeObject.type?this._activeObject:null,n=(!n||!n.contains(e))&&e._findTargetCorner(this.getPointer(t,!0));n?this.setCursor(this.getCornerCursor(n,e,t)):(e.subTargetCheck&&this.targets.concat().reverse().map(function(t){i=t.hoverCursor||i}),this.setCursor(i))},getCornerCursor:function(t,e,i){t=e.controls[t];return t.cursorStyleHandler(i,t,e)}}),$=Math.min,Z=Math.max,z.util.object.extend(z.Canvas.prototype,{_shouldGroup:function(t,e){var i=this._activeObject;return i&&this._isSelectionKeyPressed(t)&&e&&e.selectable&&this.selection&&(i!==e||"activeSelection"===i.type)&&!e.onSelect({e:t})},_handleGrouping:function(t,e){var i=this._activeObject;i.__corner||(e!==i||(e=this.findTarget(t,!0))&&e.selectable)&&(i&&"activeSelection"===i.type?this._updateActiveSelection(e,t):this._createActiveSelection(e,t))},_updateActiveSelection:function(t,e){var i=this._activeObject,n=i._objects.slice(0);i.contains(t)?(i.removeWithUpdate(t),this._hoveredTarget=t,this._hoveredTargets=this.targets.concat(),1===i.size()&&this._setActiveObject(i.item(0),e)):(i.addWithUpdate(t),this._hoveredTarget=i,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(n,e)},_createActiveSelection:function(t,e){var i=this.getActiveObjects(),t=this._createGroup(t);this._hoveredTarget=t,this._setActiveObject(t,e),this._fireSelectionEvents(i,e)},_createGroup:function(t){var e=this._objects,e=e.indexOf(this._activeObject)<e.indexOf(t)?[this._activeObject,t]:[t,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new z.ActiveSelection(e,{canvas:this})},_groupSelectedObjects:function(t){var e=this._collectObjects(t);1===e.length?this.setActiveObject(e[0],t):1<e.length&&(e=new z.ActiveSelection(e.reverse(),{canvas:this}),this.setActiveObject(e,t))},_collectObjects:function(e){for(var t,i=[],n=this._groupSelector.ex,r=this._groupSelector.ey,s=n+this._groupSelector.left,o=r+this._groupSelector.top,a=new z.Point($(n,s),$(r,o)),h=new z.Point(Z(n,s),Z(r,o)),c=!this.selectionFullyContained,l=n===s&&r===o,u=this._objects.length;u--&&!((t=this._objects[u])&&t.selectable&&t.visible&&(c&&t.intersectsWithRect(a,h,!0)||t.isContainedWithinRect(a,h,!0)||c&&t.containsPoint(a,null,!0)||c&&t.containsPoint(h,null,!0))&&(i.push(t),l)););return i=1<i.length?i.filter(function(t){return!t.onSelect({e:e})}):i},_maybeGroupObjects:function(t){this.selection&&this._groupSelector&&this._groupSelectedObjects(t),this.setCursor(this.defaultCursor),this._groupSelector=null}}),z.util.object.extend(z.StaticCanvas.prototype,{toDataURL:function(t){var e=(t=t||{}).format||"png",i=t.quality||1,n=(t.multiplier||1)*(t.enableRetinaScaling?this.getRetinaScaling():1),n=this.toCanvasElement(n,t);return z.util.toDataURL(n,e,i)},toCanvasElement:function(t,e){var i=((e=e||{}).width||this.width)*(t=t||1),n=(e.height||this.height)*t,r=this.getZoom(),s=this.width,o=this.height,r=r*t,a=this.viewportTransform,h=(a[4]-(e.left||0))*t,e=(a[5]-(e.top||0))*t,t=this.interactive,r=[r,0,0,r,h,e],h=this.enableRetinaScaling,e=z.util.createCanvasElement(),c=this.contextTop;return e.width=i,e.height=n,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=r,this.width=i,this.height=n,this.calcViewportBoundaries(),this.renderCanvas(e.getContext("2d"),this._objects),this.viewportTransform=a,this.width=s,this.height=o,this.calcViewportBoundaries(),this.interactive=t,this.enableRetinaScaling=h,this.contextTop=c,e}}),z.util.object.extend(z.StaticCanvas.prototype,{loadFromJSON:function(t,i,e){var n,r,s,o;if(t)return n="string"==typeof t?JSON.parse(t):z.util.object.clone(t),s=n.clipPath,o=(r=this).renderOnAddRemove,this.renderOnAddRemove=!1,delete n.clipPath,this._enlivenObjects(n.objects,function(e){r.clear(),r._setBgOverlay(n,function(){s?r._enlivenObjects([s],function(t){r.clipPath=t[0],r.__setupCanvas.call(r,n,e,o,i)}):r.__setupCanvas.call(r,n,e,o,i)})},e),this},__setupCanvas:function(t,e,i,n){var r=this;e.forEach(function(t,e){r.insertAt(t,e)}),this.renderOnAddRemove=i,delete t.objects,delete t.backgroundImage,delete t.overlayImage,delete t.background,delete t.overlay,this._setOptions(t),this.renderAll(),n&&n()},_setBgOverlay:function(t,e){var i,n={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};t.backgroundImage||t.overlayImage||t.background||t.overlay?(this.__setBgOverlay("backgroundImage",t.backgroundImage,n,i=function(){n.backgroundImage&&n.overlayImage&&n.backgroundColor&&n.overlayColor&&e&&e()}),this.__setBgOverlay("overlayImage",t.overlayImage,n,i),this.__setBgOverlay("backgroundColor",t.background,n,i),this.__setBgOverlay("overlayColor",t.overlay,n,i)):e&&e()},__setBgOverlay:function(e,t,i,n){var r=this;t?"backgroundImage"===e||"overlayImage"===e?z.util.enlivenObjects([t],function(t){r[e]=t[0],i[e]=!0,n&&n()}):this["set"+z.util.string.capitalize(e,!0)](t,function(){i[e]=!0,n&&n()}):(i[e]=!0,n&&n())},_enlivenObjects:function(t,e,i){t&&0!==t.length?z.util.enlivenObjects(t,function(t){e&&e(t)},null,i):e&&e([])},_toDataURL:function(e,i){this.clone(function(t){i(t.toDataURL(e))})},_toDataURLWithMultiplier:function(e,i,n){this.clone(function(t){n(t.toDataURLWithMultiplier(e,i))})},clone:function(e,t){var i=JSON.stringify(this.toJSON(t));this.cloneWithoutData(function(t){t.loadFromJSON(i,function(){e&&e(t)})})},cloneWithoutData:function(t){var e=z.util.createCanvasElement(),i=(e.width=this.width,e.height=this.height,new z.Canvas(e));this.backgroundImage?(i.setBackgroundImage(this.backgroundImage.src,function(){i.renderAll(),t&&t(i)}),i.backgroundImageOpacity=this.backgroundImageOpacity,i.backgroundImageStretch=this.backgroundImageStretch):t&&t(i)}}),function(t){"use strict";var g=t.fabric||(t.fabric={}),t=g.util.object.extend,s=g.util.object.clone,i=g.util.toFixed,e=g.util.string.capitalize,o=g.util.degreesToRadians,n=!g.isLikelyNode;g.Object||(g.Object=g.util.createClass(g.CommonMethods,{type:"object",originX:"left",originY:"top",top:0,left:0,width:0,height:0,scaleX:1,scaleY:1,flipX:!1,flipY:!1,opacity:1,angle:0,skewX:0,skewY:0,cornerSize:13,touchCornerSize:24,transparentCorners:!0,hoverCursor:null,moveCursor:null,padding:0,borderColor:"rgb(178,204,255)",borderDashArray:null,cornerColor:"rgb(178,204,255)",cornerStrokeColor:null,cornerStyle:"rect",cornerDashArray:null,centeredScaling:!1,centeredRotation:!0,fill:"rgb(0,0,0)",fillRule:"nonzero",globalCompositeOperation:"source-over",backgroundColor:"",selectionBackgroundColor:"",stroke:null,strokeWidth:1,strokeDashArray:null,strokeDashOffset:0,strokeLineCap:"butt",strokeLineJoin:"miter",strokeMiterLimit:4,shadow:null,borderOpacityWhenMoving:.4,borderScaleFactor:1,minScaleLimit:0,selectable:!0,evented:!0,visible:!0,hasControls:!0,hasBorders:!0,perPixelTargetFind:!1,includeDefaultValues:!0,lockMovementX:!1,lockMovementY:!1,lockRotation:!1,lockScalingX:!1,lockScalingY:!1,lockSkewingX:!1,lockSkewingY:!1,lockScalingFlip:!1,excludeFromExport:!1,objectCaching:n,statefullCache:!1,noScaleCache:!0,strokeUniform:!1,dirty:!0,__corner:0,paintFirst:"fill",activeOn:"down",stateProperties:"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),cacheProperties:"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),colorProperties:"fill stroke backgroundColor".split(" "),clipPath:void 0,inverted:!1,absolutePositioned:!1,initialize:function(t){t&&this.setOptions(t)},_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=g.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext("2d"),this._updateCacheCanvas(),this.dirty=!0},_limitCacheSize:function(t){var e,i,n=g.perfLimitSizeTotal,r=t.width,s=t.height,o=g.maxCacheSideLimit,a=g.minCacheSideLimit;return r<=o&&s<=o&&r*s<=n?(r<a&&(t.width=a),s<a&&(t.height=a)):(n=g.util.limitDimsByArea(r/s,n),e=(i=g.util.capValue)(a,n.x,o),i=i(a,n.y,o),e<r&&(t.zoomX/=r/e,t.width=e,t.capped=!0),i<s&&(t.zoomY/=s/i,t.height=i,t.capped=!0)),t},_getCacheCanvasDimensions:function(){var t=this.getTotalObjectScaling(),e=this._getTransformedDimensions(0,0),i=e.x*t.scaleX/this.scaleX,e=e.y*t.scaleY/this.scaleY;return{width:2+i,height:2+e,zoomX:t.scaleX,zoomY:t.scaleY,x:i,y:e}},_updateCacheCanvas:function(){var t=this.canvas;if(this.noScaleCache&&t&&t._currentTransform){var e=t._currentTransform.target,t=t._currentTransform.action;if(this===e&&t.slice&&"scale"===t.slice(0,5))return!1}var i,n,e=this._cacheCanvas,t=this._limitCacheSize(this._getCacheCanvasDimensions()),r=g.minCacheSideLimit,s=t.width,o=t.height,a=t.zoomX,h=t.zoomY,c=s!==this.cacheWidth||o!==this.cacheHeight,l=this.zoomX!==a||this.zoomY!==h,l=c||l,u=0,f=0,d=!1;return c&&(c=this._cacheCanvas.width,i=this._cacheCanvas.height,d=(n=c<s||i<o)||(s<.9*c||o<.9*i)&&r<c&&r<i,n&&!t.capped&&(r<s||r<o)&&(u=.1*s,f=.1*o)),this instanceof g.Text&&this.path&&(d=l=!0,u+=this.getHeightOfLine(0)*this.zoomX,f+=this.getHeightOfLine(0)*this.zoomY),!!l&&(d?(e.width=Math.ceil(s+u),e.height=Math.ceil(o+f)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,e.width,e.height)),c=t.x/2,i=t.y/2,this.cacheTranslationX=Math.round(e.width/2-c)+c,this.cacheTranslationY=Math.round(e.height/2-i)+i,this.cacheWidth=s,this.cacheHeight=o,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(a,h),this.zoomX=a,this.zoomY=h,!0)},setOptions:function(t){this._setOptions(t),this._initGradient(t.fill,"fill"),this._initGradient(t.stroke,"stroke"),this._initPattern(t.fill,"fill"),this._initPattern(t.stroke,"stroke")},transform:function(t){var e=this.group&&!this.group._transformDone||this.group&&this.canvas&&t===this.canvas.contextTop,e=this.calcTransformMatrix(!e);t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},toObject:function(t){var e=g.Object.NUM_FRACTION_DIGITS,e={type:this.type,version:g.version,originX:this.originX,originY:this.originY,left:i(this.left,e),top:i(this.top,e),width:i(this.width,e),height:i(this.height,e),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:i(this.strokeWidth,e),strokeDashArray:this.strokeDashArray&&this.strokeDashArray.concat(),strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,strokeUniform:this.strokeUniform,strokeMiterLimit:i(this.strokeMiterLimit,e),scaleX:i(this.scaleX,e),scaleY:i(this.scaleY,e),angle:i(this.angle,e),flipX:this.flipX,flipY:this.flipY,opacity:i(this.opacity,e),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,skewX:i(this.skewX,e),skewY:i(this.skewY,e)};return this.clipPath&&!this.clipPath.excludeFromExport&&(e.clipPath=this.clipPath.toObject(t),e.clipPath.inverted=this.clipPath.inverted,e.clipPath.absolutePositioned=this.clipPath.absolutePositioned),g.util.populateWithProperties(this,e,t),e=this.includeDefaultValues?e:this._removeDefaultValues(e)},toDatalessObject:function(t){return this.toObject(t)},_removeDefaultValues:function(e){var i=g.util.getKlass(e.type).prototype;return i.stateProperties.forEach(function(t){"left"!==t&&"top"!==t&&(e[t]===i[t]&&delete e[t],Array.isArray(e[t])&&Array.isArray(i[t])&&0===e[t].length&&0===i[t].length&&delete e[t])}),e},toString:function(){return"#<fabric."+e(this.type)+">"},getObjectScaling:function(){var t;return this.group?(t=g.util.qrDecompose(this.calcTransformMatrix()),{scaleX:Math.abs(t.scaleX),scaleY:Math.abs(t.scaleY)}):{scaleX:this.scaleX,scaleY:this.scaleY}},getTotalObjectScaling:function(){var t,e,i=this.getObjectScaling(),n=i.scaleX,i=i.scaleY;return this.canvas&&(n*=(t=this.canvas.getZoom())*(e=this.canvas.getRetinaScaling()),i*=t*e),{scaleX:n,scaleY:i}},getObjectOpacity:function(){var t=this.opacity;return this.group&&(t*=this.group.getObjectOpacity()),t},_set:function(t,e){var i=this[t]!==e;return("scaleX"===t||"scaleY"===t)&&(e=this._constrainScale(e)),"scaleX"===t&&e<0?(this.flipX=!this.flipX,e*=-1):"scaleY"===t&&e<0?(this.flipY=!this.flipY,e*=-1):"shadow"!==t||!e||e instanceof g.Shadow?"dirty"===t&&this.group&&this.group.set("dirty",e):e=new g.Shadow(e),this[t]=e,i&&(e=this.group&&this.group.isOnACache(),-1<this.cacheProperties.indexOf(t)?(this.dirty=!0,e&&this.group.set("dirty",!0)):e&&-1<this.stateProperties.indexOf(t)&&this.group.set("dirty",!0)),this},setOnGroup:function(){},getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:g.iMatrix.concat()},isNotVisible:function(){return 0===this.opacity||!this.width&&!this.height&&0===this.strokeWidth||!this.visible},render:function(t){this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(t.save(),this._setupCompositeOperation(t),this.drawSelectionBackground(t),this.transform(t),this._setOpacity(t),this._setShadow(t,this),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(t)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(t),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:"cacheProperties"})),t.restore())},renderCache:function(t){t=t||{},this._cacheCanvas&&this._cacheContext||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:"cacheProperties"}),this.drawObject(this._cacheContext,t.forClipping),this.dirty=!1)},_removeCacheCanvas:function(){this._cacheCanvas=null,this._cacheContext=null,this.cacheWidth=0,this.cacheHeight=0},hasStroke:function(){return this.stroke&&"transparent"!==this.stroke&&0!==this.strokeWidth},hasFill:function(){return this.fill&&"transparent"!==this.fill},needsItsOwnCache:function(){return!("stroke"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||"object"!=typeof this.shadow)||!!this.clipPath},shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},drawClipPathOnCache:function(t,e){var i;t.save(),e.inverted?t.globalCompositeOperation="destination-out":t.globalCompositeOperation="destination-in",e.absolutePositioned&&(i=g.util.invertTransform(this.calcTransformMatrix()),t.transform(i[0],i[1],i[2],i[3],i[4],i[5])),e.transform(t),t.scale(1/e.zoomX,1/e.zoomY),t.drawImage(e._cacheCanvas,-e.cacheTranslationX,-e.cacheTranslationY),t.restore()},drawObject:function(t,e){var i=this.fill,n=this.stroke;e?(this.fill="black",this.stroke="",this._setClippingProperties(t)):this._renderBackground(t),this._render(t),this._drawClipPath(t,this.clipPath),this.fill=i,this.stroke=n},_drawClipPath:function(t,e){e&&(e.canvas=this.canvas,e.shouldCache(),e._transformDone=!0,e.renderCache({forClipping:!0}),this.drawClipPathOnCache(t,e))},drawCacheOnCanvas:function(t){t.scale(1/this.zoomX,1/this.zoomY),t.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},isCacheDirty:function(t){var e;return!this.isNotVisible()&&(!(!this._cacheCanvas||!this._cacheContext||t||!this._updateCacheCanvas())||!!(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged("cacheProperties"))&&(this._cacheCanvas&&this._cacheContext&&!t&&(t=this.cacheWidth/this.zoomX,e=this.cacheHeight/this.zoomY,this._cacheContext.clearRect(-t/2,-e/2,t,e)),!0))},_renderBackground:function(t){var e;this.backgroundColor&&(e=this._getNonTransformedDimensions(),t.fillStyle=this.backgroundColor,t.fillRect(-e.x/2,-e.y/2,e.x,e.y),this._removeShadow(t))},_setOpacity:function(t){this.group&&!this.group._transformDone?t.globalAlpha=this.getObjectOpacity():t.globalAlpha*=this.opacity},_setStrokeStyles:function(t,e){var i=e.stroke;i&&(t.lineWidth=e.strokeWidth,t.lineCap=e.strokeLineCap,t.lineDashOffset=e.strokeDashOffset,t.lineJoin=e.strokeLineJoin,t.miterLimit=e.strokeMiterLimit,i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?this._applyPatternForTransformedGradient(t,i):(t.strokeStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):t.strokeStyle=e.stroke)},_setFillStyles:function(t,e){var i=e.fill;i&&(i.toLive?(t.fillStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,e.fill)):t.fillStyle=i)},_setClippingProperties:function(t){t.globalAlpha=1,t.strokeStyle="transparent",t.fillStyle="#000000"},_setLineDash:function(t,e){e&&0!==e.length&&(1&e.length&&e.push.apply(e,e),t.setLineDash(e))},_renderControls:function(t,e){var i=this.getViewportTransform(),n=this.calcTransformMatrix(),r=(void 0!==(e=e||{}).hasBorders?e:this).hasBorders,s=(void 0!==e.hasControls?e:this).hasControls,n=g.util.multiplyTransformMatrices(i,n),i=g.util.qrDecompose(n);t.save(),t.translate(i.translateX,i.translateY),t.lineWidth=+this.borderScaleFactor,this.group||(t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),this.flipX&&(i.angle-=180),t.rotate(o((this.group?i:this).angle)),e.forActiveSelection||this.group?r&&this.drawBordersInGroup(t,i,e):r&&this.drawBorders(t,e),s&&this.drawControls(t,e),t.restore()},_setShadow:function(t){var e,i,n,r,s;this.shadow&&(e=this.shadow,n=(i=this.canvas)&&i.viewportTransform[0]||1,r=i&&i.viewportTransform[3]||1,s=e.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),i&&i._isRetinaScaling()&&(n*=g.devicePixelRatio,r*=g.devicePixelRatio),t.shadowColor=e.color,t.shadowBlur=e.blur*g.browserShadowBlurConstant*(n+r)*(s.scaleX+s.scaleY)/4,t.shadowOffsetX=e.offsetX*n*s.scaleX,t.shadowOffsetY=e.offsetY*r*s.scaleY)},_removeShadow:function(t){this.shadow&&(t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0)},_applyPatternGradientTransform:function(t,e){var i,n,r;return e&&e.toLive?(i=e.gradientTransform||e.patternTransform,n=-this.width/2+e.offsetX||0,r=-this.height/2+e.offsetY||0,"percentage"===e.gradientUnits?t.transform(this.width,0,0,this.height,n,r):t.transform(1,0,0,1,n,r),i&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),{offsetX:n,offsetY:r}):{offsetX:0,offsetY:0}},_renderPaintInOrder:function(t){"stroke"===this.paintFirst?(this._renderStroke(t),this._renderFill(t)):(this._renderFill(t),this._renderStroke(t))},_render:function(){},_renderFill:function(t){this.fill&&(t.save(),this._setFillStyles(t,this),"evenodd"===this.fillRule?t.fill("evenodd"):t.fill(),t.restore())},_renderStroke:function(t){var e;this.stroke&&0!==this.strokeWidth&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this.strokeUniform&&this.group?(e=this.getObjectScaling(),t.scale(1/e.scaleX,1/e.scaleY)):this.strokeUniform&&t.scale(1/this.scaleX,1/this.scaleY),this._setLineDash(t,this.strokeDashArray),this._setStrokeStyles(t,this),t.stroke(),t.restore())},_applyPatternForTransformedGradient:function(t,e){var i,n=this._limitCacheSize(this._getCacheCanvasDimensions()),r=g.util.createCanvasElement(),s=this.canvas.getRetinaScaling(),o=n.x/this.scaleX/s,a=n.y/this.scaleY/s;r.width=o,r.height=a,(i=r.getContext("2d")).beginPath(),i.moveTo(0,0),i.lineTo(o,0),i.lineTo(o,a),i.lineTo(0,a),i.closePath(),i.translate(o/2,a/2),i.scale(n.zoomX/this.scaleX/s,n.zoomY/this.scaleY/s),this._applyPatternGradientTransform(i,e),i.fillStyle=e.toLive(t),i.fill(),t.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),t.scale(s*this.scaleX/n.zoomX,s*this.scaleY/n.zoomY),t.strokeStyle=i.createPattern(r,"no-repeat")},_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},_assignTransformMatrixProps:function(){var t;this.transformMatrix&&(t=g.util.qrDecompose(this.transformMatrix),this.flipX=!1,this.flipY=!1,this.set("scaleX",t.scaleX),this.set("scaleY",t.scaleY),this.angle=t.angle,this.skewX=t.skewX,this.skewY=0)},_removeTransformMatrix:function(t){var e=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),e=g.util.transformPoint(e,this.transformMatrix)),this.transformMatrix=null,t&&(this.scaleX*=t.scaleX,this.scaleY*=t.scaleY,this.cropX=t.cropX,this.cropY=t.cropY,e.x+=t.offsetLeft,e.y+=t.offsetTop,this.width=t.width,this.height=t.height),this.setPositionByOrigin(e,"center","center")},clone:function(t,e){e=this.toObject(e);this.constructor.fromObject?this.constructor.fromObject(e,t):g.Object._fromObject("Object",e,t)},cloneAsImage:function(t,e){e=this.toCanvasElement(e);return t&&t(new g.Image(e)),this},toCanvasElement:function(t){t=t||{};var e,i=g.util,n=i.saveObjectTransform(this),r=this.group,s=this.shadow,o=Math.abs,a=(t.multiplier||1)*(t.enableRetinaScaling?g.devicePixelRatio:1),i=(delete this.group,t.withoutTransform&&i.resetObjectTransform(this),t.withoutShadow&&(this.shadow=null),g.util.createCanvasElement()),h=this.getBoundingRect(!0,!0),c=this.shadow,l={x:0,y:0},o=(c&&(e=c.blur,u=c.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),l.x=2*Math.round(o(c.offsetX)+e)*o(u.scaleX),l.y=2*Math.round(o(c.offsetY)+e)*o(u.scaleY)),c=h.width+l.x,e=h.height+l.y,i.width=Math.ceil(c),i.height=Math.ceil(e),new g.StaticCanvas(i,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1})),u=("jpeg"===t.format&&(o.backgroundColor="#fff"),this.setPositionByOrigin(new g.Point(o.width/2,o.height/2),"center","center"),this.canvas),h=(o.add(this),o.toCanvasElement(a||1,t));return this.shadow=s,this.set("canvas",u),r&&(this.group=r),this.set(n).setCoords(),o._objects=[],o.dispose(),o=null,h},toDataURL:function(t){return g.util.toDataURL(this.toCanvasElement(t=t||{}),t.format||"png",t.quality||1)},isType:function(t){return 1<arguments.length?Array.from(arguments).includes(this.type):this.type===t},complexity:function(){return 1},toJSON:function(t){return this.toObject(t)},rotate:function(t){var e=("center"!==this.originX||"center"!==this.originY)&&this.centeredRotation;return e&&this._setOriginToCenter(),this.set("angle",t),e&&this._resetOrigin(),this},centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},center:function(){return this.canvas&&this.canvas.centerObject(this),this},viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},getLocalPointer:function(t,e){e=e||this.canvas.getPointer(t);t=new g.Point(e.x,e.y),e=this._getLeftTopCoords();return{x:(t=this.angle?g.util.rotatePoint(t,e,o(-this.angle)):t).x-e.x,y:t.y-e.y}},_setupCompositeOperation:function(t){this.globalCompositeOperation&&(t.globalCompositeOperation=this.globalCompositeOperation)},dispose:function(){g.runningAnimations&&g.runningAnimations.cancelByTarget(this)}}),g.util.createAccessors&&g.util.createAccessors(g.Object),t(g.Object.prototype,g.Observable),g.Object.NUM_FRACTION_DIGITS=2,g.Object.ENLIVEN_PROPS=["clipPath"],g.Object._fromObject=function(t,e,i,n){var r=g[t];e=s(e,!0),g.util.enlivenPatterns([e.fill,e.stroke],function(t){void 0!==t[0]&&(e.fill=t[0]),void 0!==t[1]&&(e.stroke=t[1]),g.util.enlivenObjectEnlivables(e,e,function(){var t=n?new r(e[n],e):new r(e);i&&i(t)})})},g.Object.__uid=0)}(i),d=z.util.degreesToRadians,g={left:-.5,center:0,right:.5},Q={top:-.5,center:0,bottom:.5},z.util.object.extend(z.Object.prototype,{translateToGivenOrigin:function(t,e,i,n,r){var s=t.x,o=t.y;return"string"==typeof e?e=g[e]:e-=.5,"string"==typeof n?n=g[n]:n-=.5,"string"==typeof i?i=Q[i]:i-=.5,"string"==typeof r?r=Q[r]:r-=.5,r=r-i,((i=n-e)||r)&&(n=this._getTransformedDimensions(),s=t.x+i*n.x,o=t.y+r*n.y),new z.Point(s,o)},translateToCenterPoint:function(t,e,i){e=this.translateToGivenOrigin(t,e,i,"center","center");return this.angle?z.util.rotatePoint(e,t,d(this.angle)):e},translateToOriginPoint:function(t,e,i){e=this.translateToGivenOrigin(t,"center","center",e,i);return this.angle?z.util.rotatePoint(e,t,d(this.angle)):e},getCenterPoint:function(){var t=new z.Point(this.left,this.top);return this.translateToCenterPoint(t,this.originX,this.originY)},getPointByOrigin:function(t,e){var i=this.getCenterPoint();return this.translateToOriginPoint(i,t,e)},toLocalPoint:function(t,e,i){var n=this.getCenterPoint(),e=void 0!==e&&void 0!==i?this.translateToGivenOrigin(n,"center","center",e,i):new z.Point(this.left,this.top),i=new z.Point(t.x,t.y);return(i=this.angle?z.util.rotatePoint(i,n,-d(this.angle)):i).subtractEquals(e)},setPositionByOrigin:function(t,e,i){t=this.translateToCenterPoint(t,e,i),e=this.translateToOriginPoint(t,this.originX,this.originY);this.set("left",e.x),this.set("top",e.y)},adjustPosition:function(t){var e=d(this.angle),i=this.getScaledWidth(),n=z.util.cos(e)*i,e=z.util.sin(e)*i,i="string"==typeof this.originX?g[this.originX]:this.originX-.5,r="string"==typeof t?g[t]:t-.5;this.left+=n*(r-i),this.top+=e*(r-i),this.setCoords(),this.originX=t},_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var t=this.getCenterPoint();this.originX="center",this.originY="center",this.left=t.x,this.top=t.y},_resetOrigin:function(){var t=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=t.x,this.top=t.y,this._originalOriginX=null,this._originalOriginY=null},_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),"left","top")}}),p=z.util,tt=p.degreesToRadians,m=p.multiplyTransformMatrices,v=p.transformPoint,p.object.extend(z.Object.prototype,{oCoords:null,aCoords:null,lineCoords:null,ownMatrixCache:null,matrixCache:null,controls:{},_getCoords:function(t,e){return e?t?this.calcACoords():this.calcLineCoords():(this.aCoords&&this.lineCoords||this.setCoords(!0),t?this.aCoords:this.lineCoords)},getCoords:function(t,e){return t=this._getCoords(t,e),[new z.Point(t.tl.x,t.tl.y),new z.Point(t.tr.x,t.tr.y),new z.Point(t.br.x,t.br.y),new z.Point(t.bl.x,t.bl.y)]},intersectsWithRect:function(t,e,i,n){i=this.getCoords(i,n);return"Intersection"===z.Intersection.intersectPolygonRectangle(i,t,e).status},intersectsWithObject:function(t,e,i){return"Intersection"===z.Intersection.intersectPolygonPolygon(this.getCoords(e,i),t.getCoords(e,i)).status||t.isContainedWithinObject(this,e,i)||this.isContainedWithinObject(t,e,i)},isContainedWithinObject:function(t,e,i){for(var n=this.getCoords(e,i),i=e?t.aCoords:t.lineCoords,r=0,s=t._getImageLines(i);r<4;r++)if(!t.containsPoint(n[r],s))return!1;return!0},isContainedWithinRect:function(t,e,i,n){i=this.getBoundingRect(i,n);return i.left>=t.x&&i.left+i.width<=e.x&&i.top>=t.y&&i.top+i.height<=e.y},containsPoint:function(t,e,i,n){i=this._getCoords(i,n),e=e||this._getImageLines(i),n=this._findCrossPoints(t,e);return 0!==n&&n%2==1},isOnScreen:function(t){var e,i;return!!this.canvas&&(e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br,!!this.getCoords(!0,t).some(function(t){return t.x<=i.x&&t.x>=e.x&&t.y<=i.y&&t.y>=e.y})||(!!this.intersectsWithRect(e,i,!0,t)||this._containsCenterOfCanvas(e,i,t)))},_containsCenterOfCanvas:function(t,e,i){t={x:(t.x+e.x)/2,y:(t.y+e.y)/2};return!!this.containsPoint(t,null,!0,i)},isPartiallyOnScreen:function(t){var e,i;return!!this.canvas&&(e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br,!!this.intersectsWithRect(e,i,!0,t)||this.getCoords(!0,t).every(function(t){return(t.x>=i.x||t.x<=e.x)&&(t.y>=i.y||t.y<=e.y)})&&this._containsCenterOfCanvas(e,i,t))},_getImageLines:function(t){return{topline:{o:t.tl,d:t.tr},rightline:{o:t.tr,d:t.br},bottomline:{o:t.br,d:t.bl},leftline:{o:t.bl,d:t.tl}}},_findCrossPoints:function(t,e){var i,n,r,s=0;for(r in e)if(!((n=e[r]).o.y<t.y&&n.d.y<t.y||n.o.y>=t.y&&n.d.y>=t.y||((n.o.x===n.d.x&&n.o.x>=t.x?n.o.x:(i=(n.d.y-n.o.y)/(n.d.x-n.o.x),-(t.y-0*t.x-(n.o.y-i*n.o.x))/(0-i)))>=t.x&&(s+=1),2!==s)))break;return s},getBoundingRect:function(t,e){t=this.getCoords(t,e);return p.makeBoundingBoxFromPoints(t)},getScaledWidth:function(){return this._getTransformedDimensions().x},getScaledHeight:function(){return this._getTransformedDimensions().y},_constrainScale:function(t){return Math.abs(t)<this.minScaleLimit?t<0?-this.minScaleLimit:this.minScaleLimit:0===t?1e-4:t},scale:function(t){return this._set("scaleX",t),this._set("scaleY",t),this.setCoords()},scaleToWidth:function(t,e){e=this.getBoundingRect(e).width/this.getScaledWidth();return this.scale(t/this.width/e)},scaleToHeight:function(t,e){e=this.getBoundingRect(e).height/this.getScaledHeight();return this.scale(t/this.height/e)},calcLineCoords:function(){var t=this.getViewportTransform(),e=this.padding,i=tt(this.angle),n=p.cos(i)*e,i=p.sin(i)*e,r=n+i,n=n-i,i=this.calcACoords(),i={tl:v(i.tl,t),tr:v(i.tr,t),bl:v(i.bl,t),br:v(i.br,t)};return e&&(i.tl.x-=n,i.tl.y-=r,i.tr.x+=r,i.tr.y-=n,i.bl.x-=r,i.bl.y+=n,i.br.x+=n,i.br.y+=r),i},calcOCoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),i=this.getViewportTransform(),e=m(i,e),n=m(e,t),n=m(n,[1/i[0],0,0,1/i[3],0,0]),r=this._calculateCurrentDimensions(),s={};return this.forEachControl(function(t,e,i){s[e]=t.positionHandler(r,n,i)}),s},calcACoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),e=m(e,t),t=this._getTransformedDimensions(),i=t.x/2,t=t.y/2;return{tl:v({x:-i,y:-t},e),tr:v({x:i,y:-t},e),bl:v({x:-i,y:t},e),br:v({x:i,y:t},e)}},setCoords:function(t){return this.aCoords=this.calcACoords(),this.lineCoords=this.group?this.aCoords:this.calcLineCoords(),t||(this.oCoords=this.calcOCoords(),this._setCornerCoords&&this._setCornerCoords()),this},_calcRotateMatrix:function(){return p.calcRotateMatrix(this)},_calcTranslateMatrix:function(){var t=this.getCenterPoint();return[1,0,0,1,t.x,t.y]},transformMatrixKey:function(t){var e="_",i="";return(i=!t&&this.group?this.group.transformMatrixKey(t)+e:i)+this.top+e+this.left+e+this.scaleX+e+this.scaleY+e+this.skewX+e+this.skewY+e+this.angle+e+this.originX+e+this.originY+e+this.width+e+this.height+e+this.strokeWidth+this.flipX+this.flipY},calcTransformMatrix:function(t){var e=this.calcOwnMatrix();if(!t&&this.group){var t=this.transformMatrixKey(t),i=this.matrixCache||(this.matrixCache={});if(i.key===t)return i.value;this.group&&(e=m(this.group.calcTransformMatrix(!1),e)),i.key=t,i.value=e}return e},calcOwnMatrix:function(){var t,e=this.transformMatrixKey(!0),i=this.ownMatrixCache||(this.ownMatrixCache={});return i.key!==e&&(t=this._calcTranslateMatrix(),t={angle:this.angle,translateX:t[4],translateY:t[5],scaleX:this.scaleX,scaleY:this.scaleY,skewX:this.skewX,skewY:this.skewY,flipX:this.flipX,flipY:this.flipY},i.key=e,i.value=p.composeMatrix(t)),i.value},_getNonTransformedDimensions:function(){var t=this.strokeWidth;return{x:this.width+t,y:this.height+t}},_getTransformedDimensions:function(t,e){void 0===t&&(t=this.skewX),void 0===e&&(e=this.skewY);var i,n=0===t&&0===e,r=this.strokeUniform?(i=this.width,this.height):(i=(r=this._getNonTransformedDimensions()).x,r.y);return n?this._finalizeDimensions(i*this.scaleX,r*this.scaleY):(n=p.sizeAfterTransform(i,r,{scaleX:this.scaleX,scaleY:this.scaleY,skewX:t,skewY:e}),this._finalizeDimensions(n.x,n.y))},_finalizeDimensions:function(t,e){return this.strokeUniform?{x:t+this.strokeWidth,y:e+this.strokeWidth}:{x:t,y:e}},_calculateCurrentDimensions:function(){var t=this.getViewportTransform(),e=this._getTransformedDimensions();return v(e,t,!0).scalarAdd(2*this.padding)}}),z.util.object.extend(z.Object.prototype,{sendToBack:function(){return this.group?z.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},bringToFront:function(){return this.group?z.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},sendBackwards:function(t){return this.group?z.StaticCanvas.prototype.sendBackwards.call(this.group,this,t):this.canvas&&this.canvas.sendBackwards(this,t),this},bringForward:function(t){return this.group?z.StaticCanvas.prototype.bringForward.call(this.group,this,t):this.canvas&&this.canvas.bringForward(this,t),this},moveTo:function(t){return this.group&&"activeSelection"!==this.group.type?z.StaticCanvas.prototype.moveTo.call(this.group,this,t):this.canvas&&this.canvas.moveTo(this,t),this}}),y=z.util.toFixed,z.util.object.extend(z.Object.prototype,{getSvgStyles:function(t){var e=this.fillRule||"nonzero",i=this.strokeWidth||"0",n=this.strokeDashArray?this.strokeDashArray.join(" "):"none",r=this.strokeDashOffset||"0",s=this.strokeLineCap||"butt",o=this.strokeLineJoin||"miter",a=this.strokeMiterLimit||"4",h=void 0!==this.opacity?this.opacity:"1",c=this.visible?"":" visibility: hidden;",t=t?"":this.getSvgFilter(),l=F("fill",this.fill);return[F("stroke",this.stroke),"stroke-width: ",i,"; ","stroke-dasharray: ",n,"; ","stroke-linecap: ",s,"; ","stroke-dashoffset: ",r,"; ","stroke-linejoin: ",o,"; ","stroke-miterlimit: ",a,"; ",l,"fill-rule: ",e,"; ","opacity: ",h,";",t,c].join("")},getSvgSpanStyles:function(t,e){var i="; ",n=t.fontFamily?"font-family: "+(-1===t.fontFamily.indexOf("'")&&-1===t.fontFamily.indexOf('"')?"'"+t.fontFamily+"'":t.fontFamily)+i:"",r=t.strokeWidth?"stroke-width: "+t.strokeWidth+i:"",s=t.fontSize?"font-size: "+t.fontSize+"px"+i:"",o=t.fontStyle?"font-style: "+t.fontStyle+i:"",a=t.fontWeight?"font-weight: "+t.fontWeight+i:"",h=t.fill?F("fill",t.fill):"",c=t.stroke?F("stroke",t.stroke):"",l=this.getSvgTextDecoration(t);return[c,r,n,s,o,a,l=l&&"text-decoration: "+l+i,h,t.deltaY?"baseline-shift: "+-t.deltaY+"; ":"",e?"white-space: pre; ":""].join("")},getSvgTextDecoration:function(e){return["overline","underline","line-through"].filter(function(t){return e[t.replace("-","")]}).join(" ")},getSvgFilter:function(){return this.shadow?"filter: url(#SVGID_"+this.shadow.id+");":""},getSvgCommons:function(){return[this.id?'id="'+this.id+'" ':"",this.clipPath?'clip-path="url(#'+this.clipPath.clipPathId+')" ':""].join("")},getSvgTransform:function(t,e){t=t?this.calcTransformMatrix():this.calcOwnMatrix();return'transform="'+z.util.matrixToSVG(t)+(e||"")+'" '},_setSVGBg:function(t){var e;this.backgroundColor&&(e=z.Object.NUM_FRACTION_DIGITS,t.push("\t\t<rect ",this._getFillAttributes(this.backgroundColor),' x="',y(-this.width/2,e),'" y="',y(-this.height/2,e),'" width="',y(this.width,e),'" height="',y(this.height,e),'"></rect>\n'))},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(t),{reviver:t})},toClipPathSVG:function(t){return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(t),{reviver:t})},_createBaseClipPathSVGMarkup:function(t,e){var i=(e=e||{}).reviver,e=e.additionalTransform||"",e=[this.getSvgTransform(!0,e),this.getSvgCommons()].join(""),n=t.indexOf("COMMON_PARTS");return t[n]=e,i?i(t.join("")):t.join("")},_createBaseSVGMarkup:function(t,e){var i,n=(e=e||{}).noStyle,r=e.reviver,s=n?"":'style="'+this.getSvgStyles()+'" ',o=e.withShadow?'style="'+this.getSvgFilter()+'" ':"",a=this.clipPath,h=this.strokeUniform?'vector-effect="non-scaling-stroke" ':"",c=a&&a.absolutePositioned,l=this.stroke,u=this.fill,f=this.shadow,d=[],g=t.indexOf("COMMON_PARTS"),e=e.additionalTransform;return a&&(a.clipPathId="CLIPPATH_"+z.Object.__uid++,i='<clipPath id="'+a.clipPathId+'" >\n'+a.toClipPathSVG(r)+"</clipPath>\n"),c&&d.push("<g ",o,this.getSvgCommons()," >\n"),d.push("<g ",this.getSvgTransform(!1),c?"":o+this.getSvgCommons()," >\n"),o=[s,h,n?"":this.addPaintOrder()," ",e?'transform="'+e+'" ':""].join(""),t[g]=o,u&&u.toLive&&d.push(u.toSVG(this)),l&&l.toLive&&d.push(l.toSVG(this)),f&&d.push(f.toSVG(this)),a&&d.push(i),d.push(t.join("")),d.push("</g>\n"),c&&d.push("</g>\n"),r?r(d.join("")):d.join("")},addPaintOrder:function(){return"fill"!==this.paintFirst?' paint-order="'+this.paintFirst+'" ':""}}),et=z.util.object.extend,_="stateProperties",z.util.object.extend(z.Object.prototype,{hasStateChanged:function(t){var e="_"+(t=t||_);return Object.keys(this[e]).length<this[t].length||!function t(e,i,n){if(e===i)return 1;if(Array.isArray(e)){if(Array.isArray(i)&&e.length===i.length){for(var r=0,s=e.length;r<s;r++)if(!t(e[r],i[r]))return;return 1}}else if(e&&"object"==typeof e){var o,a=Object.keys(e);if(i&&"object"==typeof i&&(n||a.length===Object.keys(i).length)){for(r=0,s=a.length;r<s;r++)if("canvas"!==(o=a[r])&&"group"!==o&&!t(e[o],i[o]))return;return 1}}}(this[e],this,!0)},saveState:function(t){var e=t&&t.propertySet||_,i="_"+e;return this[i]?(Dt(this,i,this[e]),t&&t.stateProperties&&Dt(this,i,t.stateProperties),this):this.setupState(t)},setupState:function(t){var e=(t=t||{}).propertySet||_;return this["_"+(t.propertySet=e)]={},this.saveState(t),this}}),it=z.util.degreesToRadians,z.util.object.extend(z.Object.prototype,{_findTargetCorner:function(t,e){if(this.hasControls&&!this.group&&this.canvas&&this.canvas._activeObject===this){var i,n,r=t.x,s=t.y,o=Object.keys(this.oCoords),a=o.length-1;for(this.__corner=0;0<=a;a--)if(n=o[a],this.isControlVisible(n)&&(i=this._getImageLines(e?this.oCoords[n].touchCorner:this.oCoords[n].corner),0!==(i=this._findCrossPoints({x:r,y:s},i))&&i%2==1))return this.__corner=n}return!1},forEachControl:function(t){for(var e in this.controls)t(this.controls[e],e,this)},_setCornerCoords:function(){var t,e=this.oCoords;for(t in e){var i=this.controls[t];e[t].corner=i.calcCornerCoords(this.angle,this.cornerSize,e[t].x,e[t].y,!1),e[t].touchCorner=i.calcCornerCoords(this.angle,this.touchCornerSize,e[t].x,e[t].y,!0)}},drawSelectionBackground:function(t){var e,i,n;return!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this||(t.save(),e=this.getCenterPoint(),i=this._calculateCurrentDimensions(),n=this.canvas.viewportTransform,t.translate(e.x,e.y),t.scale(1/n[0],1/n[3]),t.rotate(it(this.angle)),t.fillStyle=this.selectionBackgroundColor,t.fillRect(-i.x/2,-i.y/2,i.x,i.y),t.restore()),this},drawBorders:function(n,t){t=t||{};var e=this._calculateCurrentDimensions(),i=this.borderScaleFactor,r=e.x+i,s=e.y+i,e=(void 0!==t.hasControls?t:this).hasControls,o=!1;return n.save(),n.strokeStyle=t.borderColor||this.borderColor,this._setLineDash(n,t.borderDashArray||this.borderDashArray),n.strokeRect(-r/2,-s/2,r,s),e&&(n.beginPath(),this.forEachControl(function(t,e,i){t.withConnection&&t.getVisibility(i,e)&&(o=!0,n.moveTo(t.x*r,t.y*s),n.lineTo(t.x*r+t.offsetX,t.y*s+t.offsetY))}),o&&n.stroke()),n.restore(),this},drawBordersInGroup:function(t,e,i){i=i||{};var n=z.util.sizeAfterTransform(this.width,this.height,e),r=this.strokeWidth,s=this.strokeUniform,o=this.borderScaleFactor,a=n.x+r*(s?this.canvas.getZoom():e.scaleX)+o,n=n.y+r*(s?this.canvas.getZoom():e.scaleY)+o;return t.save(),this._setLineDash(t,i.borderDashArray||this.borderDashArray),t.strokeStyle=i.borderColor||this.borderColor,t.strokeRect(-a/2,-n/2,a,n),t.restore(),this},drawControls:function(n,r){r=r||{},n.save();var s,o,t=this.canvas.getRetinaScaling();return n.setTransform(t,0,0,t,0,0),n.strokeStyle=n.fillStyle=r.cornerColor||this.cornerColor,this.transparentCorners||(n.strokeStyle=r.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(n,r.cornerDashArray||this.cornerDashArray),this.setCoords(),this.group&&(s=this.group.calcTransformMatrix()),this.forEachControl(function(t,e,i){o=i.oCoords[e],t.getVisibility(i,e)&&(s&&(o=z.util.transformPoint(o,s)),t.render(n,o.x,o.y,r,i))}),n.restore(),this},isControlVisible:function(t){return this.controls[t]&&this.controls[t].getVisibility(this,t)},setControlVisible:function(t,e){return this._controlsVisibility||(this._controlsVisibility={}),this._controlsVisibility[t]=e,this},setControlsVisibility:function(t){for(var e in t=t||{})this.setControlVisible(e,t[e]);return this},onDeselect:function(){},onSelect:function(){}}),z.util.object.extend(z.StaticCanvas.prototype,{FX_DURATION:500,fxCenterObjectH:function(e,t){function i(){}var n=(t=t||{}).onComplete||i,r=t.onChange||i,s=this;return z.util.animate({target:this,startValue:e.left,endValue:this.getCenterPoint().x,duration:this.FX_DURATION,onChange:function(t){e.set("left",t),s.requestRenderAll(),r()},onComplete:function(){e.setCoords(),n()}})},fxCenterObjectV:function(e,t){function i(){}var n=(t=t||{}).onComplete||i,r=t.onChange||i,s=this;return z.util.animate({target:this,startValue:e.top,endValue:this.getCenterPoint().y,duration:this.FX_DURATION,onChange:function(t){e.set("top",t),s.requestRenderAll(),r()},onComplete:function(){e.setCoords(),n()}})},fxRemove:function(e,t){function i(){}var n=(t=t||{}).onComplete||i,r=t.onChange||i,s=this;return z.util.animate({target:this,startValue:e.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(t){e.set("opacity",t),s.requestRenderAll(),r()},onComplete:function(){s.remove(e),n()}})}}),z.util.object.extend(z.Object.prototype,{animate:function(){if(arguments[0]&&"object"==typeof arguments[0]){var t,e,i=[],n=[];for(t in arguments[0])i.push(t);for(var r=0,s=i.length;r<s;r++)e=r!==s-1,n.push(this._animate(t=i[r],arguments[0][t],arguments[1],e));return n}return this._animate.apply(this,arguments)},_animate:function(n,t,r,s){var o,a=this,e=(t=t.toString(),r=r?z.util.object.clone(r):{},~n.indexOf(".")&&(o=n.split(".")),-1<a.colorProperties.indexOf(n)||o&&-1<a.colorProperties.indexOf(o[1])),i=o?this.get(o[0])[o[1]]:this.get(n),i=("from"in r||(r.from=i),e||(t=~t.indexOf("=")?i+parseFloat(t.replace("=","")):parseFloat(t)),{target:this,startValue:r.from,endValue:t,byValue:r.by,easing:r.easing,duration:r.duration,abort:r.abort&&function(t,e,i){return r.abort.call(a,t,e,i)},onChange:function(t,e,i){o?a[o[0]][o[1]]=t:a.set(n,t),s||r.onChange&&r.onChange(t,e,i)},onComplete:function(t,e,i){s||(a.setCoords(),r.onComplete&&r.onComplete(t,e,i))}});return e?z.util.animateColor(i.startValue,i.endValue,i.duration,i):z.util.animate(i)}}),function(t){"use strict";var r=t.fabric||(t.fabric={}),s=r.util.object.extend,n=r.util.object.clone,i={x1:1,x2:1,y1:1,y2:1};function e(t,e){var i=t.origin,n=t.axis1,r=t.axis2,s=t.dimension,o=e.nearest,a=e.center,h=e.farthest;return function(){switch(this.get(i)){case o:return Math.min(this.get(n),this.get(r));case a:return Math.min(this.get(n),this.get(r))+.5*this.get(s);case h:return Math.max(this.get(n),this.get(r))}}}r.Line?r.warn("fabric.Line is already defined"):(r.Line=r.util.createClass(r.Object,{type:"line",x1:0,y1:0,x2:0,y2:0,cacheProperties:r.Object.prototype.cacheProperties.concat("x1","x2","y1","y2"),initialize:function(t,e){t=t||[0,0,0,0],this.callSuper("initialize",e),this.set("x1",t[0]),this.set("y1",t[1]),this.set("x2",t[2]),this.set("y2",t[3]),this._setWidthHeight(e)},_setWidthHeight:function(t){t=t||{},this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left="left"in t?t.left:this._getLeftToOriginX(),this.top="top"in t?t.top:this._getTopToOriginY()},_set:function(t,e){return this.callSuper("_set",t,e),void 0!==i[t]&&this._setWidthHeight(),this},_getLeftToOriginX:e({origin:"originX",axis1:"x1",axis2:"x2",dimension:"width"},{nearest:"left",center:"center",farthest:"right"}),_getTopToOriginY:e({origin:"originY",axis1:"y1",axis2:"y2",dimension:"height"},{nearest:"top",center:"center",farthest:"bottom"}),_render:function(t){t.beginPath();var e=this.calcLinePoints(),e=(t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.lineWidth=this.strokeWidth,t.strokeStyle);t.strokeStyle=this.stroke||t.fillStyle,this.stroke&&this._renderStroke(t),t.strokeStyle=e},_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},toObject:function(t){return s(this.callSuper("toObject",t),this.calcLinePoints())},_getNonTransformedDimensions:function(){var t=this.callSuper("_getNonTransformedDimensions");return"butt"===this.strokeLineCap&&(0===this.width&&(t.y-=this.strokeWidth),0===this.height&&(t.x-=this.strokeWidth)),t},calcLinePoints:function(){var t=this.x1<=this.x2?-1:1,e=this.y1<=this.y2?-1:1,i=t*this.width*.5,n=e*this.height*.5;return{x1:i,x2:t*this.width*-.5,y1:n,y2:e*this.height*-.5}},_toSVG:function(){var t=this.calcLinePoints();return["<line ","COMMON_PARTS",'x1="',t.x1,'" y1="',t.y1,'" x2="',t.x2,'" y2="',t.y2,'" />\n']}}),r.Line.ATTRIBUTE_NAMES=r.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")),r.Line.fromElement=function(t,e,i){i=i||{};var t=r.parseAttributes(t,r.Line.ATTRIBUTE_NAMES),n=[t.x1||0,t.y1||0,t.x2||0,t.y2||0];e(new r.Line(n,s(t,i)))},r.Line.fromObject=function(t,e){var i=n(t,!0);i.points=[t.x1,t.y1,t.x2,t.y2],r.Object._fromObject("Line",i,function(t){delete t.points,e&&e(t)},"points")})}(i),function(t){"use strict";var r=t.fabric||(t.fabric={}),s=r.util.degreesToRadians;r.Circle?r.warn("fabric.Circle is already defined."):(r.Circle=r.util.createClass(r.Object,{type:"circle",radius:0,startAngle:0,endAngle:360,cacheProperties:r.Object.prototype.cacheProperties.concat("radius","startAngle","endAngle"),_set:function(t,e){return this.callSuper("_set",t,e),"radius"===t&&this.setRadius(e),this},toObject:function(t){return this.callSuper("toObject",["radius","startAngle","endAngle"].concat(t))},_toSVG:function(){var t,e,i,n=(this.endAngle-this.startAngle)%360;return 0==n?["<circle ","COMMON_PARTS",'cx="0" cy="0" ','r="',this.radius,'" />\n']:(t=s(this.startAngle),e=s(this.endAngle),i=this.radius,['<path d="M '+r.util.cos(t)*i+" "+r.util.sin(t)*i," A "+i+" "+i," 0 ",+(180<n?"1":"0")+" 1"," "+r.util.cos(e)*i+" "+r.util.sin(e)*i,'" ',"COMMON_PARTS"," />\n"])},_render:function(t){t.beginPath(),t.arc(0,0,this.radius,s(this.startAngle),s(this.endAngle),!1),this._renderPaintInOrder(t)},getRadiusX:function(){return this.get("radius")*this.get("scaleX")},getRadiusY:function(){return this.get("radius")*this.get("scaleY")},setRadius:function(t){return this.radius=t,this.set("width",2*t).set("height",2*t)}}),r.Circle.ATTRIBUTE_NAMES=r.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")),r.Circle.fromElement=function(t,e){var i,t=r.parseAttributes(t,r.Circle.ATTRIBUTE_NAMES);if(!("radius"in(i=t)&&0<=i.radius))throw new Error("value of `r` attribute is required and can not be negative");t.left=(t.left||0)-t.radius,t.top=(t.top||0)-t.radius,e(new r.Circle(t))},r.Circle.fromObject=function(t,e){r.Object._fromObject("Circle",t,e)})}(i),function(t){"use strict";var i=t.fabric||(t.fabric={});i.Triangle?i.warn("fabric.Triangle is already defined"):(i.Triangle=i.util.createClass(i.Object,{type:"triangle",width:100,height:100,_render:function(t){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,i),t.lineTo(0,-i),t.lineTo(e,i),t.closePath(),this._renderPaintInOrder(t)},_toSVG:function(){var t=this.width/2,e=this.height/2;return["<polygon ","COMMON_PARTS",'points="',[-t+" "+e,"0 "+-e,t+" "+e].join(","),'" />']}}),i.Triangle.fromObject=function(t,e){return i.Object._fromObject("Triangle",t,e)})}(i),function(t){"use strict";var i=t.fabric||(t.fabric={}),e=2*Math.PI;i.Ellipse?i.warn("fabric.Ellipse is already defined."):(i.Ellipse=i.util.createClass(i.Object,{type:"ellipse",rx:0,ry:0,cacheProperties:i.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this.set("rx",t&&t.rx||0),this.set("ry",t&&t.ry||0)},_set:function(t,e){switch(this.callSuper("_set",t,e),t){case"rx":this.rx=e,this.set("width",2*e);break;case"ry":this.ry=e,this.set("height",2*e)}return this},getRx:function(){return this.get("rx")*this.get("scaleX")},getRy:function(){return this.get("ry")*this.get("scaleY")},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<ellipse ","COMMON_PARTS",'cx="0" cy="0" ','rx="',this.rx,'" ry="',this.ry,'" />\n']},_render:function(t){t.beginPath(),t.save(),t.transform(1,0,0,this.ry/this.rx,0,0),t.arc(0,0,this.rx,0,e,!1),t.restore(),this._renderPaintInOrder(t)}}),i.Ellipse.ATTRIBUTE_NAMES=i.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")),i.Ellipse.fromElement=function(t,e){t=i.parseAttributes(t,i.Ellipse.ATTRIBUTE_NAMES);t.left=(t.left||0)-t.rx,t.top=(t.top||0)-t.ry,e(new i.Ellipse(t))},i.Ellipse.fromObject=function(t,e){i.Object._fromObject("Ellipse",t,e)})}(i),function(t){"use strict";var n=t.fabric||(t.fabric={}),r=n.util.object.extend;n.Rect?n.warn("fabric.Rect is already defined"):(n.Rect=n.util.createClass(n.Object,{stateProperties:n.Object.prototype.stateProperties.concat("rx","ry"),type:"rect",rx:0,ry:0,cacheProperties:n.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this._initRxRy()},_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},_render:function(t){var e=this.rx?Math.min(this.rx,this.width/2):0,i=this.ry?Math.min(this.ry,this.height/2):0,n=this.width,r=this.height,s=-this.width/2,o=-this.height/2,a=0!==e||0!==i,h=.4477152502;t.beginPath(),t.moveTo(s+e,o),t.lineTo(s+n-e,o),a&&t.bezierCurveTo(s+n-h*e,o,s+n,o+h*i,s+n,o+i),t.lineTo(s+n,o+r-i),a&&t.bezierCurveTo(s+n,o+r-h*i,s+n-h*e,o+r,s+n-e,o+r),t.lineTo(s+e,o+r),a&&t.bezierCurveTo(s+h*e,o+r,s,o+r-h*i,s,o+r-i),t.lineTo(s,o+i),a&&t.bezierCurveTo(s,o+h*i,s+h*e,o,s+e,o),t.closePath(),this._renderPaintInOrder(t)},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<rect ","COMMON_PARTS",'x="',-this.width/2,'" y="',-this.height/2,'" rx="',this.rx,'" ry="',this.ry,'" width="',this.width,'" height="',this.height,'" />\n']}}),n.Rect.ATTRIBUTE_NAMES=n.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")),n.Rect.fromElement=function(t,e,i){if(!t)return e(null);i=i||{};t=n.parseAttributes(t,n.Rect.ATTRIBUTE_NAMES),t.left=t.left||0,t.top=t.top||0,t.height=t.height||0,t.width=t.width||0,i=new n.Rect(r(i?n.util.object.clone(i):{},t));i.visible=i.visible&&0<i.width&&0<i.height,e(i)},n.Rect.fromObject=function(t,e){return n.Object._fromObject("Rect",t,e)})}(i),function(t){"use strict";var o=t.fabric||(t.fabric={}),s=o.util.object.extend,n=o.util.array.min,r=o.util.array.max,a=o.util.toFixed,e=o.util.projectStrokeOnPoints;o.Polyline?o.warn("fabric.Polyline is already defined"):(o.Polyline=o.util.createClass(o.Object,{type:"polyline",points:null,exactBoundingBox:!1,cacheProperties:o.Object.prototype.cacheProperties.concat("points"),initialize:function(t,e){e=e||{},this.points=t||[],this.callSuper("initialize",e),this._setPositionDimensions(e)},_projectStrokeOnPoints:function(){return e(this.points,this,!0)},_setPositionDimensions:function(t){var e,i=this._calcDimensions(t),n=this.exactBoundingBox?this.strokeWidth:0;this.width=i.width-n,this.height=i.height-n,t.fromSVG||(e=this.translateToGivenOrigin({x:i.left-this.strokeWidth/2+n/2,y:i.top-this.strokeWidth/2+n/2},"left","top",this.originX,this.originY)),void 0===t.left&&(this.left=t.fromSVG?i.left:e.x),void 0===t.top&&(this.top=t.fromSVG?i.top:e.y),this.pathOffset={x:i.left+this.width/2+n/2,y:i.top+this.height/2+n/2}},_calcDimensions:function(){var t=this.exactBoundingBox?this._projectStrokeOnPoints():this.points,e=n(t,"x")||0,i=n(t,"y")||0;return{left:e,top:i,width:(r(t,"x")||0)-e,height:(r(t,"y")||0)-i}},toObject:function(t){return s(this.callSuper("toObject",t),{points:this.points.concat()})},_toSVG:function(){for(var t=[],e=this.pathOffset.x,i=this.pathOffset.y,n=o.Object.NUM_FRACTION_DIGITS,r=0,s=this.points.length;r<s;r++)t.push(a(this.points[r].x-e,n),",",a(this.points[r].y-i,n)," ");return["<"+this.type+" ","COMMON_PARTS",'points="',t.join(""),'" />\n']},commonRender:function(t){var e,i=this.points.length,n=this.pathOffset.x,r=this.pathOffset.y;if(!i||isNaN(this.points[i-1].y))return!1;t.beginPath(),t.moveTo(this.points[0].x-n,this.points[0].y-r);for(var s=0;s<i;s++)e=this.points[s],t.lineTo(e.x-n,e.y-r);return!0},_render:function(t){this.commonRender(t)&&this._renderPaintInOrder(t)},complexity:function(){return this.get("points").length}}),o.Polyline.ATTRIBUTE_NAMES=o.SHARED_ATTRIBUTES.concat(),o.Polyline.fromElementGenerator=function(r){return function(t,e,i){if(!t)return e(null);i=i||{};var n=o.parsePointsAttribute(t.getAttribute("points")),t=o.parseAttributes(t,o[r].ATTRIBUTE_NAMES);t.fromSVG=!0,e(new o[r](n,s(t,i)))}},o.Polyline.fromElement=o.Polyline.fromElementGenerator("Polyline"),o.Polyline.fromObject=function(t,e){return o.Object._fromObject("Polyline",t,e,"points")})}(i),function(t){"use strict";var i=t.fabric||(t.fabric={}),e=i.util.projectStrokeOnPoints;i.Polygon?i.warn("fabric.Polygon is already defined"):(i.Polygon=i.util.createClass(i.Polyline,{type:"polygon",_projectStrokeOnPoints:function(){return e(this.points,this)},_render:function(t){this.commonRender(t)&&(t.closePath(),this._renderPaintInOrder(t))}}),i.Polygon.ATTRIBUTE_NAMES=i.SHARED_ATTRIBUTES.concat(),i.Polygon.fromElement=i.Polyline.fromElementGenerator("Polygon"),i.Polygon.fromObject=function(t,e){i.Object._fromObject("Polygon",t,e,"points")})}(i),function(t){"use strict";var f=t.fabric||(t.fabric={}),d=f.util.array.min,g=f.util.array.max,n=f.util.object.extend,i=f.util.object.clone,e=f.util.toFixed;f.Path?f.warn("fabric.Path is already defined"):(f.Path=f.util.createClass(f.Object,{type:"path",path:null,cacheProperties:f.Object.prototype.cacheProperties.concat("path","fillRule"),stateProperties:f.Object.prototype.stateProperties.concat("path"),initialize:function(t,e){delete(e=i(e||{})).path,this.callSuper("initialize",e),this._setPath(t||[],e)},_setPath:function(t,e){this.path=f.util.makePathSimpler(Array.isArray(t)?t:f.util.parsePath(t)),f.Polyline.prototype._setPositionDimensions.call(this,e||{})},_renderPathCommands:function(t){var e,i=0,n=0,r=0,s=0,o=0,a=0,h=-this.pathOffset.x,c=-this.pathOffset.y;t.beginPath();for(var l=0,u=this.path.length;l<u;++l)switch((e=this.path[l])[0]){case"L":r=e[1],s=e[2],t.lineTo(r+h,s+c);break;case"M":i=r=e[1],n=s=e[2],t.moveTo(r+h,s+c);break;case"C":r=e[5],s=e[6],o=e[3],a=e[4],t.bezierCurveTo(e[1]+h,e[2]+c,o+h,a+c,r+h,s+c);break;case"Q":t.quadraticCurveTo(e[1]+h,e[2]+c,e[3]+h,e[4]+c),r=e[3],s=e[4],o=e[1],a=e[2];break;case"z":case"Z":r=i,s=n,t.closePath()}},_render:function(t){this._renderPathCommands(t),this._renderPaintInOrder(t)},toString:function(){return"#<fabric.Path ("+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+" }>"},toObject:function(t){return n(this.callSuper("toObject",t),{path:this.path.map(function(t){return t.slice()})})},toDatalessObject:function(t){t=this.toObject(["sourcePath"].concat(t));return t.sourcePath&&delete t.path,t},_toSVG:function(){return["<path ","COMMON_PARTS",'d="',f.util.joinPath(this.path),'" stroke-linecap="round" ',"/>\n"]},_getOffsetTransform:function(){var t=f.Object.NUM_FRACTION_DIGITS;return" translate("+e(-this.pathOffset.x,t)+", "+e(-this.pathOffset.y,t)+")"},toClipPathSVG:function(t){var e=this._getOffsetTransform();return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},toSVG:function(t){var e=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},complexity:function(){return this.path.length},_calcDimensions:function(){for(var t,e,i=[],n=[],r=0,s=0,o=0,a=0,h=0,c=this.path.length;h<c;++h){switch((t=this.path[h])[0]){case"L":o=t[1],a=t[2],e=[];break;case"M":r=o=t[1],s=a=t[2],e=[];break;case"C":e=f.util.getBoundsOfCurve(o,a,t[1],t[2],t[3],t[4],t[5],t[6]),o=t[5],a=t[6];break;case"Q":e=f.util.getBoundsOfCurve(o,a,t[1],t[2],t[1],t[2],t[3],t[4]),o=t[3],a=t[4];break;case"z":case"Z":o=r,a=s}e.forEach(function(t){i.push(t.x),n.push(t.y)}),i.push(o),n.push(a)}var l=d(i)||0,u=d(n)||0;return{left:l,top:u,width:(g(i)||0)-l,height:(g(n)||0)-u}}}),f.Path.fromObject=function(i,n){var t;"string"==typeof i.sourcePath?(t=i.sourcePath,f.loadSVGFromURL(t,function(t){var e=t[0];e.setOptions(i),i.clipPath?f.util.enlivenObjects([i.clipPath],function(t){e.clipPath=t[0],n&&n(e)}):n&&n(e)})):f.Object._fromObject("Path",i,n,"path")},f.Path.ATTRIBUTE_NAMES=f.SHARED_ATTRIBUTES.concat(["d"]),f.Path.fromElement=function(t,e,i){t=f.parseAttributes(t,f.Path.ATTRIBUTE_NAMES);t.fromSVG=!0,e(new f.Path(t.d,n(t,i)))})}(i),function(t){"use strict";var o=t.fabric||(t.fabric={}),a=o.util.array.min,h=o.util.array.max;o.Group||(o.Group=o.util.createClass(o.Object,o.Collection,{type:"group",strokeWidth:0,subTargetCheck:!1,cacheProperties:[],useSetOnGroup:!1,initialize:function(t,e,i){e=e||{},this._objects=[],i&&this.callSuper("initialize",e),this._objects=t||[];for(var n=this._objects.length;n--;)this._objects[n].group=this;i?this._updateObjectsACoords():(t=e&&e.centerPoint,void 0!==e.originX&&(this.originX=e.originX),void 0!==e.originY&&(this.originY=e.originY),t||this._calcBounds(),this._updateObjectsCoords(t),delete e.centerPoint,this.callSuper("initialize",e)),this.setCoords()},_updateObjectsACoords:function(){for(var t=this._objects.length;t--;)this._objects[t].setCoords(!0)},_updateObjectsCoords:function(t){for(var t=t||this.getCenterPoint(),e=this._objects.length;e--;)this._updateObjectCoords(this._objects[e],t)},_updateObjectCoords:function(t,e){var i=t.left,n=t.top;t.set({left:i-e.x,top:n-e.y}),t.group=this,t.setCoords(!0)},toString:function(){return"#<fabric.Group: ("+this.complexity()+")>"},addWithUpdate:function(t){var e=!!this.group;return this._restoreObjectsState(),o.util.resetObjectTransform(this),t&&(e&&o.util.removeTransformFromObject(t,this.group.calcTransformMatrix()),this._objects.push(t),t.group=this,t._set("canvas",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.dirty=!0,e?this.group.addWithUpdate():this.setCoords(),this},removeWithUpdate:function(t){return this._restoreObjectsState(),o.util.resetObjectTransform(this),this.remove(t),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},_onObjectAdded:function(t){this.dirty=!0,t.group=this,t._set("canvas",this.canvas)},_onObjectRemoved:function(t){this.dirty=!0,delete t.group},_set:function(t,e){var i=this._objects.length;if(this.useSetOnGroup)for(;i--;)this._objects[i].setOnGroup(t,e);if("canvas"===t)for(;i--;)this._objects[i]._set(t,e);o.Object.prototype._set.call(this,t,e)},toObject:function(n){var r=this.includeDefaultValues,t=this._objects.filter(function(t){return!t.excludeFromExport}).map(function(t){var e=t.includeDefaultValues,i=(t.includeDefaultValues=r,t.toObject(n));return t.includeDefaultValues=e,i}),e=o.Object.prototype.toObject.call(this,n);return e.objects=t,e},toDatalessObject:function(n){var r,t=this.sourcePath,e=(t=t||(r=this.includeDefaultValues,this._objects.map(function(t){var e=t.includeDefaultValues,i=(t.includeDefaultValues=r,t.toDatalessObject(n));return t.includeDefaultValues=e,i})),o.Object.prototype.toDatalessObject.call(this,n));return e.objects=t,e},render:function(t){this._transformDone=!0,this.callSuper("render",t),this._transformDone=!1},shouldCache:function(){var t=o.Object.prototype.shouldCache.call(this);if(t)for(var e=0,i=this._objects.length;e<i;e++)if(this._objects[e].willDrawShadow())return this.ownCaching=!1;return t},willDrawShadow:function(){if(o.Object.prototype.willDrawShadow.call(this))return!0;for(var t=0,e=this._objects.length;t<e;t++)if(this._objects[t].willDrawShadow())return!0;return!1},isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},drawObject:function(t){for(var e=0,i=this._objects.length;e<i;e++)this._objects[e].render(t);this._drawClipPath(t,this.clipPath)},isCacheDirty:function(t){if(this.callSuper("isCacheDirty",t))return!0;if(this.statefullCache)for(var e,i,n=0,r=this._objects.length;n<r;n++)if(this._objects[n].isCacheDirty(!0))return this._cacheCanvas&&(e=this.cacheWidth/this.zoomX,i=this.cacheHeight/this.zoomY,this._cacheContext.clearRect(-e/2,-i/2,e,i)),!0;return!1},_restoreObjectsState:function(){var e=this.calcOwnMatrix();return this._objects.forEach(function(t){o.util.addTransformToObject(t,e),delete t.group,t.setCoords()}),this},destroy:function(){return this._objects.forEach(function(t){t.set("dirty",!0)}),this._restoreObjectsState()},dispose:function(){this.callSuper("dispose"),this.forEachObject(function(t){t.dispose&&t.dispose()}),this._objects=[]},toActiveSelection:function(){var t,e,i,n;if(this.canvas)return t=this._objects,e=this.canvas,this._objects=[],delete(i=this.toObject()).objects,(n=new o.ActiveSelection([])).set(i),n.type="activeSelection",e.remove(this),t.forEach(function(t){t.group=n,t.dirty=!0,e.add(t)}),n.canvas=e,n._objects=t,(e._activeObject=n).setCoords(),n},ungroupOnCanvas:function(){return this._restoreObjectsState()},setObjectsCoords:function(){return this.forEachObject(function(t){t.setCoords(!0)}),this},_calcBounds:function(t){for(var e,i,n,r,s=[],o=[],a=["tr","br","bl","tl"],h=0,c=this._objects.length,l=a.length;h<c;++h){for(n=(e=this._objects[h]).calcACoords(),r=0;r<l;r++)s.push(n[i=a[r]].x),o.push(n[i].y);e.aCoords=n}this._getBounds(s,o,t)},_getBounds:function(t,e,i){var n=new o.Point(a(t),a(e)),t=new o.Point(h(t),h(e)),e=n.y||0,r=n.x||0,s=t.x-n.x||0,t=t.y-n.y||0;this.width=s,this.height=t,i||this.setPositionByOrigin({x:r,y:e},"left","top")},_toSVG:function(t){for(var e=["<g ","COMMON_PARTS"," >\n"],i=0,n=this._objects.length;i<n;i++)e.push("\t\t",this._objects[i].toSVG(t));return e.push("</g>\n"),e},getSvgStyles:function(){var t=void 0!==this.opacity&&1!==this.opacity?"opacity: "+this.opacity+";":"",e=this.visible?"":" visibility: hidden;";return[t,this.getSvgFilter(),e].join("")},toClipPathSVG:function(t){for(var e=[],i=0,n=this._objects.length;i<n;i++)e.push("\t",this._objects[i].toClipPathSVG(t));return this._createBaseClipPathSVGMarkup(e,{reviver:t})}}),o.Group.fromObject=function(i,n){var r=i.objects,s=o.util.object.clone(i,!0);delete s.objects,"string"==typeof r?o.loadSVGFromURL(r,function(t){var e=o.util.groupSVGElements(t,i,r),t=s.clipPath;delete s.clipPath,e.set(s),t?o.util.enlivenObjects([t],function(t){e.clipPath=t[0],n&&n(e)}):n&&n(e)}):o.util.enlivenObjects(r,function(t){o.util.enlivenObjectEnlivables(i,s,function(){n&&n(new o.Group(t,s,!0))})})})}(i),function(t){"use strict";var n=t.fabric||(t.fabric={});n.ActiveSelection||(n.ActiveSelection=n.util.createClass(n.Group,{type:"activeSelection",initialize:function(t,e){e=e||{},this._objects=t||[];for(var i=this._objects.length;i--;)this._objects[i].group=this;e.originX&&(this.originX=e.originX),e.originY&&(this.originY=e.originY),this._calcBounds(),this._updateObjectsCoords(),n.Object.prototype.initialize.call(this,e),this.setCoords()},toGroup:function(){var t=this._objects.concat(),e=(this._objects=[],n.Object.prototype.toObject.call(this)),i=new n.Group([]);return delete e.type,i.set(e),t.forEach(function(t){t.canvas.remove(t),t.group=i}),i._objects=t,this.canvas&&((e=this.canvas).add(i),(e._activeObject=i).setCoords()),i},onDeselect:function(){return this.destroy(),!1},toString:function(){return"#<fabric.ActiveSelection: ("+this.complexity()+")>"},shouldCache:function(){return!1},isOnACache:function(){return!1},_renderControls:function(t,e,i){t.save(),t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper("_renderControls",t,e),void 0===(i=i||{}).hasControls&&(i.hasControls=!1),i.forActiveSelection=!0;for(var n=0,r=this._objects.length;n<r;n++)this._objects[n]._renderControls(t,i);t.restore()}}),n.ActiveSelection.fromObject=function(e,i){n.util.enlivenObjects(e.objects,function(t){delete e.objects,i&&i(new n.ActiveSelection(t,e,!0))})})}(i),function(t){"use strict";var n=z.util.object.extend;t.fabric||(t.fabric={}),t.fabric.Image?z.warn("fabric.Image is already defined."):(z.Image=z.util.createClass(z.Object,{type:"image",strokeWidth:0,srcFromAttribute:!1,_lastScaleX:1,_lastScaleY:1,_filterScalingX:1,_filterScalingY:1,minimumScaleTrigger:.5,stateProperties:z.Object.prototype.stateProperties.concat("cropX","cropY"),cacheProperties:z.Object.prototype.cacheProperties.concat("cropX","cropY"),cacheKey:"",cropX:0,cropY:0,imageSmoothing:!0,initialize:function(t,e){e=e||{},this.filters=[],this.cacheKey="texture"+z.Object.__uid++,this.callSuper("initialize",e),this._initElement(t,e)},getElement:function(){return this._element||{}},setElement:function(t,e){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._element=t,this._originalElement=t,this._initConfig(e),0!==this.filters.length&&this.applyFilters(),this.resizeFilter&&this.applyResizeFilters(),this},removeTexture:function(t){var e=z.filterBackend;e&&e.evictCachesForKey&&e.evictCachesForKey(t)},dispose:function(){this.callSuper("dispose"),this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._cacheContext=void 0,["_originalElement","_element","_filteredEl","_cacheCanvas"].forEach(function(t){z.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this))},getCrossOrigin:function(){return this._originalElement&&(this._originalElement.crossOrigin||null)},getOriginalSize:function(){var t=this.getElement();return{width:t.naturalWidth||t.width,height:t.naturalHeight||t.height}},_stroke:function(t){var e,i;this.stroke&&0!==this.strokeWidth&&(e=this.width/2,i=this.height/2,t.beginPath(),t.moveTo(-e,-i),t.lineTo(e,-i),t.lineTo(e,i),t.lineTo(-e,i),t.lineTo(-e,-i),t.closePath())},toObject:function(t){var e=[],t=(this.filters.forEach(function(t){t&&e.push(t.toObject())}),n(this.callSuper("toObject",["cropX","cropY"].concat(t)),{src:this.getSrc(),crossOrigin:this.getCrossOrigin(),filters:e}));return this.resizeFilter&&(t.resizeFilter=this.resizeFilter.toObject()),t},hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},_toSVG:function(){var t,e,i=[],n=[],r=this._element,s=-this.width/2,o=-this.height/2,a="",h="";return r?(this.hasCrop()&&(e=z.Object.__uid++,i.push('<clipPath id="imageCrop_'+e+'">\n','\t<rect x="'+s+'" y="'+o+'" width="'+this.width+'" height="'+this.height+'" />\n',"</clipPath>\n"),a=' clip-path="url(#imageCrop_'+e+')" '),this.imageSmoothing||(h='" image-rendering="optimizeSpeed'),n.push("\t<image ","COMMON_PARTS",'xlink:href="',this.getSvgSrc(!0),'" x="',s-this.cropX,'" y="',o-this.cropY,'" width="',r.width||r.naturalWidth,'" height="',r.height||r.height,h,'"',a,"></image>\n"),(this.stroke||this.strokeDashArray)&&(e=this.fill,this.fill=null,t=["\t<rect ",'x="',s,'" y="',o,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n'],this.fill=e),"fill"!==this.paintFirst?i.concat(t,n):i.concat(n,t)):[]},getSrc:function(t){t=t?this._element:this._originalElement;return t?t.toDataURL?t.toDataURL():this.srcFromAttribute?t.getAttribute("src"):t.src:this.src||""},setSrc:function(t,i,n){return z.util.loadImage(t,function(t,e){this.setElement(t,n),this._setWidthHeight(),i&&i(this,e)},this,n&&n.crossOrigin),this},toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>'},applyResizeFilters:function(){var t,e,i,n=this.resizeFilter,r=this.minimumScaleTrigger,s=this.getTotalObjectScaling(),o=s.scaleX,s=s.scaleY,a=this._filteredEl||this._originalElement;this.group&&this.set("dirty",!0),!n||r<o&&r<s?(this._element=a,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=o,this._lastScaleY=s):(z.filterBackend||(z.filterBackend=z.initFilterBackend()),r=z.util.createCanvasElement(),t=this._filteredEl?this.cacheKey+"_filtered":this.cacheKey,e=a.width,i=a.height,r.width=e,r.height=i,this._element=r,this._lastScaleX=n.scaleX=o,this._lastScaleY=n.scaleY=s,z.filterBackend.applyFilters([n],a,e,i,this._element,t),this._filterScalingX=r.width/this._originalElement.width,this._filterScalingY=r.height/this._originalElement.height)},applyFilters:function(t){var e,i,n;return t=(t=t||this.filters||[]).filter(function(t){return t&&!t.isNeutralState()}),this.set("dirty",!0),this.removeTexture(this.cacheKey+"_filtered"),0===t.length?(this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1):(e=(i=this._originalElement).naturalWidth||i.width,i=i.naturalHeight||i.height,this._element===this._originalElement?((n=z.util.createCanvasElement()).width=e,n.height=i,this._element=n,this._filteredEl=n):(this._element=this._filteredEl,this._filteredEl.getContext("2d").clearRect(0,0,e,i),this._lastScaleX=1,this._lastScaleY=1),z.filterBackend||(z.filterBackend=z.initFilterBackend()),z.filterBackend.applyFilters(t,this._originalElement,e,i,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height)),this},_render:function(t){z.util.setImageSmoothing(t,this.imageSmoothing),!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(t),this._renderPaintInOrder(t)},drawCacheOnCanvas:function(t){z.util.setImageSmoothing(t,this.imageSmoothing),z.Object.prototype.drawCacheOnCanvas.call(this,t)},shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(t){var e,i,n,r,s,o,a,h,c,l,u,f,d,g,p,m=this._element;m&&(e=this._filterScalingX,i=this._filterScalingY,g=this.width,n=this.height,r=Math.min,s=(o=Math.max)(this.cropX,0),o=o(this.cropY,0),p=m.naturalWidth||m.width,a=m.naturalHeight||m.height,c=o*i,l=r(g*e,p-(h=s*e)),u=r(n*i,a-c),f=-g/2,d=-n/2,g=r(g,p/e-s),p=r(n,a/i-o),m&&t.drawImage(m,h,c,l,u,f,d,g,p))},_needsResize:function(){var t=this.getTotalObjectScaling();return t.scaleX!==this._lastScaleX||t.scaleY!==this._lastScaleY},_resetWidthHeight:function(){this.set(this.getOriginalSize())},_initElement:function(t,e){this.setElement(z.util.getById(t),e),z.util.addClass(this.getElement(),z.Image.CSS_CANVAS)},_initConfig:function(t){this.setOptions(t=t||{}),this._setWidthHeight(t)},_initFilters:function(t,e){t&&t.length?z.util.enlivenObjects(t,function(t){e&&e(t)},"fabric.Image.filters"):e&&e()},_setWidthHeight:function(t){t=t||{};var e=this.getElement();this.width=t.width||e.naturalWidth||e.width||0,this.height=t.height||e.naturalHeight||e.height||0},parsePreserveAspectRatioAttribute:function(){var t,e=z.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||""),i=this._element.width,n=this._element.height,r=1,s=1,o=0,a=0,h=0,c=0,l=this.width,u=this.height,f={width:l,height:u};return!e||"none"===e.alignX&&"none"===e.alignY?(r=l/i,s=u/n):("meet"===e.meetOrSlice&&(t=(l-i*(r=s=z.util.findScaleToFit(this._element,f)))/2,"Min"===e.alignX&&(o=-t),"Max"===e.alignX&&(o=t),t=(u-n*s)/2,"Min"===e.alignY&&(a=-t),"Max"===e.alignY&&(a=t)),"slice"===e.meetOrSlice&&(t=i-l/(r=s=z.util.findScaleToCover(this._element,f)),"Mid"===e.alignX&&(h=t/2),"Max"===e.alignX&&(h=t),t=n-u/s,"Mid"===e.alignY&&(c=t/2),"Max"===e.alignY&&(c=t),i=l/r,n=u/s)),{width:i,height:n,scaleX:r,scaleY:s,offsetLeft:o,offsetTop:a,cropX:h,cropY:c}}}),z.Image.CSS_CANVAS="canvas-img",z.Image.prototype.getSvgSrc=z.Image.prototype.getSrc,z.Image.fromObject=function(t,i){var n=z.util.object.clone(t);z.util.loadImage(n.src,function(e,t){t?i&&i(null,!0):z.Image.prototype._initFilters.call(n,n.filters,function(t){n.filters=t||[],z.Image.prototype._initFilters.call(n,[n.resizeFilter],function(t){n.resizeFilter=t[0],z.util.enlivenObjectEnlivables(n,n,function(){var t=new z.Image(e,n);i(t,!1)})})})},null,n.crossOrigin)},z.Image.fromURL=function(t,i,n){z.util.loadImage(t,function(t,e){i&&i(new z.Image(t,n),e)},null,n&&n.crossOrigin)},z.Image.ATTRIBUTE_NAMES=z.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")),z.Image.fromElement=function(t,e,i){t=z.parseAttributes(t,z.Image.ATTRIBUTE_NAMES);z.Image.fromURL(t["xlink:href"],e,n(i?z.util.object.clone(i):{},t))})}(i),z.util.object.extend(z.Object.prototype,{_getAngleValueForStraighten:function(){var t=this.angle%360;return 0<t?90*Math.round((t-1)/90):90*Math.round(t/90)},straighten:function(){return this.rotate(this._getAngleValueForStraighten())},fxStraighten:function(t){function e(){}var i=(t=t||{}).onComplete||e,n=t.onChange||e,r=this;return z.util.animate({target:this,startValue:this.get("angle"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(t){r.rotate(t),n()},onComplete:function(){r.setCoords(),i()}})}}),z.util.object.extend(z.StaticCanvas.prototype,{straightenObject:function(t){return t.straighten(),this.requestRenderAll(),this},fxStraightenObject:function(t){return t.fxStraighten({onChange:this.requestRenderAllBound})}}),function(){"use strict";function t(t){t&&t.tileSize&&(this.tileSize=t.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}z.isWebglSupported=function(t){if(z.isLikelyNode)return!1;t=t||z.WebglFilterBackend.prototype.tileSize;var e,i,n,r=document.createElement("canvas"),s=r.getContext("webgl")||r.getContext("experimental-webgl"),r=!1;if(s){z.maxTextureSize=s.getParameter(s.MAX_TEXTURE_SIZE);for(var r=z.maxTextureSize>=t,o=["highp","mediump","lowp"],a=0;a<3;a++)if(n=void 0,i="precision "+(i=o[a])+" float;\nvoid main(){}",n=(e=s).createShader(e.FRAGMENT_SHADER),e.shaderSource(n,i),e.compileShader(n),!!e.getShaderParameter(n,e.COMPILE_STATUS)){z.webGlPrecision=o[a];break}}return this.isSupported=r},(z.WebglFilterBackend=t).prototype={tileSize:2048,resources:{},setupGLContext:function(t,e){this.dispose(),this.createWebGLCanvas(t,e),this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(t,e)},chooseFastestCopyGLTo2DMethod:function(t,e){var i=void 0!==window.performance;try{new ImageData(1,1),n=!0}catch(t){n=!1}var n,r="undefined"!=typeof ArrayBuffer,s="undefined"!=typeof Uint8ClampedArray;i&&n&&r&&s&&(i=z.util.createCanvasElement(),n=new ArrayBuffer(t*e*4),z.forceGLPutImageData||(r={imageBuffer:n,destinationWidth:t,destinationHeight:e,targetCanvas:i},i.width=t,i.height=e,s=window.performance.now(),Ft.call(r,this.gl,r),t=window.performance.now()-s,s=window.performance.now(),It.call(r,this.gl,r),window.performance.now()-s<t)?(this.imageBuffer=n,this.copyGLTo2D=It):this.copyGLTo2D=Ft)},createWebGLCanvas:function(t,e){var i=z.util.createCanvasElement(),t=(i.width=t,i.height=e,{alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1}),e=i.getContext("webgl",t);(e=e||i.getContext("experimental-webgl",t))&&(e.clearColor(0,0,0,0),this.canvas=i,this.gl=e)},applyFilters:function(t,e,i,n,r,s){var o,a=this.gl,h=(s&&(o=this.getCachedTexture(s,e)),{originalWidth:e.width||e.originalWidth,originalHeight:e.height||e.originalHeight,sourceWidth:i,sourceHeight:n,destinationWidth:i,destinationHeight:n,context:a,sourceTexture:this.createTexture(a,i,n,!o&&e),targetTexture:this.createTexture(a,i,n),originalTexture:o||this.createTexture(a,i,n,!o&&e),passes:t.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:r}),s=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,s),t.forEach(function(t){t&&t.applyTo(h)}),Mt(h),this.copyGLTo2D(a,h),a.bindTexture(a.TEXTURE_2D,null),a.deleteTexture(h.sourceTexture),a.deleteTexture(h.targetTexture),a.deleteFramebuffer(s),r.getContext("2d").setTransform(1,0,0,1,0,0),h},dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},clearWebGLCaches:function(){this.programCache={},this.textureCache={}},createTexture:function(t,e,i,n){var r=t.createTexture();return t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),n?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,i,0,t.RGBA,t.UNSIGNED_BYTE,null),r},getCachedTexture:function(t,e){return this.textureCache[t]||(e=this.createTexture(this.gl,e.width,e.height,e),this.textureCache[t]=e)},evictCachesForKey:function(t){this.textureCache[t]&&(this.gl.deleteTexture(this.textureCache[t]),delete this.textureCache[t])},copyGLTo2D:Ft,captureGPUInfo:function(){var t,e,i,n;return this.gpuInfo||(t={renderer:"",vendor:""},(n=this.gl)&&((e=n.getExtension("WEBGL_debug_renderer_info"))&&(i=n.getParameter(e.UNMASKED_RENDERER_WEBGL),n=n.getParameter(e.UNMASKED_VENDOR_WEBGL),i&&(t.renderer=i.toLowerCase()),n&&(t.vendor=n.toLowerCase())),this.gpuInfo=t),t)}}}(),function(){"use strict";function t(){}function e(){}(z.Canvas2dFilterBackend=e).prototype={evictCachesForKey:t,dispose:t,clearWebGLCaches:t,resources:{},applyFilters:function(t,e,i,n,r){var s=r.getContext("2d");s.drawImage(e,0,0,i,n);var o={sourceWidth:i,sourceHeight:n,imageData:s.getImageData(0,0,i,n),originalEl:e,originalImageData:s.getImageData(0,0,i,n),canvasEl:r,ctx:s,filterBackend:this};return t.forEach(function(t){t.applyTo(o)}),o.imageData.width===i&&o.imageData.height===n||(r.width=o.imageData.width,r.height=o.imageData.height),s.putImageData(o.imageData,0,0),o}}}(),z.Image=z.Image||{},z.Image.filters=z.Image.filters||{},z.Image.filters.BaseFilter=z.util.createClass({type:"BaseFilter",vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:"precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",initialize:function(t){t&&this.setOptions(t)},setOptions:function(t){for(var e in t)this[e]=t[e]},createProgram:function(t,e,i){e=e||this.fragmentSource,i=i||this.vertexSource,"highp"!==z.webGlPrecision&&(e=e.replace(/precision highp float/g,"precision "+z.webGlPrecision+" float"));var n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,i),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error("Vertex shader compile error for "+this.type+": "+t.getShaderInfoLog(n));i=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(i,e),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw new Error("Fragment shader compile error for "+this.type+": "+t.getShaderInfoLog(i));e=t.createProgram();if(t.attachShader(e,n),t.attachShader(e,i),t.linkProgram(e),t.getProgramParameter(e,t.LINK_STATUS))return n=this.getAttributeLocations(t,e),(i=this.getUniformLocations(t,e)||{}).uStepW=t.getUniformLocation(e,"uStepW"),i.uStepH=t.getUniformLocation(e,"uStepH"),{program:e,attributeLocations:n,uniformLocations:i};throw new Error('Shader link error for "${this.type}" '+t.getProgramInfoLog(e))},getAttributeLocations:function(t,e){return{aPosition:t.getAttribLocation(e,"aPosition")}},getUniformLocations:function(){return{}},sendAttributeData:function(t,e,i){var e=e.aPosition,n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n),t.enableVertexAttribArray(e),t.vertexAttribPointer(e,2,t.FLOAT,!1,0,0),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW)},_setupFrameBuffer:function(t){var e,i,n=t.context;1<t.passes?(e=t.destinationWidth,i=t.destinationHeight,t.sourceWidth===e&&t.sourceHeight===i||(n.deleteTexture(t.targetTexture),t.targetTexture=t.filterBackend.createTexture(n,e,i)),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t.targetTexture,0)):(n.bindFramebuffer(n.FRAMEBUFFER,null),n.finish())},_swapTextures:function(t){t.passes--,t.pass++;var e=t.targetTexture;t.targetTexture=t.sourceTexture,t.sourceTexture=e},isNeutralState:function(){var t=this.mainParameter,e=z.Image.filters[this.type].prototype;if(t){if(Array.isArray(e[t])){for(var i=e[t].length;i--;)if(this[t][i]!==e[t][i])return!1;return!0}return e[t]===this[t]}return!1},applyTo:function(t){t.webgl?(this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},retrieveShader:function(t){return t.programCache.hasOwnProperty(this.type)||(t.programCache[this.type]=this.createProgram(t.context)),t.programCache[this.type]},applyToWebGL:function(t){var e=t.context,i=this.retrieveShader(t);0===t.pass&&t.originalTexture?e.bindTexture(e.TEXTURE_2D,t.originalTexture):e.bindTexture(e.TEXTURE_2D,t.sourceTexture),e.useProgram(i.program),this.sendAttributeData(e,i.attributeLocations,t.aPosition),e.uniform1f(i.uniformLocations.uStepW,1/t.sourceWidth),e.uniform1f(i.uniformLocations.uStepH,1/t.sourceHeight),this.sendUniformData(e,i.uniformLocations),e.viewport(0,0,t.destinationWidth,t.destinationHeight),e.drawArrays(e.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(t,e,i){t.activeTexture(i),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE0)},unbindAdditionalTexture:function(t,e){t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(t){this[this.mainParameter]=t},sendUniformData:function(){},createHelpLayer:function(t){var e;t.helpLayer||((e=document.createElement("canvas")).width=t.sourceWidth,e.height=t.sourceHeight,t.helpLayer=e)},toObject:function(){var t={type:this.type},e=this.mainParameter;return e&&(t[e]=this[e]),t},toJSON:function(){return this.toObject()}}),z.Image.filters.BaseFilter.fromObject=function(t,e){t=new z.Image.filters[t.type](t);return e&&e(t),t},function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.ColorMatrix=i(e.BaseFilter,{type:"ColorMatrix",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:"matrix",colorsOnly:!0,initialize:function(t){this.callSuper("initialize",t),this.matrix=this.matrix.slice(0)},applyTo2d:function(t){for(var e,i,n,r,s=t.imageData.data,o=s.length,a=this.matrix,h=this.colorsOnly,c=0;c<o;c+=4)e=s[c],i=s[c+1],n=s[c+2],h?(s[c]=e*a[0]+i*a[1]+n*a[2]+255*a[4],s[c+1]=e*a[5]+i*a[6]+n*a[7]+255*a[9],s[c+2]=e*a[10]+i*a[11]+n*a[12]+255*a[14]):(r=s[c+3],s[c]=e*a[0]+i*a[1]+n*a[2]+r*a[3]+255*a[4],s[c+1]=e*a[5]+i*a[6]+n*a[7]+r*a[8]+255*a[9],s[c+2]=e*a[10]+i*a[11]+n*a[12]+r*a[13]+255*a[14],s[c+3]=e*a[15]+i*a[16]+n*a[17]+r*a[18]+255*a[19])},getUniformLocations:function(t,e){return{uColorMatrix:t.getUniformLocation(e,"uColorMatrix"),uConstants:t.getUniformLocation(e,"uConstants")}},sendUniformData:function(t,e){var i=this.matrix,n=[i[0],i[1],i[2],i[3],i[5],i[6],i[7],i[8],i[10],i[11],i[12],i[13],i[15],i[16],i[17],i[18]],i=[i[4],i[9],i[14],i[19]];t.uniformMatrix4fv(e.uColorMatrix,!1,n),t.uniform4fv(e.uConstants,i)}}),t.Image.filters.ColorMatrix.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Brightness=i(e.BaseFilter,{type:"Brightness",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",brightness:0,mainParameter:"brightness",applyTo2d:function(t){if(0!==this.brightness)for(var e=t.imageData.data,i=e.length,n=Math.round(255*this.brightness),r=0;r<i;r+=4)e[r]=e[r]+n,e[r+1]=e[r+1]+n,e[r+2]=e[r+2]+n},getUniformLocations:function(t,e){return{uBrightness:t.getUniformLocation(e,"uBrightness")}},sendUniformData:function(t,e){t.uniform1f(e.uBrightness,this.brightness)}}),t.Image.filters.Brightness.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.util.object.extend,i=t.Image.filters,n=t.util.createClass;i.Convolute=n(i.BaseFilter,{type:"Convolute",opaque:!1,matrix:[0,0,0,0,1,0,0,0,0],fragmentSource:{Convolute_3_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_3_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_5_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_5_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_7_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_7_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_9_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_9_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"},retrieveShader:function(t){var e=Math.sqrt(this.matrix.length),e=this.type+"_"+e+"_"+(this.opaque?1:0),i=this.fragmentSource[e];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyTo2d:function(t){for(var e,i,n,r,s,o,a,h,c,l,u,f=t.imageData,d=f.data,g=this.matrix,p=Math.round(Math.sqrt(g.length)),m=Math.floor(p/2),v=f.width,y=f.height,f=t.ctx.createImageData(v,y),_=f.data,x=this.opaque?1:0,b=0;b<y;b++)for(c=0;c<v;c++){for(s=4*(b*v+c),u=r=n=i=e=0;u<p;u++)for(l=0;l<p;l++)o=c+l-m,(a=b+u-m)<0||y<=a||o<0||v<=o||(h=g[u*p+l],e+=d[a=4*(a*v+o)]*h,i+=d[1+a]*h,n+=d[2+a]*h,x||(r+=d[3+a]*h));_[s]=e,_[1+s]=i,_[2+s]=n,_[3+s]=x?d[3+s]:r}t.imageData=f},getUniformLocations:function(t,e){return{uMatrix:t.getUniformLocation(e,"uMatrix"),uOpaque:t.getUniformLocation(e,"uOpaque"),uHalfSize:t.getUniformLocation(e,"uHalfSize"),uSize:t.getUniformLocation(e,"uSize")}},sendUniformData:function(t,e){t.uniform1fv(e.uMatrix,this.matrix)},toObject:function(){return e(this.callSuper("toObject"),{opaque:this.opaque,matrix:this.matrix})}}),t.Image.filters.Convolute.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Grayscale=i(e.BaseFilter,{type:"Grayscale",fragmentSource:{average:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",lightness:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",luminosity:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"},mode:"average",mainParameter:"mode",applyTo2d:function(t){for(var e,i=t.imageData.data,n=i.length,r=this.mode,s=0;s<n;s+=4)"average"===r?e=(i[s]+i[s+1]+i[s+2])/3:"lightness"===r?e=(Math.min(i[s],i[s+1],i[s+2])+Math.max(i[s],i[s+1],i[s+2]))/2:"luminosity"===r&&(e=.21*i[s]+.72*i[s+1]+.07*i[s+2]),i[s]=e,i[s+1]=e,i[s+2]=e},retrieveShader:function(t){var e,i=this.type+"_"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.fragmentSource[this.mode],t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},getUniformLocations:function(t,e){return{uMode:t.getUniformLocation(e,"uMode")}},sendUniformData:function(t,e){t.uniform1i(e.uMode,1)},isNeutralState:function(){return!1}}),t.Image.filters.Grayscale.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Invert=i(e.BaseFilter,{type:"Invert",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",invert:!0,mainParameter:"invert",applyTo2d:function(t){for(var e=t.imageData.data,i=e.length,n=0;n<i;n+=4)e[n]=255-e[n],e[n+1]=255-e[n+1],e[n+2]=255-e[n+2]},isNeutralState:function(){return!this.invert},getUniformLocations:function(t,e){return{uInvert:t.getUniformLocation(e,"uInvert")}},sendUniformData:function(t,e){t.uniform1i(e.uInvert,this.invert)}}),t.Image.filters.Invert.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.util.object.extend,i=t.Image.filters,n=t.util.createClass;i.Noise=n(i.BaseFilter,{type:"Noise",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",mainParameter:"noise",noise:0,applyTo2d:function(t){if(0!==this.noise)for(var e,i=t.imageData.data,n=(i.length,this.noise),r=0,s=i.length;r<s;r+=4)e=(.5-Math.random())*n,i[r]+=e,i[r+1]+=e,i[r+2]+=e},getUniformLocations:function(t,e){return{uNoise:t.getUniformLocation(e,"uNoise"),uSeed:t.getUniformLocation(e,"uSeed")}},sendUniformData:function(t,e){t.uniform1f(e.uNoise,this.noise/255),t.uniform1f(e.uSeed,Math.random())},toObject:function(){return e(this.callSuper("toObject"),{noise:this.noise})}}),t.Image.filters.Noise.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Pixelate=i(e.BaseFilter,{type:"Pixelate",blocksize:4,mainParameter:"blocksize",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",applyTo2d:function(t){for(var e,i,n,r,s,o,a,h,c,l,t=t.imageData,u=t.data,f=t.height,d=t.width,g=0;g<f;g+=this.blocksize)for(i=0;i<d;i+=this.blocksize)for(n=u[e=4*g*d+4*i],r=u[1+e],s=u[2+e],o=u[3+e],c=Math.min(g+this.blocksize,f),l=Math.min(i+this.blocksize,d),a=g;a<c;a++)for(h=i;h<l;h++)u[e=4*a*d+4*h]=n,u[1+e]=r,u[2+e]=s,u[3+e]=o},isNeutralState:function(){return 1===this.blocksize},getUniformLocations:function(t,e){return{uBlocksize:t.getUniformLocation(e,"uBlocksize"),uStepW:t.getUniformLocation(e,"uStepW"),uStepH:t.getUniformLocation(e,"uStepH")}},sendUniformData:function(t,e){t.uniform1f(e.uBlocksize,this.blocksize)}}),t.Image.filters.Pixelate.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var c=t.fabric||(t.fabric={}),e=c.util.object.extend,t=c.Image.filters,i=c.util.createClass;t.RemoveColor=i(t.BaseFilter,{type:"RemoveColor",color:"#FFFFFF",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",distance:.02,useAlpha:!1,applyTo2d:function(t){for(var e,i,n,r=t.imageData.data,t=255*this.distance,s=new c.Color(this.color).getSource(),o=[s[0]-t,s[1]-t,s[2]-t],a=[s[0]+t,s[1]+t,s[2]+t],h=0;h<r.length;h+=4)e=r[h],i=r[h+1],n=r[h+2],o[0]<e&&o[1]<i&&o[2]<n&&e<a[0]&&i<a[1]&&n<a[2]&&(r[h+3]=0)},getUniformLocations:function(t,e){return{uLow:t.getUniformLocation(e,"uLow"),uHigh:t.getUniformLocation(e,"uHigh")}},sendUniformData:function(t,e){var i=new c.Color(this.color).getSource(),n=parseFloat(this.distance),r=[0+i[0]/255-n,0+i[1]/255-n,0+i[2]/255-n,1],i=[i[0]/255+n,i[1]/255+n,i[2]/255+n,1];t.uniform4fv(e.uLow,r),t.uniform4fv(e.uHigh,i)},toObject:function(){return e(this.callSuper("toObject"),{color:this.color,distance:this.distance})}}),c.Image.filters.RemoveColor.fromObject=c.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var e,i=t.fabric||(t.fabric={}),n=i.Image.filters,r=i.util.createClass,s={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(e in s)n[e]=r(n.ColorMatrix,{type:e,matrix:s[e],mainParameter:!1,colorsOnly:!0}),i.Image.filters[e].fromObject=i.Image.filters.BaseFilter.fromObject}(i),function(){"use strict";var u=(true?i:0).fabric,t=u.Image.filters,e=u.util.createClass;t.BlendColor=e(t.BaseFilter,{type:"BlendColor",color:"#F95C63",mode:"multiply",alpha:1,fragmentSource:{multiply:"gl_FragColor.rgb *= uColor.rgb;\n",screen:"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",add:"gl_FragColor.rgb += uColor.rgb;\n",diff:"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",subtract:"gl_FragColor.rgb -= uColor.rgb;\n",lighten:"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",darken:"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",exclusion:"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",overlay:"if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",tint:"gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"},buildSource:function(t){return"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n"+this.fragmentSource[t]+"}\n}"},retrieveShader:function(t){var e,i=this.type+"_"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.buildSource(this.mode),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},applyTo2d:function(t){for(var e,i,n,r=t.imageData.data,s=r.length,o=1-this.alpha,t=new u.Color(this.color).getSource(),a=t[0]*this.alpha,h=t[1]*this.alpha,c=t[2]*this.alpha,l=0;l<s;l+=4)switch(e=r[l],i=r[l+1],n=r[l+2],this.mode){case"multiply":r[l]=e*a/255,r[l+1]=i*h/255,r[l+2]=n*c/255;break;case"screen":r[l]=255-(255-e)*(255-a)/255,r[l+1]=255-(255-i)*(255-h)/255,r[l+2]=255-(255-n)*(255-c)/255;break;case"add":r[l]=e+a,r[l+1]=i+h,r[l+2]=n+c;break;case"diff":case"difference":r[l]=Math.abs(e-a),r[l+1]=Math.abs(i-h),r[l+2]=Math.abs(n-c);break;case"subtract":r[l]=e-a,r[l+1]=i-h,r[l+2]=n-c;break;case"darken":r[l]=Math.min(e,a),r[l+1]=Math.min(i,h),r[l+2]=Math.min(n,c);break;case"lighten":r[l]=Math.max(e,a),r[l+1]=Math.max(i,h),r[l+2]=Math.max(n,c);break;case"overlay":r[l]=a<128?2*e*a/255:255-2*(255-e)*(255-a)/255,r[l+1]=h<128?2*i*h/255:255-2*(255-i)*(255-h)/255,r[l+2]=c<128?2*n*c/255:255-2*(255-n)*(255-c)/255;break;case"exclusion":r[l]=a+e-2*a*e/255,r[l+1]=h+i-2*h*i/255,r[l+2]=c+n-2*c*n/255;break;case"tint":r[l]=a+e*o,r[l+1]=h+i*o,r[l+2]=c+n*o}},getUniformLocations:function(t,e){return{uColor:t.getUniformLocation(e,"uColor")}},sendUniformData:function(t,e){var i=new u.Color(this.color).getSource();i[0]=this.alpha*i[0]/255,i[1]=this.alpha*i[1]/255,i[2]=this.alpha*i[2]/255,i[3]=this.alpha,t.uniform4fv(e.uColor,i)},toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),u.Image.filters.BlendColor.fromObject=u.Image.filters.BaseFilter.fromObject}(),function(){"use strict";var v=(true?i:0).fabric,t=v.Image.filters,e=v.util.createClass;t.BlendImage=e(t.BaseFilter,{type:"BlendImage",image:null,mode:"multiply",alpha:1,vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:{multiply:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",mask:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"},retrieveShader:function(t){var e=this.type+"_"+this.mode,i=this.fragmentSource[this.mode];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyToWebGL:function(t){var e=t.context,i=this.createTexture(t.filterBackend,this.image);this.bindAdditionalTexture(e,i,e.TEXTURE1),this.callSuper("applyToWebGL",t),this.unbindAdditionalTexture(e,e.TEXTURE1)},createTexture:function(t,e){return t.getCachedTexture(e.cacheKey,e._element)},calculateMatrix:function(){var t=this.image,e=t._element.width,i=t._element.height;return[1/t.scaleX,0,0,0,1/t.scaleY,0,-t.left/e,-t.top/i,1]},applyTo2d:function(t){var e,i,n,r,s,o,a,h,c,l=t.imageData,t=t.filterBackend.resources,u=l.data,f=u.length,d=l.width,l=l.height,g=this.image;t.blendImage||(t.blendImage=v.util.createCanvasElement()),c=(t=t.blendImage).getContext("2d"),t.width!==d||t.height!==l?(t.width=d,t.height=l):c.clearRect(0,0,d,l),c.setTransform(g.scaleX,0,0,g.scaleY,g.left,g.top),c.drawImage(g._element,0,0,d,l);for(var p=c.getImageData(0,0,d,l).data,m=0;m<f;m+=4)switch(s=u[m],o=u[m+1],a=u[m+2],h=u[m+3],e=p[m],i=p[m+1],n=p[m+2],r=p[m+3],this.mode){case"multiply":u[m]=s*e/255,u[m+1]=o*i/255,u[m+2]=a*n/255,u[m+3]=h*r/255;break;case"mask":u[m+3]=r}},getUniformLocations:function(t,e){return{uTransformMatrix:t.getUniformLocation(e,"uTransformMatrix"),uImage:t.getUniformLocation(e,"uImage")}},sendUniformData:function(t,e){var i=this.calculateMatrix();t.uniform1i(e.uImage,1),t.uniformMatrix3fv(e.uTransformMatrix,!1,i)},toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),v.Image.filters.BlendImage.fromObject=function(i,n){v.Image.fromObject(i.image,function(t){var e=v.util.object.clone(i);e.image=t,n(new v.Image.filters.BlendImage(e))})}}(),function(t){"use strict";var m=t.fabric||(t.fabric={}),P=Math.pow,j=Math.floor,D=Math.sqrt,M=Math.abs,o=Math.round,n=Math.sin,F=Math.ceil,t=m.Image.filters,e=m.util.createClass;t.Resize=e(t.BaseFilter,{type:"Resize",resizeType:"hermite",scaleX:1,scaleY:1,lanczosLobes:3,getUniformLocations:function(t,e){return{uDelta:t.getUniformLocation(e,"uDelta"),uTaps:t.getUniformLocation(e,"uTaps")}},sendUniformData:function(t,e){t.uniform2fv(e.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),t.uniform1fv(e.uTaps,this.taps)},retrieveShader:function(t){var e=this.getFilterWindow(),i=this.type+"_"+e;return t.programCache.hasOwnProperty(i)||(e=this.generateShader(e),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},getFilterWindow:function(){var t=this.tempScale;return Math.ceil(this.lanczosLobes/t)},getTaps:function(){for(var t=this.lanczosCreate(this.lanczosLobes),e=this.tempScale,i=this.getFilterWindow(),n=new Array(i),r=1;r<=i;r++)n[r-1]=t(r*e);return n},generateShader:function(t){for(var e=new Array(t),i=this.fragmentSourceTOP,n=1;n<=t;n++)e[n-1]=n+".0 * uDelta";return i=(i=i+("uniform float uTaps["+t+"];\n")+"void main() {\n")+"  vec4 color = texture2D(uTexture, vTexCoord);\n"+"  float sum = 1.0;\n",e.forEach(function(t,e){i=(i+="  color += texture2D(uTexture, vTexCoord + "+t+") * uTaps["+e+"];\n")+"  color += texture2D(uTexture, vTexCoord - "+t+") * uTaps["+e+"];\n  sum += 2.0 * uTaps["+e+"];\n"}),i=i+"  gl_FragColor = color / sum;\n"+"}"},fragmentSourceTOP:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",applyTo:function(t){t.webgl?(t.passes++,this.width=t.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=t.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),t.destinationWidth=this.dW,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceWidth=t.destinationWidth,this.height=t.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),t.destinationHeight=this.dH,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceHeight=t.destinationHeight):this.applyTo2d(t)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(i){return function(t){var e;return i<=t||t<=-i?0:t<1.1920929e-7&&-1.1920929e-7<t?1:(e=(t*=Math.PI)/i,n(t)/t*n(e)/e)}},applyTo2d:function(t){var e,i=t.imageData,n=this.scaleX,r=this.scaleY,s=(this.rcpScaleX=1/n,this.rcpScaleY=1/r,i.width),i=i.height,n=o(s*n),r=o(i*r);"sliceHack"===this.resizeType?e=this.sliceByTwo(t,s,i,n,r):"hermite"===this.resizeType?e=this.hermiteFastResize(t,s,i,n,r):"bilinear"===this.resizeType?e=this.bilinearFiltering(t,s,i,n,r):"lanczos"===this.resizeType&&(e=this.lanczosResize(t,s,i,n,r)),t.imageData=e},sliceByTwo:function(t,e,i,n,r){var s,o,t=t.imageData,a=!1,h=!1,c=.5*e,l=.5*i,u=m.filterBackend.resources,f=0,d=0,g=e,p=0;for(u.sliceByTwo||(u.sliceByTwo=document.createElement("canvas")),((s=u.sliceByTwo).width<1.5*e||s.height<i)&&(s.width=1.5*e,s.height=i),(o=s.getContext("2d")).clearRect(0,0,1.5*e,i),o.putImageData(t,0,0),n=j(n),r=j(r);!a||!h;)i=l,n<j(.5*(e=c))?c=j(.5*c):(c=n,a=!0),r<j(.5*l)?l=j(.5*l):(l=r,h=!0),o.drawImage(s,f,d,e,i,g,p,c,l),f=g,d=p,p+=l;return o.getImageData(f,d,n,r)},lanczosResize:function(t,d,g,p,m){var v=t.imageData.data,y=t.ctx.createImageData(p,m),_=y.data,x=this.lanczosCreate(this.lanczosLobes),b=this.rcpScaleX,C=this.rcpScaleY,S=2/this.rcpScaleX,w=2/this.rcpScaleY,T=F(b*this.lanczosLobes/2),A=F(C*this.lanczosLobes/2),O={},E={},k={};return function t(e){var i,n,r,s,o,a,h,c,l,u;for(E.x=(e+.5)*b,k.x=j(E.x),i=0;i<m;i++){for(E.y=(i+.5)*C,k.y=j(E.y),c=h=a=o=s=0,n=k.x-T;n<=k.x+T;n++)if(!(n<0||d<=n)){l=j(1e3*M(n-E.x)),O[l]||(O[l]={});for(var f=k.y-A;f<=k.y+A;f++)f<0||g<=f||(u=j(1e3*M(f-E.y)),O[l][u]||(O[l][u]=x(D(P(l*S,2)+P(u*w,2))/1e3)),0<(u=O[l][u])&&(s+=u,o+=u*v[r=4*(f*d+n)],a+=u*v[r+1],h+=u*v[r+2],c+=u*v[r+3]))}_[r=4*(i*p+e)]=o/s,_[r+1]=a/s,_[r+2]=h/s,_[r+3]=c/s}return++e<p?t(e):y}(0)},bilinearFiltering:function(t,e,i,n,r){for(var s,o,a,h,c,l,u,f,d,g,p,m=0,v=this.rcpScaleX,y=this.rcpScaleY,_=4*(e-1),x=t.imageData.data,t=t.ctx.createImageData(n,r),b=t.data,C=0;C<r;C++)for(u=0;u<n;u++)for(f=v*u-(c=j(v*u)),d=y*C-(l=j(y*C)),p=4*(l*e+c),g=0;g<4;g++)s=x[p+g],o=x[4+p+g],a=x[p+_+g],h=x[p+_+4+g],b[m++]=s*(1-f)*(1-d)+o*f*(1-d)+a*d*(1-f)+h*f*d;return t},hermiteFastResize:function(t,e,i,n,r){for(var s=this.rcpScaleX,o=this.rcpScaleY,a=F(s/2),h=F(o/2),c=t.imageData.data,t=t.ctx.createImageData(n,r),l=t.data,u=0;u<r;u++)for(var f=0;f<n;f++){for(var d=4*(f+u*n),g=0,p=0,m=0,v=0,y=0,_=0,x=0,b=(u+.5)*o,C=j(u*o);C<(u+1)*o;C++)for(var S=M(b-(C+.5))/h,w=(f+.5)*s,T=S*S,A=j(f*s);A<(f+1)*s;A++){var O=M(w-(A+.5))/a,E=D(T+O*O);1<E&&E<-1||0<(g=2*E*E*E-3*E*E+1)&&(x+=g*c[3+(O=4*(A+C*e))],m+=g,v+=(g=c[3+O]<255?g*c[3+O]/250:g)*c[O],y+=g*c[1+O],_+=g*c[2+O],p+=g)}l[d]=v/p,l[1+d]=y/p,l[2+d]=_/p,l[3+d]=x/m}return t},toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),m.Image.filters.Resize.fromObject=m.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Contrast=i(e.BaseFilter,{type:"Contrast",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",contrast:0,mainParameter:"contrast",applyTo2d:function(t){if(0!==this.contrast)for(var e=t.imageData.data,i=e.length,t=Math.floor(255*this.contrast),n=259*(t+255)/(255*(259-t)),r=0;r<i;r+=4)e[r]=n*(e[r]-128)+128,e[r+1]=n*(e[r+1]-128)+128,e[r+2]=n*(e[r+2]-128)+128},getUniformLocations:function(t,e){return{uContrast:t.getUniformLocation(e,"uContrast")}},sendUniformData:function(t,e){t.uniform1f(e.uContrast,this.contrast)}}),t.Image.filters.Contrast.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Saturation=i(e.BaseFilter,{type:"Saturation",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",saturation:0,mainParameter:"saturation",applyTo2d:function(t){if(0!==this.saturation)for(var e,i=t.imageData.data,n=i.length,r=-this.saturation,s=0;s<n;s+=4)e=Math.max(i[s],i[s+1],i[s+2]),i[s]+=e!==i[s]?(e-i[s])*r:0,i[s+1]+=e!==i[s+1]?(e-i[s+1])*r:0,i[s+2]+=e!==i[s+2]?(e-i[s+2])*r:0},getUniformLocations:function(t,e){return{uSaturation:t.getUniformLocation(e,"uSaturation")}},sendUniformData:function(t,e){t.uniform1f(e.uSaturation,-this.saturation)}}),t.Image.filters.Saturation.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Vibrance=i(e.BaseFilter,{type:"Vibrance",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uVibrance;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat max = max(color.r, max(color.g, color.b));\nfloat avg = (color.r + color.g + color.b) / 3.0;\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\ngl_FragColor = color;\n}",vibrance:0,mainParameter:"vibrance",applyTo2d:function(t){if(0!==this.vibrance)for(var e,i,n=t.imageData.data,r=n.length,s=-this.vibrance,o=0;o<r;o+=4)e=Math.max(n[o],n[o+1],n[o+2]),i=(n[o]+n[o+1]+n[o+2])/3,i=2*Math.abs(e-i)/255*s,n[o]+=e!==n[o]?(e-n[o])*i:0,n[o+1]+=e!==n[o+1]?(e-n[o+1])*i:0,n[o+2]+=e!==n[o+2]?(e-n[o+2])*i:0},getUniformLocations:function(t,e){return{uVibrance:t.getUniformLocation(e,"uVibrance")}},sendUniformData:function(t,e){t.uniform1f(e.uVibrance,-this.vibrance)}}),t.Image.filters.Vibrance.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var d=t.fabric||(t.fabric={}),t=d.Image.filters,e=d.util.createClass;t.Blur=e(t.BaseFilter,{type:"Blur",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",blur:0,mainParameter:"blur",applyTo:function(t){t.webgl?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},applyTo2d:function(t){t.imageData=this.simpleBlur(t)},simpleBlur:function(t){var e,i,n,r,s,o,a=t.filterBackend.resources,h=t.imageData.width,c=t.imageData.height,l=(a.blurLayer1||(a.blurLayer1=d.util.createCanvasElement(),a.blurLayer2=d.util.createCanvasElement()),e=a.blurLayer1,i=a.blurLayer2,e.width===h&&e.height===c||(i.width=e.width=h,i.height=e.height=c),e.getContext("2d")),u=i.getContext("2d"),f=.06*this.blur*.5;for(l.putImageData(t.imageData,0,0),u.clearRect(0,0,h,c),o=-15;o<=15;o++)s=f*(r=o/15)*h+(n=(Math.random()-.5)/4),u.globalAlpha=1-Math.abs(r),u.drawImage(e,s,n),l.drawImage(i,0,0),u.globalAlpha=1,u.clearRect(0,0,i.width,i.height);for(o=-15;o<=15;o++)s=f*(r=o/15)*c+(n=(Math.random()-.5)/4),u.globalAlpha=1-Math.abs(r),u.drawImage(e,n,s),l.drawImage(i,0,0),u.globalAlpha=1,u.clearRect(0,0,i.width,i.height);t.ctx.drawImage(e,0,0);a=t.ctx.getImageData(0,0,e.width,e.height);return l.globalAlpha=1,l.clearRect(0,0,e.width,e.height),a},getUniformLocations:function(t,e){return{delta:t.getUniformLocation(e,"uDelta")}},sendUniformData:function(t,e){var i=this.chooseRightDelta();t.uniform2fv(e.delta,i)},chooseRightDelta:function(){var t=1,e=[0,0];return this.horizontal?1<this.aspectRatio&&(t=1/this.aspectRatio):this.aspectRatio<1&&(t=this.aspectRatio),t=t*this.blur*.12,this.horizontal?e[0]=t:e[1]=t,e}}),t.Blur.fromObject=d.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var t=t.fabric||(t.fabric={}),e=t.Image.filters,i=t.util.createClass;e.Gamma=i(e.BaseFilter,{type:"Gamma",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",gamma:[1,1,1],mainParameter:"gamma",initialize:function(t){this.gamma=[1,1,1],e.BaseFilter.prototype.initialize.call(this,t)},applyTo2d:function(t){var e,i=t.imageData.data,t=this.gamma,n=i.length,r=1/t[0],s=1/t[1],o=1/t[2];for(this.rVals||(this.rVals=new Uint8Array(256),this.gVals=new Uint8Array(256),this.bVals=new Uint8Array(256)),e=0,n=256;e<n;e++)this.rVals[e]=255*Math.pow(e/255,r),this.gVals[e]=255*Math.pow(e/255,s),this.bVals[e]=255*Math.pow(e/255,o);for(e=0,n=i.length;e<n;e+=4)i[e]=this.rVals[i[e]],i[e+1]=this.gVals[i[e+1]],i[e+2]=this.bVals[i[e+2]]},getUniformLocations:function(t,e){return{uGamma:t.getUniformLocation(e,"uGamma")}},sendUniformData:function(t,e){t.uniform3fv(e.uGamma,this.gamma)}}),t.Image.filters.Gamma.fromObject=t.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var i=t.fabric||(t.fabric={}),t=i.Image.filters,e=i.util.createClass;t.Composed=e(t.BaseFilter,{type:"Composed",subFilters:[],initialize:function(t){this.callSuper("initialize",t),this.subFilters=this.subFilters.slice(0)},applyTo:function(e){e.passes+=this.subFilters.length-1,this.subFilters.forEach(function(t){t.applyTo(e)})},toObject:function(){return i.util.object.extend(this.callSuper("toObject"),{subFilters:this.subFilters.map(function(t){return t.toObject()})})},isNeutralState:function(){return!this.subFilters.some(function(t){return!t.isNeutralState()})}}),i.Image.filters.Composed.fromObject=function(t,e){t=(t.subFilters||[]).map(function(t){return new i.Image.filters[t.type](t)}),t=new i.Image.filters.Composed({subFilters:t});return e&&e(t),t}}(i),function(t){"use strict";var n=t.fabric||(t.fabric={}),e=n.Image.filters,t=n.util.createClass;e.HueRotation=t(e.ColorMatrix,{type:"HueRotation",rotation:0,mainParameter:"rotation",calculateMatrix:function(){var t=this.rotation*Math.PI,e=n.util.cos(t),t=n.util.sin(t),t=Math.sqrt(1/3)*t,i=1-e;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=e+i/3,this.matrix[1]=1/3*i-t,this.matrix[2]=1/3*i+t,this.matrix[5]=1/3*i+t,this.matrix[6]=e+1/3*i,this.matrix[7]=1/3*i-t,this.matrix[10]=1/3*i-t,this.matrix[11]=1/3*i+t,this.matrix[12]=e+1/3*i},isNeutralState:function(t){return this.calculateMatrix(),e.BaseFilter.prototype.isNeutralState.call(this,t)},applyTo:function(t){this.calculateMatrix(),e.BaseFilter.prototype.applyTo.call(this,t)}}),n.Image.filters.HueRotation.fromObject=n.Image.filters.BaseFilter.fromObject}(i),function(t){"use strict";var e,b=t.fabric||(t.fabric={}),o=b.util.object.clone;b.Text?b.warn("fabric.Text is already defined"):(e="fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide pathAlign".split(" "),b.Text=b.util.createClass(b.Object,{_dimensionAffectingProps:["fontSize","fontWeight","fontFamily","fontStyle","lineHeight","text","charSpacing","textAlign","styles","path","pathStartOffset","pathSide","pathAlign"],_reNewline:/\r?\n/,_reSpacesAndTabs:/[ \t\r]/g,_reSpaceAndTab:/[ \t\r]/,_reWords:/\S+/g,type:"text",fontSize:40,fontWeight:"normal",fontFamily:"Times New Roman",underline:!1,overline:!1,linethrough:!1,textAlign:"left",fontStyle:"normal",lineHeight:1.16,superscript:{size:.6,baseline:-.35},subscript:{size:.6,baseline:.11},textBackgroundColor:"",stateProperties:b.Object.prototype.stateProperties.concat(e),cacheProperties:b.Object.prototype.cacheProperties.concat(e),stroke:null,shadow:null,path:null,pathStartOffset:0,pathSide:"left",pathAlign:"baseline",_fontSizeFraction:.222,offsets:{underline:.1,linethrough:-.315,overline:-.88},_fontSizeMult:1.13,charSpacing:0,styles:null,_measuringContext:null,deltaY:0,direction:"ltr",_styleProperties:["stroke","strokeWidth","fill","fontFamily","fontSize","fontWeight","fontStyle","underline","overline","linethrough","deltaY","textBackgroundColor"],__charBounds:[],CACHE_FONT_SIZE:400,MIN_TEXT_WIDTH:2,initialize:function(t,e){this.styles=e&&e.styles||{},this.text=t,this.__skipDimension=!0,this.callSuper("initialize",e),this.path&&this.setPathInfo(),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:"_dimensionAffectingProps"})},setPathInfo:function(){var t=this.path;t&&(t.segmentsInfo=b.util.getPathSegmentsInfo(t.path))},getMeasuringContext:function(){return b._measuringContext||(b._measuringContext=this.canvas&&this.canvas.contextCache||b.util.createCanvasElement().getContext("2d")),b._measuringContext},_splitText:function(){var t=this._splitTextIntoLines(this.text);return this.textLines=t.lines,this._textLines=t.graphemeLines,this._unwrappedTextLines=t._unwrappedLines,this._text=t.graphemeText,t},initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.path?(this.width=this.path.width,this.height=this.path.height):(this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,this.height=this.calcTextHeight()),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.saveState({propertySet:"_dimensionAffectingProps"}))},enlargeSpaces:function(){for(var t,e,i,n,r,s=0,o=this._textLines.length;s<o;s++)if(("justify"===this.textAlign||s!==o-1&&!this.isEndOfWrapping(s))&&(e=0,i=this._textLines[s],(t=this.getLineWidth(s))<this.width&&(r=this.textLines[s].match(this._reSpacesAndTabs))))for(var a=r.length,h=(this.width-t)/a,c=0,l=i.length;c<=l;c++)n=this.__charBounds[s][c],this._reSpaceAndTab.test(i[c])?(n.width+=h,n.kernedWidth+=h,n.left+=e,e+=h):n.left+=e},isEndOfWrapping:function(t){return t===this._textLines.length-1},missingNewlineOffset:function(){return 1},toString:function(){return"#<fabric.Text ("+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>'},_getCacheCanvasDimensions:function(){var t=this.callSuper("_getCacheCanvasDimensions"),e=this.fontSize;return t.width+=e*t.zoomX,t.height+=e*t.zoomY,t},_render:function(t){var e=this.path;e&&!e.isNotVisible()&&e._render(t),this._setTextStyles(t),this._renderTextLinesBackground(t),this._renderTextDecoration(t,"underline"),this._renderText(t),this._renderTextDecoration(t,"overline"),this._renderTextDecoration(t,"linethrough")},_renderText:function(t){"stroke"===this.paintFirst?(this._renderTextStroke(t),this._renderTextFill(t)):(this._renderTextFill(t),this._renderTextStroke(t))},_setTextStyles:function(t,e,i){if(t.textBaseline="alphabetical",this.path)switch(this.pathAlign){case"center":t.textBaseline="middle";break;case"ascender":t.textBaseline="top";break;case"descender":t.textBaseline="bottom"}t.font=this._getFontDeclaration(e,i)},calcTextWidth:function(){for(var t=this.getLineWidth(0),e=1,i=this._textLines.length;e<i;e++){var n=this.getLineWidth(e);t<n&&(t=n)}return t},_renderTextLine:function(t,e,i,n,r,s){this._renderChars(t,e,i,n,r,s)},_renderTextLinesBackground:function(t){if(this.textBackgroundColor||this.styleHas("textBackgroundColor")){for(var e,i,n,r,s=t.fillStyle,o=this._getLeftOffset(),a=this._getTopOffset(),h=0,c=0,l=this.path,u=0,f=this._textLines.length;u<f;u++){if(e=this.getHeightOfLine(u),this.textBackgroundColor||this.styleHas("textBackgroundColor",u)){for(var d=this._textLines[u],g=this._getLineLeftOffset(u),c=0,h=0,p=this.getValueOfPropertyAt(u,0,"textBackgroundColor"),m=0,v=d.length;m<v;m++)i=this.__charBounds[u][m],n=this.getValueOfPropertyAt(u,m,"textBackgroundColor"),l?(t.save(),t.translate(i.renderLeft,i.renderTop),t.rotate(i.angle),(t.fillStyle=n)&&t.fillRect(-i.width/2,-e/this.lineHeight*(1-this._fontSizeFraction),i.width,e/this.lineHeight),t.restore()):n!==p?(r=o+g+h,"rtl"===this.direction&&(r=this.width-r-c),(t.fillStyle=p)&&t.fillRect(r,a,c,e/this.lineHeight),h=i.left,c=i.width,p=n):c+=i.kernedWidth;n&&!l&&(r=o+g+h,"rtl"===this.direction&&(r=this.width-r-c),t.fillStyle=n,t.fillRect(r,a,c,e/this.lineHeight))}a+=e}t.fillStyle=s,this._removeShadow(t)}},getFontCache:function(t){var e=t.fontFamily.toLowerCase(),e=(b.charWidthsCache[e]||(b.charWidthsCache[e]={}),b.charWidthsCache[e]),t=t.fontStyle.toLowerCase()+"_"+(t.fontWeight+"").toLowerCase();return e[t]||(e[t]={}),e[t]},_measureChar:function(t,e,i,n){var r,s,o,a,h,c=this.getFontCache(e),l=i+t,n=this._getFontDeclaration(e)===this._getFontDeclaration(n),u=e.fontSize/this.CACHE_FONT_SIZE;return i&&void 0!==c[i]&&(o=c[i]),void 0!==c[t]&&(a=r=c[t]),n&&void 0!==c[l]&&(a=(s=c[l])-o),void 0!==r&&void 0!==o&&void 0!==s||(h=this.getMeasuringContext(),this._setTextStyles(h,e,!0)),void 0===r&&(a=r=h.measureText(t).width,c[t]=r),void 0===o&&n&&i&&(o=h.measureText(i).width,c[i]=o),n&&void 0===s&&(s=h.measureText(l).width,a=(c[l]=s)-o),{width:r*u,kernedWidth:a*u}},getHeightOfChar:function(t,e){return this.getValueOfPropertyAt(t,e,"fontSize")},measureLine:function(t){t=this._measureLine(t);return 0!==this.charSpacing&&(t.width-=this._getWidthOfCharSpacing()),t.width<0&&(t.width=0),t},_measureLine:function(t){var e,i,n,r,s,o,a=0,h=this._textLines[t],c=new Array(h.length),l=0,u=this.path,f="right"===this.pathSide;for(this.__charBounds[t]=c,e=0;e<h.length;e++)i=h[e],r=this._getGraphemeBox(i,t,e,n),a+=(c[e]=r).kernedWidth,n=i;if(c[e]={left:r?r.left+r.width:0,width:0,kernedWidth:0,height:this.fontSize},u){switch(o=u.segmentsInfo[u.segmentsInfo.length-1].length,(s=b.util.getPointOnPath(u.path,0,u.segmentsInfo)).x+=u.pathOffset.x,s.y+=u.pathOffset.y,this.textAlign){case"left":l=f?o-a:0;break;case"center":l=(o-a)/2;break;case"right":l=f?0:o-a}for(l+=this.pathStartOffset*(f?-1:1),e=f?h.length-1:0;f?0<=e:e<h.length;f?e--:e++)r=c[e],o<l?l%=o:l<0&&(l+=o),this._setGraphemeOnPath(l,r,s),l+=r.kernedWidth}return{width:a,numOfSpaces:0}},_setGraphemeOnPath:function(t,e,i){var t=t+e.kernedWidth/2,n=this.path,t=b.util.getPointOnPath(n.path,t,n.segmentsInfo);e.renderLeft=t.x-i.x,e.renderTop=t.y-i.y,e.angle=t.angle+("right"===this.pathSide?Math.PI:0)},_getGraphemeBox:function(t,e,i,n,r){var s=this.getCompleteStyleDeclaration(e,i),o=n?this.getCompleteStyleDeclaration(e,i-1):{},t=this._measureChar(t,s,n,o),n=t.kernedWidth,o=t.width,a=(0!==this.charSpacing&&(o+=a=this._getWidthOfCharSpacing(),n+=a),{width:o,left:0,height:s.fontSize,kernedWidth:n,deltaY:s.deltaY});return 0<i&&!r&&(o=this.__charBounds[e][i-1],a.left=o.left+o.width+t.kernedWidth-t.width),a},getHeightOfLine:function(t){if(this.__lineHeights[t])return this.__lineHeights[t];for(var e=this._textLines[t],i=this.getHeightOfChar(t,0),n=1,r=e.length;n<r;n++)i=Math.max(this.getHeightOfChar(t,n),i);return this.__lineHeights[t]=i*this.lineHeight*this._fontSizeMult},calcTextHeight:function(){for(var t,e=0,i=0,n=this._textLines.length;i<n;i++)t=this.getHeightOfLine(i),e+=i===n-1?t/this.lineHeight:t;return e},_getLeftOffset:function(){return"ltr"===this.direction?-this.width/2:this.width/2},_getTopOffset:function(){return-this.height/2},_renderTextCommon:function(t,e){t.save();for(var i=0,n=this._getLeftOffset(),r=this._getTopOffset(),s=0,o=this._textLines.length;s<o;s++){var a=this.getHeightOfLine(s),h=a/this.lineHeight,c=this._getLineLeftOffset(s);this._renderTextLine(e,t,this._textLines[s],n+c,r+i+h,s),i+=a}t.restore()},_renderTextFill:function(t){(this.fill||this.styleHas("fill"))&&this._renderTextCommon(t,"fillText")},_renderTextStroke:function(t){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this._setLineDash(t,this.strokeDashArray),t.beginPath(),this._renderTextCommon(t,"strokeText"),t.closePath(),t.restore())},_renderChars:function(t,e,i,n,r,s){var o,a,h,c,l=this.getHeightOfLine(s),u=-1!==this.textAlign.indexOf("justify"),f="",d=0,g=this.path,p=!u&&0===this.charSpacing&&this.isEmptyStyles(s)&&!g,m="ltr"===this.direction,v="ltr"===this.direction?1:-1,y=e.canvas.getAttribute("dir");if(e.save(),y!==this.direction&&(e.canvas.setAttribute("dir",m?"ltr":"rtl"),e.direction=m?"ltr":"rtl",e.textAlign=m?"left":"right"),r-=l*this._fontSizeFraction/this.lineHeight,p)this._renderChar(t,e,s,0,i.join(""),n,r,l);else for(var _=0,x=i.length-1;_<=x;_++)c=_===x||this.charSpacing||g,f+=i[_],h=this.__charBounds[s][_],0===d?(n+=v*(h.kernedWidth-h.width),d+=h.width):d+=h.kernedWidth,(c=u&&!c&&this._reSpaceAndTab.test(i[_])?!0:c)||(o=o||this.getCompleteStyleDeclaration(s,_),a=this.getCompleteStyleDeclaration(s,_+1),c=b.util.hasStyleChanged(o,a,!1)),c&&(g?(e.save(),e.translate(h.renderLeft,h.renderTop),e.rotate(h.angle),this._renderChar(t,e,s,_,f,-d/2,0,l),e.restore()):(c=n,this._renderChar(t,e,s,_,f,c,r,l)),f="",o=a,n+=v*d,d=0);e.restore()},_applyPatternGradientTransformText:function(t){var e,i=b.util.createCanvasElement(),n=this.width+this.strokeWidth,r=this.height+this.strokeWidth;return i.width=n,i.height=r,(e=i.getContext("2d")).beginPath(),e.moveTo(0,0),e.lineTo(n,0),e.lineTo(n,r),e.lineTo(0,r),e.closePath(),e.translate(n/2,r/2),e.fillStyle=t.toLive(e),this._applyPatternGradientTransform(e,t),e.fill(),e.createPattern(i,"no-repeat")},handleFiller:function(t,e,i){var n,r;return i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?(n=-this.width/2,r=-this.height/2,t.translate(n,r),t[e]=this._applyPatternGradientTransformText(i),{offsetX:n,offsetY:r}):(t[e]=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):(t[e]=i,{offsetX:0,offsetY:0})},_setStrokeStyles:function(t,e){return t.lineWidth=e.strokeWidth,t.lineCap=this.strokeLineCap,t.lineDashOffset=this.strokeDashOffset,t.lineJoin=this.strokeLineJoin,t.miterLimit=this.strokeMiterLimit,this.handleFiller(t,"strokeStyle",e.stroke)},_setFillStyles:function(t,e){return this.handleFiller(t,"fillStyle",e.fill)},_renderChar:function(t,e,i,n,r,s,o){var a,h,c=this._getStyleDeclaration(i,n),i=this.getCompleteStyleDeclaration(i,n),n="fillText"===t&&i.fill,t="strokeText"===t&&i.stroke&&i.strokeWidth;(t||n)&&(e.save(),n&&(a=this._setFillStyles(e,i)),t&&(h=this._setStrokeStyles(e,i)),e.font=this._getFontDeclaration(i),c&&c.textBackgroundColor&&this._removeShadow(e),c&&c.deltaY&&(o+=c.deltaY),n&&e.fillText(r,s-a.offsetX,o-a.offsetY),t&&e.strokeText(r,s-h.offsetX,o-h.offsetY),e.restore())},setSuperscript:function(t,e){return this._setScript(t,e,this.superscript)},setSubscript:function(t,e){return this._setScript(t,e,this.subscript)},_setScript:function(t,e,i){var n=this.get2DCursorLocation(t,!0),r=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"fontSize"),n=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"deltaY"),n={fontSize:r*i.size,deltaY:n+r*i.baseline};return this.setSelectionStyles(n,t,e),this},_getLineLeftOffset:function(t){var e=this.getLineWidth(t),e=this.width-e,i=this.textAlign,n=this.direction,r=0,t=this.isEndOfWrapping(t);return"justify"===i||"justify-center"===i&&!t||"justify-right"===i&&!t||"justify-left"===i&&!t?0:("center"===i&&(r=e/2),"right"===i&&(r=e),"justify-center"===i&&(r=e/2),"justify-right"===i&&(r=e),"rtl"===n&&(r-=e),r)},_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},_shouldClearDimensionCache:function(){var t=this._forceClearCache;return(t=t||this.hasStateChanged("_dimensionAffectingProps"))&&(this.dirty=!0,this._forceClearCache=!1),t},getLineWidth:function(t){var e;return void 0!==this.__lineWidths[t]?this.__lineWidths[t]:(e=this.measureLine(t).width,this.__lineWidths[t]=e)},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},getValueOfPropertyAt:function(t,e,i){t=this._getStyleDeclaration(t,e);return(t&&void 0!==t[i]?t:this)[i]},_renderTextDecoration:function(t,e){if(this[e]||this.styleHas(e)){for(var i,n=this._getLeftOffset(),r=this._getTopOffset(),s=this.path,o=this._getWidthOfCharSpacing(),a=this.offsets[e],h=0,c=this._textLines.length;h<c;h++){if(i=this.getHeightOfLine(h),this[e]||this.styleHas(e,h)){for(var l=this._textLines[h],u=i/this.lineHeight,f=this._getLineLeftOffset(h),d=0,g=0,p=this.getValueOfPropertyAt(h,0,e),m=this.getValueOfPropertyAt(h,0,"fill"),v=r+u*(1-this._fontSizeFraction),y=this.getHeightOfChar(h,0),_=this.getValueOfPropertyAt(h,0,"deltaY"),x=0,b=l.length;x<b;x++){var C=this.__charBounds[h][x],S=this.getValueOfPropertyAt(h,x,e),w=this.getValueOfPropertyAt(h,x,"fill"),T=this.getHeightOfChar(h,x),A=this.getValueOfPropertyAt(h,x,"deltaY");s&&S&&w?(t.save(),t.fillStyle=m,t.translate(C.renderLeft,C.renderTop),t.rotate(C.angle),t.fillRect(-C.kernedWidth/2,a*T+A,C.kernedWidth,this.fontSize/15),t.restore()):(S!==p||w!==m||T!==y||A!==_)&&0<g?(O=n+f+d,"rtl"===this.direction&&(O=this.width-O-g),p&&m&&(t.fillStyle=m,t.fillRect(O,v+a*y+_,g,this.fontSize/15)),d=C.left,g=C.width,p=S,m=w,y=T,_=A):g+=C.kernedWidth}var O=n+f+d;"rtl"===this.direction&&(O=this.width-O-g),t.fillStyle=w,S&&w&&t.fillRect(O,v+a*y+_,g-o,this.fontSize/15)}r+=i}this._removeShadow(t)}},_getFontDeclaration:function(t,e){var t=t||this,i=this.fontFamily,n=-1<b.Text.genericFonts.indexOf(i.toLowerCase()),i=void 0===i||-1<i.indexOf("'")||-1<i.indexOf(",")||-1<i.indexOf('"')||n?t.fontFamily:'"'+t.fontFamily+'"';return[b.isLikelyNode?t.fontWeight:t.fontStyle,b.isLikelyNode?t.fontStyle:t.fontWeight,e?this.CACHE_FONT_SIZE+"px":t.fontSize+"px",i].join(" ")},render:function(t){!this.visible||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper("render",t))},_splitTextIntoLines:function(t){for(var e=t.split(this._reNewline),i=new Array(e.length),n=["\n"],r=[],s=0;s<e.length;s++)i[s]=b.util.string.graphemeSplit(e[s]),r=r.concat(i[s],n);return r.pop(),{_unwrappedLines:i,lines:e,graphemeText:r,graphemeLines:i}},toObject:function(t){t=e.concat(t),t=this.callSuper("toObject",t);return t.styles=b.util.stylesToArray(this.styles,this.text),t.path&&(t.path=this.path.toObject()),t},set:function(t,e){this.callSuper("set",t,e);var i=!1,n=!1;if("object"==typeof t)for(var r in t)"path"===r&&this.setPathInfo(),i=i||-1!==this._dimensionAffectingProps.indexOf(r),n=n||"path"===r;else i=-1!==this._dimensionAffectingProps.indexOf(t),n="path"===t;return n&&this.setPathInfo(),i&&(this.initDimensions(),this.setCoords()),this},complexity:function(){return 1}}),b.Text.ATTRIBUTE_NAMES=b.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")),b.Text.DEFAULT_SVG_FONT_SIZE=16,b.Text.fromElement=function(t,e,i){if(!t)return e(null);var n=b.parseAttributes(t,b.Text.ATTRIBUTE_NAMES),r=n.textAnchor||"left",s=((i=b.util.object.extend(i?o(i):{},n)).top=i.top||0,i.left=i.left||0,n.textDecoration&&(-1!==(s=n.textDecoration).indexOf("underline")&&(i.underline=!0),-1!==s.indexOf("overline")&&(i.overline=!0),-1!==s.indexOf("line-through")&&(i.linethrough=!0),delete i.textDecoration),"dx"in n&&(i.left+=n.dx),"dy"in n&&(i.top+=n.dy),"fontSize"in i||(i.fontSize=b.Text.DEFAULT_SVG_FONT_SIZE),""),n=("textContent"in t?s=t.textContent:"firstChild"in t&&null!==t.firstChild&&"data"in t.firstChild&&null!==t.firstChild.data&&(s=t.firstChild.data),s=s.replace(/^\s+|\s+$|\n+/g,"").replace(/\s+/g," "),i.strokeWidth),t=(i.strokeWidth=0,new b.Text(s,i)),s=t.getScaledHeight()/t.height,i=((t.height+t.strokeWidth)*t.lineHeight-t.height)*s,s=t.getScaledHeight()+i,i=0;"center"===r&&(i=t.getScaledWidth()/2),"right"===r&&(i=t.getScaledWidth()),t.set({left:t.left-i,top:t.top-(s-t.fontSize*(.07+t._fontSizeFraction))/t.lineHeight,strokeWidth:void 0!==n?n:1}),e(t)},b.Text.fromObject=function(t,i){var e=o(t),n=t.path;return delete e.path,b.Object._fromObject("Text",e,function(e){e.styles=b.util.stylesFromArray(t.styles,t.text),n?b.Object._fromObject("Path",n,function(t){e.set("path",t),i(e)},"path"):i(e)},"text")},b.Text.genericFonts=["sans-serif","serif","cursive","fantasy","monospace"],b.util.createAccessors&&b.util.createAccessors(b.Text))}(i),z.util.object.extend(z.Text.prototype,{isEmptyStyles:function(t){if(this.styles&&(void 0===t||this.styles[t])){var e,i=void 0===t?this.styles:{line:this.styles[t]};for(e in i)for(var n in i[e])for(var r in i[e][n])return!1}return!0},styleHas:function(t,e){if(this.styles&&t&&""!==t&&(void 0===e||this.styles[e])){var i,n=void 0===e?this.styles:{0:this.styles[e]};for(i in n)for(var r in n[i])if(void 0!==n[i][r][t])return!0}return!1},cleanStyle:function(t){if(!this.styles||!t||""===t)return!1;var e,i,n,r,s=this.styles,o=0,a=!0,h=0;for(n in s){for(var c in e=0,s[n])o++,(r=s[n][c]).hasOwnProperty(t)?(i?r[t]!==i&&(a=!1):i=r[t],r[t]===this[t]&&delete r[t]):a=!1,0!==Object.keys(r).length?e++:delete s[n][c];0===e&&delete s[n]}for(var l=0;l<this._textLines.length;l++)h+=this._textLines[l].length;a&&o===h&&(this[t]=i,this.removeStyle(t))},removeStyle:function(t){if(this.styles&&t&&""!==t){var e,i,n,r=this.styles;for(i in r){for(n in e=r[i])delete e[n][t],0===Object.keys(e[n]).length&&delete e[n];0===Object.keys(e).length&&delete r[i]}}},_extendStyles:function(t,e){t=this.get2DCursorLocation(t);this._getLineStyle(t.lineIndex)||this._setLineStyle(t.lineIndex),this._getStyleDeclaration(t.lineIndex,t.charIndex)||this._setStyleDeclaration(t.lineIndex,t.charIndex,{}),z.util.object.extend(this._getStyleDeclaration(t.lineIndex,t.charIndex),e)},get2DCursorLocation:function(t,e){void 0===t&&(t=this.selectionStart);for(var i=e?this._unwrappedTextLines:this._textLines,n=i.length,r=0;r<n;r++){if(t<=i[r].length)return{lineIndex:r,charIndex:t};t-=i[r].length+this.missingNewlineOffset(r)}return{lineIndex:r-1,charIndex:i[r-1].length<t?i[r-1].length:t}},getSelectionStyles:function(t,e,i){void 0===t&&(t=this.selectionStart||0),void 0===e&&(e=this.selectionEnd||t);for(var n=[],r=t;r<e;r++)n.push(this.getStyleAtPosition(r,i));return n},getStyleAtPosition:function(t,e){t=this.get2DCursorLocation(t);return(e?this.getCompleteStyleDeclaration(t.lineIndex,t.charIndex):this._getStyleDeclaration(t.lineIndex,t.charIndex))||{}},setSelectionStyles:function(t,e,i){void 0===e&&(e=this.selectionStart||0),void 0===i&&(i=this.selectionEnd||e);for(var n=e;n<i;n++)this._extendStyles(n,t);return this._forceClearCache=!0,this},_getStyleDeclaration:function(t,e){t=this.styles&&this.styles[t];return t?t[e]:null},getCompleteStyleDeclaration:function(t,e){for(var i,n=this._getStyleDeclaration(t,e)||{},r={},s=0;s<this._styleProperties.length;s++)r[i=this._styleProperties[s]]=(void 0===n[i]?this:n)[i];return r},_setStyleDeclaration:function(t,e,i){this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){delete this.styles[t][e]},_getLineStyle:function(t){return!!this.styles[t]},_setLineStyle:function(t){this.styles[t]={}},_deleteLineStyle:function(t){delete this.styles[t]}}),z.IText=z.util.createClass(z.Text,z.Observable,{type:"i-text",selectionStart:0,selectionEnd:0,selectionColor:"rgba(17,119,255,0.3)",isEditing:!1,editable:!0,editingBorderColor:"rgba(102,153,255,0.25)",cursorWidth:2,cursorColor:"",cursorDelay:1e3,cursorDuration:600,caching:!0,hiddenTextareaContainer:null,_reSpace:/\s|\n/,_currentCursorOpacity:0,_selectionDirection:null,_abortCursorAnimation:!1,__widthOfSpace:[],inCompositionMode:!1,initialize:function(t,e){this.callSuper("initialize",t,e),this.initBehavior()},setSelectionStart:function(t){t=Math.max(t,0),this._updateAndFire("selectionStart",t)},setSelectionEnd:function(t){t=Math.min(t,this.text.length),this._updateAndFire("selectionEnd",t)},_updateAndFire:function(t,e){this[t]!==e&&(this._fireSelectionChanged(),this[t]=e),this._updateTextarea()},_fireSelectionChanged:function(){this.fire("selection:changed"),this.canvas&&this.canvas.fire("text:selection:changed",{target:this})},initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper("initDimensions")},render:function(t){this.clearContextTop(),this.callSuper("render",t),this.cursorOffsetCache={},this.renderCursorOrSelection()},_render:function(t){this.callSuper("_render",t)},clearContextTop:function(t){var e,i;this.isEditing&&this.canvas&&this.canvas.contextTop&&(e=this.canvas.contextTop,i=this.canvas.viewportTransform,e.save(),e.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this.transform(e),this._clearTextArea(e),t||e.restore())},renderCursorOrSelection:function(){var t,e;this.isEditing&&this.canvas&&this.canvas.contextTop&&(t=this._getCursorBoundaries(),e=this.canvas.contextTop,this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(t,e):this.renderSelection(t,e),e.restore())},_clearTextArea:function(t){var e=this.width+4,i=this.height+4;t.clearRect(-e/2,-i/2,e,i)},_getCursorBoundaries:function(t){void 0===t&&(t=this.selectionStart);var e=this._getLeftOffset(),i=this._getTopOffset(),t=this._getCursorBoundariesOffsets(t);return{left:e,top:i,leftOffset:t.left,topOffset:t.top}},_getCursorBoundariesOffsets:function(t){if(!(this.cursorOffsetCache&&"top"in this.cursorOffsetCache)){for(var e=0,i=0,t=this.get2DCursorLocation(t),n=t.charIndex,r=t.lineIndex,s=0;s<r;s++)e+=this.getHeightOfLine(s);var t=this._getLineLeftOffset(r),o=this.__charBounds[r][n];o&&(i=o.left),0!==this.charSpacing&&n===this._textLines[r].length&&(i-=this._getWidthOfCharSpacing()),o={top:e,left:t+(0<i?i:0)},"rtl"===this.direction&&(o.left*=-1),this.cursorOffsetCache=o}return this.cursorOffsetCache},renderCursor:function(t,e){var i=this.get2DCursorLocation(),n=i.lineIndex,i=0<i.charIndex?i.charIndex-1:0,r=this.getValueOfPropertyAt(n,i,"fontSize"),s=this.scaleX*this.canvas.getZoom(),s=this.cursorWidth/s,o=t.topOffset,a=this.getValueOfPropertyAt(n,i,"deltaY");o+=(1-this._fontSizeFraction)*this.getHeightOfLine(n)/this.lineHeight-r*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(t,e),e.fillStyle=this.cursorColor||this.getValueOfPropertyAt(n,i,"fill"),e.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,e.fillRect(t.left+t.leftOffset-s/2,o+t.top+a,s,r)},renderSelection:function(t,e){for(var i=(this.inCompositionMode?this.hiddenTextarea:this).selectionStart,n=(this.inCompositionMode?this.hiddenTextarea:this).selectionEnd,r=-1!==this.textAlign.indexOf("justify"),i=this.get2DCursorLocation(i),n=this.get2DCursorLocation(n),s=i.lineIndex,o=n.lineIndex,a=i.charIndex<0?0:i.charIndex,h=n.charIndex<0?0:n.charIndex,c=s;c<=o;c++){var l,u=this._getLineLeftOffset(c)||0,f=this.getHeightOfLine(c),d=0,g=0,u=(c===s&&(d=this.__charBounds[s][a].left),s<=c&&c<o?g=r&&!this.isEndOfWrapping(c)?this.width:this.getLineWidth(c)||5:c===o&&(g=0===h?this.__charBounds[o][h].left:(l=this._getWidthOfCharSpacing(),this.__charBounds[o][h-1].left+this.__charBounds[o][h-1].width-l)),l=f,(this.lineHeight<1||c===o&&1<this.lineHeight)&&(f/=this.lineHeight),t.left+u+d),g=g-d,d=f,p=0;this.inCompositionMode?(e.fillStyle=this.compositionColor||"black",d=1,p=f):e.fillStyle=this.selectionColor,"rtl"===this.direction&&(u=this.width-u-g),e.fillRect(u,t.top+t.topOffset+p,g,d),t.topOffset+=l}},getCurrentCharFontSize:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fontSize")},getCurrentCharColor:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fill")},_getCurrentCharIndex:function(){var t=this.get2DCursorLocation(this.selectionStart,!0),e=0<t.charIndex?t.charIndex-1:0;return{l:t.lineIndex,c:e}}}),z.IText.fromObject=function(t,e){var i=z.util.stylesFromArray(t.styles,t.text),n=Object.assign({},t,{styles:i});if(Lt(n),n.styles)for(var r in n.styles)for(var s in n.styles[r])Lt(n.styles[r][s]);z.Object._fromObject("IText",n,e,"text")},x=z.util.object.clone,z.util.object.extend(z.IText.prototype,{initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},initAddedHandler:function(){var e=this;this.on("added",function(){var t=e.canvas;t&&(t._hasITextHandlers||(t._hasITextHandlers=!0,e._initCanvasHandlers(t)),t._iTextInstances=t._iTextInstances||[],t._iTextInstances.push(e))})},initRemovedHandler:function(){var e=this;this.on("removed",function(){var t=e.canvas;t&&(t._iTextInstances=t._iTextInstances||[],z.util.removeFromArray(t._iTextInstances,e),0===t._iTextInstances.length&&(t._hasITextHandlers=!1,e._removeCanvasHandlers(t)))})},_initCanvasHandlers:function(t){t._mouseUpITextHandler=function(){t._iTextInstances&&t._iTextInstances.forEach(function(t){t.__isMousedown=!1})},t.on("mouse:up",t._mouseUpITextHandler)},_removeCanvasHandlers:function(t){t.off("mouse:up",t._mouseUpITextHandler)},_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,"_onTickComplete")},_animateCursor:function(t,e,i,n){var r={isAborted:!1,abort:function(){this.isAborted=!0}};return t.animate("_currentCursorOpacity",e,{duration:i,onComplete:function(){r.isAborted||t[n]()},onChange:function(){t.canvas&&t.selectionStart===t.selectionEnd&&t.renderCursorOrSelection()},abort:function(){return r.isAborted}}),r},_onTickComplete:function(){var t=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout(function(){t._currentTickCompleteState=t._animateCursor(t,0,this.cursorDuration/2,"_tick")},100)},initDelayedCursor:function(t){var e=this,t=t?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout(function(){e._tick()},t)},abortCursorAnimation:function(){var t=this._currentTickState||this._currentTickCompleteState,e=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,t&&e&&e.clearContext(e.contextTop||e.contextContainer)},selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join("")},findWordBoundaryLeft:function(t){var e=0,i=t-1;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i--;for(;/\S/.test(this._text[i])&&-1<i;)e++,i--;return t-e},findWordBoundaryRight:function(t){var e=0,i=t;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i++;for(;/\S/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},findLineBoundaryLeft:function(t){for(var e=0,i=t-1;!/\n/.test(this._text[i])&&-1<i;)e++,i--;return t-e},findLineBoundaryRight:function(t){for(var e=0,i=t;!/\n/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},searchWordBoundary:function(t,e){for(var i=this._text,n=this._reSpace.test(i[t])?t-1:t,r=i[n],s=z.reNonWord;!s.test(r)&&0<n&&n<i.length;)r=i[n+=e];return s.test(r)&&(n+=1===e?0:1),n},selectWord:function(t){t=t||this.selectionStart;var e=this.searchWordBoundary(t,-1),t=this.searchWordBoundary(t,1);this.selectionStart=e,this.selectionEnd=t,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},selectLine:function(t){t=t||this.selectionStart;var e=this.findLineBoundaryLeft(t),t=this.findLineBoundaryRight(t);return this.selectionStart=e,this.selectionEnd=t,this._fireSelectionChanged(),this._updateTextarea(),this},enterEditing:function(t){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(t),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire("editing:entered"),this._fireSelectionChanged(),this.canvas&&(this.canvas.fire("text:editing:entered",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll()),this},exitEditingOnOthers:function(t){t._iTextInstances&&t._iTextInstances.forEach(function(t){t.selected=!1,t.isEditing&&t.exitEditing()})},initMouseMoveHandler:function(){this.canvas.on("mouse:move",this.mouseMoveHandler)},mouseMoveHandler:function(t){var e,i;this.__isMousedown&&this.isEditing&&(document.activeElement!==this.hiddenTextarea&&this.hiddenTextarea.focus(),t=this.getSelectionStartFromPointer(t.e),e=this.selectionStart,i=this.selectionEnd,(t===this.__selectionStartOnMouseDown&&e!==i||e!==t&&i!==t)&&(t>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=t):(this.selectionStart=t,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===e&&this.selectionEnd===i||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection())))},_setEditingProps:function(){this.hoverCursor="text",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor="text"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},fromStringToGraphemeSelection:function(t,e,i){var n=i.slice(0,t),n=z.util.string.graphemeSplit(n).length;return t===e?{selectionStart:n,selectionEnd:n}:(i=i.slice(t,e),{selectionStart:n,selectionEnd:n+z.util.string.graphemeSplit(i).length})},fromGraphemeToStringSelection:function(t,e,i){var n=i.slice(0,t).join("").length;return t===e?{selectionStart:n,selectionEnd:n}:{selectionStart:n,selectionEnd:n+i.slice(t,e).join("").length}},_updateTextarea:function(){var t;this.cursorOffsetCache={},this.hiddenTextarea&&(this.inCompositionMode||(t=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text),this.hiddenTextarea.selectionStart=t.selectionStart,this.hiddenTextarea.selectionEnd=t.selectionEnd),this.updateTextareaPosition())},updateFromTextArea:function(){var t;this.hiddenTextarea&&(this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),t=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),this.selectionEnd=this.selectionStart=t.selectionEnd,this.inCompositionMode||(this.selectionStart=t.selectionStart),this.updateTextareaPosition())},updateTextareaPosition:function(){var t;this.selectionStart===this.selectionEnd&&(t=this._calcTextareaPosition(),this.hiddenTextarea.style.left=t.left,this.hiddenTextarea.style.top=t.top)},_calcTextareaPosition:function(){var t,e,i,n,r,s,o,a;return this.canvas?(a=this.inCompositionMode?this.compositionStart:this.selectionStart,i=this._getCursorBoundaries(a),t=(a=this.get2DCursorLocation(a)).lineIndex,a=a.charIndex,t=this.getValueOfPropertyAt(t,a,"fontSize")*this.lineHeight,a=i.leftOffset,e=this.calcTransformMatrix(),a={x:i.left+a,y:i.top+i.topOffset+t},i=this.canvas.getRetinaScaling(),n=(s=(o=this.canvas.upperCanvasEl).width/i)-t,r=(i=o.height/i)-t,s=o.clientWidth/s,o=o.clientHeight/i,a=z.util.transformPoint(a,e),(a=z.util.transformPoint(a,this.canvas.viewportTransform)).x*=s,a.y*=o,a.x<0&&(a.x=0),a.x>n&&(a.x=n),a.y<0&&(a.y=0),a.y>r&&(a.y=r),a.x+=this.canvas._offset.left,a.y+=this.canvas._offset.top,{left:a.x+"px",top:a.y+"px",fontSize:t+"px",charHeight:t}):{x:1,y:1}},_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},exitEditing:function(){var t=this._textBeforeEdit!==this.text,e=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,e&&(e.blur&&e.blur(),e.parentNode&&e.parentNode.removeChild(e)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire("editing:exited"),t&&this.fire("modified"),this.canvas&&(this.canvas.off("mouse:move",this.mouseMoveHandler),this.canvas.fire("text:editing:exited",{target:this}),t&&this.canvas.fire("object:modified",{target:this})),this},_removeExtraneousStyles:function(){for(var t in this.styles)this._textLines[t]||delete this.styles[t]},removeStyleFromTo:function(t,e){var t=this.get2DCursorLocation(t,!0),e=this.get2DCursorLocation(e,!0),i=t.lineIndex,n=t.charIndex,r=e.lineIndex,s=e.charIndex;if(i!==r){if(this.styles[i])for(l=n;l<this._unwrappedTextLines[i].length;l++)delete this.styles[i][l];if(this.styles[r])for(l=s;l<this._unwrappedTextLines[r].length;l++)(h=this.styles[r][l])&&(this.styles[i]||(this.styles[i]={}),this.styles[i][n+l-s]=h);for(l=i+1;l<=r;l++)delete this.styles[l];this.shiftLineStyles(r,i-r)}else if(this.styles[i]){for(var o,a,h=this.styles[i],c=s-n,l=n;l<s;l++)delete h[l];for(a in this.styles[i])s<=(o=parseInt(a,10))&&(h[o-c]=h[a],delete h[a])}},shiftLineStyles:function(t,e){var i,n=x(this.styles);for(i in this.styles){var r=parseInt(i,10);t<r&&(this.styles[r+e]=n[r],n[r-e]||delete this.styles[r])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},insertNewlineStyleObject:function(t,e,i,n){var r,s,o={},a=!1,h=this._unwrappedTextLines[t].length===e;for(s in this.shiftLineStyles(t,i=i||1),this.styles[t]&&(r=this.styles[t][0===e?e:e-1]),this.styles[t]){var c=parseInt(s,10);e<=c&&(a=!0,o[c-e]=this.styles[t][s],h&&0===e||delete this.styles[t][s])}var l=!1;for(a&&!h&&(this.styles[t+i]=o,l=!0),l&&i--;0<i;)n&&n[i-1]?this.styles[t+i]={0:x(n[i-1])}:r?this.styles[t+i]={0:x(r)}:delete this.styles[t+i],i--;this._forceClearCache=!0},insertCharStyleObject:function(t,e,i,n){this.styles||(this.styles={});var r,s=this.styles[t],o=s?x(s):{};for(r in i=i||1,o){var a=parseInt(r,10);e<=a&&(s[a+i]=o[a],o[a-i]||delete s[a])}if(this._forceClearCache=!0,n)for(;i--;)Object.keys(n[i]).length&&(this.styles[t]||(this.styles[t]={}),this.styles[t][e+i]=x(n[i]));else if(s)for(var h=s[e?e-1:1];h&&i--;)this.styles[t][e+i]=x(h)},insertNewStyleBlock:function(t,e,i){for(var n=this.get2DCursorLocation(e,!0),r=[0],s=0,o=0;o<t.length;o++)"\n"===t[o]?r[++s]=0:r[s]++;0<r[0]&&(this.insertCharStyleObject(n.lineIndex,n.charIndex,r[0],i),i=i&&i.slice(r[0]+1)),s&&this.insertNewlineStyleObject(n.lineIndex,n.charIndex+r[0],s);for(o=1;o<s;o++)0<r[o]?this.insertCharStyleObject(n.lineIndex+o,0,r[o],i):i&&this.styles[n.lineIndex+o]&&i[0]&&(this.styles[n.lineIndex+o][0]=i[0]),i=i&&i.slice(r[o]+1);0<r[o]&&this.insertCharStyleObject(n.lineIndex+o,0,r[o],i)},setSelectionStartEndWithShift:function(t,e,i){i<=t?(e===t?this._selectionDirection="left":"right"===this._selectionDirection&&(this._selectionDirection="left",this.selectionEnd=t),this.selectionStart=i):t<i&&i<e?"right"===this._selectionDirection?this.selectionEnd=i:this.selectionStart=i:(e===t?this._selectionDirection="right":"left"===this._selectionDirection&&(this._selectionDirection="right",this.selectionStart=e),this.selectionEnd=i)},setSelectionInBoundaries:function(){var t=this.text.length;this.selectionStart>t?this.selectionStart=t:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>t?this.selectionEnd=t:this.selectionEnd<0&&(this.selectionEnd=0)}}),z.util.object.extend(z.IText.prototype,{initDoubleClickSimulation:function(){this.__lastClickTime=+new Date,this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on("mousedown",this.onMouseDown)},onMouseDown:function(t){var e;this.canvas&&(this.__newClickTime=+new Date,e=t.pointer,this.isTripleClick(e)&&(this.fire("tripleclick",t),this._stopEvent(t.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=e,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected)},isTripleClick:function(t){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===t.x&&this.__lastPointer.y===t.y},_stopEvent:function(t){t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},doubleClickHandler:function(t){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(t.e))},tripleClickHandler:function(t){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(t.e))},initClicks:function(){this.on("mousedblclick",this.doubleClickHandler),this.on("tripleclick",this.tripleClickHandler)},_mouseDownHandler:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.__isMousedown=!0,this.selected&&(this.inCompositionMode=!1,this.setCursorByClick(t.e)),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},_mouseDownHandlerBefore:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.selected=this===this.canvas._activeObject)},initMousedownHandler:function(){this.on("mousedown",this._mouseDownHandler),this.on("mousedown:before",this._mouseDownHandlerBefore)},initMouseupHandler:function(){this.on("mouseup",this.mouseUpHandler)},mouseUpHandler:function(t){if(this.__isMousedown=!1,!(!this.editable||this.group||t.transform&&t.transform.actionPerformed||t.e.button&&1!==t.e.button)){if(this.canvas){var e=this.canvas._activeObject;if(e&&e!==this)return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(t.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},setCursorByClick:function(t){var e=this.getSelectionStartFromPointer(t),i=this.selectionStart,n=this.selectionEnd;t.shiftKey?this.setSelectionStartEndWithShift(i,n,e):(this.selectionStart=e,this.selectionEnd=e),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},getSelectionStartFromPointer:function(t){for(var e=this.getLocalPointer(t),i=0,n=0,r=0,s=0,o=0,a=0,h=this._textLines.length;a<h&&r<=e.y;a++)r+=this.getHeightOfLine(a)*this.scaleY,0<(o=a)&&(s+=this._textLines[a-1].length+this.missingNewlineOffset(a-1));n=this._getLineLeftOffset(o)*this.scaleX,t=this._textLines[o],"rtl"===this.direction&&(e.x=this.width*this.scaleX-e.x+n);for(var c=0,l=t.length;c<l&&(i=n,(n+=this.__charBounds[o][c].kernedWidth*this.scaleX)<=e.x);c++)s++;return this._getNewSelectionStartFromOffset(e,i,n,s,l)},_getNewSelectionStartFromOffset:function(t,e,i,n,r){e=t.x-e,i-=t.x,t=n+(e<i||i<0?0:1);return t=(t=this.flipX?r-t:t)>this._text.length?this._text.length:t}}),z.util.object.extend(z.IText.prototype,{initHiddenTextarea:function(){this.hiddenTextarea=z.document.createElement("textarea"),this.hiddenTextarea.setAttribute("autocapitalize","off"),this.hiddenTextarea.setAttribute("autocorrect","off"),this.hiddenTextarea.setAttribute("autocomplete","off"),this.hiddenTextarea.setAttribute("spellcheck","false"),this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea",""),this.hiddenTextarea.setAttribute("wrap","off");var t=this._calcTextareaPosition();this.hiddenTextarea.style.cssText="position: absolute; top: "+t.top+"; left: "+t.left+"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: "+t.fontSize+";",(this.hiddenTextareaContainer||z.document.body).appendChild(this.hiddenTextarea),z.util.addListener(this.hiddenTextarea,"keydown",this.onKeyDown.bind(this)),z.util.addListener(this.hiddenTextarea,"keyup",this.onKeyUp.bind(this)),z.util.addListener(this.hiddenTextarea,"input",this.onInput.bind(this)),z.util.addListener(this.hiddenTextarea,"copy",this.copy.bind(this)),z.util.addListener(this.hiddenTextarea,"cut",this.copy.bind(this)),z.util.addListener(this.hiddenTextarea,"paste",this.paste.bind(this)),z.util.addListener(this.hiddenTextarea,"compositionstart",this.onCompositionStart.bind(this)),z.util.addListener(this.hiddenTextarea,"compositionupdate",this.onCompositionUpdate.bind(this)),z.util.addListener(this.hiddenTextarea,"compositionend",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(z.util.addListener(this.canvas.upperCanvasEl,"click",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},keysMap:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorRight",36:"moveCursorLeft",37:"moveCursorLeft",38:"moveCursorUp",39:"moveCursorRight",40:"moveCursorDown"},keysMapRtl:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorLeft",36:"moveCursorRight",37:"moveCursorRight",38:"moveCursorUp",39:"moveCursorLeft",40:"moveCursorDown"},ctrlKeysMapUp:{67:"copy",88:"cut"},ctrlKeysMapDown:{65:"selectAll"},onClick:function(){this.hiddenTextarea&&this.hiddenTextarea.focus()},onKeyDown:function(t){if(this.isEditing){var e="rtl"===this.direction?this.keysMapRtl:this.keysMap;if(t.keyCode in e)this[e[t.keyCode]](t);else{if(!(t.keyCode in this.ctrlKeysMapDown&&(t.ctrlKey||t.metaKey)))return;this[this.ctrlKeysMapDown[t.keyCode]](t)}t.stopImmediatePropagation(),t.preventDefault(),33<=t.keyCode&&t.keyCode<=40?(this.inCompositionMode=!1,this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},onKeyUp:function(t){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:t.keyCode in this.ctrlKeysMapUp&&(t.ctrlKey||t.metaKey)&&(this[this.ctrlKeysMapUp[t.keyCode]](t),t.stopImmediatePropagation(),t.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},onInput:function(t){var e,i,n,r,s,o,a,h,c,l,u,f=this.fromPaste;this.fromPaste=!1,t&&t.stopPropagation(),this.isEditing&&(t=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,c=this._text.length,n=(i=t.length)-c,o=(r=this.selectionStart)!==(s=this.selectionEnd),""===this.hiddenTextarea.value?this.styles={}:(u=r>(l=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value)).selectionStart,o?(e=this._text.slice(r,s),n+=s-r):i<c&&(e=u?this._text.slice(s+n,s):this._text.slice(r,r-n)),i=t.slice(l.selectionEnd-n,l.selectionEnd),e&&e.length&&(i.length&&(a=this.getSelectionStyles(r,r+1,!1),a=i.map(function(){return a[0]})),c=o?(h=r,s):u?(h=s-e.length,s):(h=s)+e.length,this.removeStyleFromTo(h,c)),i.length&&(f&&i.join("")===z.copiedText&&!z.disableStyleCopyPaste&&(a=z.copiedTextStyle),this.insertNewStyleBlock(i,r,a))),this.updateFromTextArea(),this.fire("changed"),this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll()))},onCompositionStart:function(){this.inCompositionMode=!0},onCompositionEnd:function(){this.inCompositionMode=!1},onCompositionUpdate:function(t){this.compositionStart=t.target.selectionStart,this.compositionEnd=t.target.selectionEnd,this.updateTextareaPosition()},copy:function(){this.selectionStart!==this.selectionEnd&&(z.copiedText=this.getSelectedText(),z.disableStyleCopyPaste?z.copiedTextStyle=null:z.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},paste:function(){this.fromPaste=!0},_getClipboardData:function(t){return t&&t.clipboardData||z.window.clipboardData},_getWidthBeforeCursor:function(t,e){var i=this._getLineLeftOffset(t);return 0<e&&(i+=(t=this.__charBounds[t][e-1]).left+t.width),i},getDownCursorOffset:function(t,e){var e=this._getSelectionForOffset(t,e),i=this.get2DCursorLocation(e),n=i.lineIndex;return n===this._textLines.length-1||t.metaKey||34===t.keyCode?this._text.length-e:(t=i.charIndex,e=this._getWidthBeforeCursor(n,t),i=this._getIndexOnLine(n+1,e),this._textLines[n].slice(t).length+i+1+this.missingNewlineOffset(n))},_getSelectionForOffset:function(t,e){return t.shiftKey&&this.selectionStart!==this.selectionEnd&&e?this.selectionEnd:this.selectionStart},getUpCursorOffset:function(t,e){var e=this._getSelectionForOffset(t,e),i=this.get2DCursorLocation(e),n=i.lineIndex;return 0===n||t.metaKey||33===t.keyCode?-e:(t=i.charIndex,e=this._getWidthBeforeCursor(n,t),i=this._getIndexOnLine(n-1,e),e=this._textLines[n].slice(0,t),t=this.missingNewlineOffset(n-1),-this._textLines[n-1].length+i-e.length+(1-t))},_getIndexOnLine:function(t,e){for(var i=this._textLines[t],n=this._getLineLeftOffset(t),r=0,s=0,o=i.length;s<o;s++)if(e<(n+=c=this.__charBounds[t][s].width)){var a=!0,h=n,c=Math.abs(n-c-e),r=Math.abs(h-e)<c?s:s-1;break}return r=a?r:i.length-1},moveCursorDown:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown("Down",t)},moveCursorUp:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown("Up",t)},_moveCursorUpOrDown:function(t,e){t=this["get"+t+"CursorOffset"](e,"right"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(t):this.moveCursorWithoutShift(t),0!==t&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorWithShift:function(t){var e="left"===this._selectionDirection?this.selectionStart+t:this.selectionEnd+t;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,e),0!==t},moveCursorWithoutShift:function(t){return t<0?(this.selectionStart+=t,this.selectionEnd=this.selectionStart):(this.selectionEnd+=t,this.selectionStart=this.selectionEnd),0!==t},moveCursorLeft:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight("Left",t)},_move:function(t,e,i){var n;if(t.altKey)n=this["findWordBoundary"+i](this[e]);else{if(!t.metaKey&&35!==t.keyCode&&36!==t.keyCode)return this[e]+="Left"===i?-1:1,!0;n=this["findLineBoundary"+i](this[e])}if(void 0!==n&&this[e]!==n)return this[e]=n,!0},_moveLeft:function(t,e){return this._move(t,e,"Left")},_moveRight:function(t,e){return this._move(t,e,"Right")},moveCursorLeftWithoutShift:function(t){var e=!0;return this._selectionDirection="left",this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(e=this._moveLeft(t,"selectionStart")),this.selectionEnd=this.selectionStart,e},moveCursorLeftWithShift:function(t){return"right"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(t,"selectionEnd"):0!==this.selectionStart?(this._selectionDirection="left",this._moveLeft(t,"selectionStart")):void 0},moveCursorRight:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight("Right",t)},_moveCursorLeftOrRight:function(t,e){t="moveCursor"+t+"With";this._currentCursorOpacity=1,e.shiftKey?t+="Shift":t+="outShift",this[t](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorRightWithShift:function(t){return"left"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(t,"selectionStart"):this.selectionEnd!==this._text.length?(this._selectionDirection="right",this._moveRight(t,"selectionEnd")):void 0},moveCursorRightWithoutShift:function(t){var e=!0;return this._selectionDirection="right",this.selectionStart===this.selectionEnd?(e=this._moveRight(t,"selectionStart"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,e},removeChars:function(t,e){this.removeStyleFromTo(t,e=void 0===e?t+1:e),this._text.splice(t,e-t),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},insertChars:function(t,e,i,n){i<(n=void 0===n?i:n)&&this.removeStyleFromTo(i,n);t=z.util.string.graphemeSplit(t);this.insertNewStyleBlock(t,i,e),this._text=[].concat(this._text.slice(0,i),t,this._text.slice(n)),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),b=z.util.toFixed,nt=/  +/g,z.util.object.extend(z.Text.prototype,{_toSVG:function(){var t=this._getSVGLeftTopOffsets(),t=this._getSVGTextAndBg(t.textTop,t.textLeft);return this._wrapSVGTextAndBg(t)},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,noStyle:!0,withShadow:!0})},_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},_wrapSVGTextAndBg:function(t){var e=this.getSvgTextDecoration(this);return[t.textBgRects.join(""),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,"'")+'" ':"",this.fontSize?'font-size="'+this.fontSize+'" ':"",this.fontStyle?'font-style="'+this.fontStyle+'" ':"",this.fontWeight?'font-weight="'+this.fontWeight+'" ':"",e?'text-decoration="'+e+'" ':"",'style="',this.getSvgStyles(!0),'"',this.addPaintOrder()," >",t.textSpans.join(""),"</text>\n"]},_getSVGTextAndBg:function(t,e){var i,n=[],r=[],s=t;this._setSVGBg(r);for(var o=0,a=this._textLines.length;o<a;o++)i=this._getLineLeftOffset(o),(this.textBackgroundColor||this.styleHas("textBackgroundColor",o))&&this._setSVGTextLineBg(r,o,e+i,s),this._setSVGTextLineText(n,o,e+i,s),s+=this.getHeightOfLine(o);return{textSpans:n,textBgRects:r}},_createTextCharSpan:function(t,e,i,n){var r=t!==t.trim()||t.match(nt),r=this.getSvgSpanStyles(e,r),r=r?'style="'+r+'"':"",e=e.deltaY,s="",o=z.Object.NUM_FRACTION_DIGITS;return e&&(s=' dy="'+b(e,o)+'" '),['<tspan x="',b(i,o),'" y="',b(n,o),'" ',s,r,">",z.util.string.escapeXml(t),"</tspan>"].join("")},_setSVGTextLineText:function(t,e,i,n){var r,s,o,a,h=this.getHeightOfLine(e),c=-1!==this.textAlign.indexOf("justify"),l="",u=0,f=this._textLines[e];n+=h*(1-this._fontSizeFraction)/this.lineHeight;for(var d=0,g=f.length-1;d<=g;d++)a=d===g||this.charSpacing,l+=f[d],o=this.__charBounds[e][d],0===u?(i+=o.kernedWidth-o.width,u+=o.width):u+=o.kernedWidth,(a=c&&!a&&this._reSpaceAndTab.test(f[d])?!0:a)||(r=r||this.getCompleteStyleDeclaration(e,d),s=this.getCompleteStyleDeclaration(e,d+1),a=z.util.hasStyleChanged(r,s,!0)),a&&(o=this._getStyleDeclaration(e,d)||{},t.push(this._createTextCharSpan(l,o,i,n)),l="",r=s,i+=u,u=0)},_pushTextBgRect:function(t,e,i,n,r,s){var o=z.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(e),' x="',b(i,o),'" y="',b(n,o),'" width="',b(r,o),'" height="',b(s,o),'"></rect>\n')},_setSVGTextLineBg:function(t,e,i,n){for(var r,s,o=this._textLines[e],a=this.getHeightOfLine(e)/this.lineHeight,h=0,c=0,l=this.getValueOfPropertyAt(e,0,"textBackgroundColor"),u=0,f=o.length;u<f;u++)r=this.__charBounds[e][u],(s=this.getValueOfPropertyAt(e,u,"textBackgroundColor"))!==l?(l&&this._pushTextBgRect(t,l,i+c,n,h,a),c=r.left,h=r.width,l=s):h+=r.kernedWidth;s&&this._pushTextBgRect(t,s,i+c,n,h,a)},_getFillAttributes:function(t){var e=t&&"string"==typeof t?new z.Color(t):"";return e&&e.getSource()&&1!==e.getAlpha()?'opacity="'+e.getAlpha()+'" fill="'+e.setAlpha(1).toRgb()+'"':'fill="'+t+'"'},_getSVGLineTopOffset:function(t){for(var e,i=0,n=0;n<t;n++)i+=this.getHeightOfLine(n);return e=this.getHeightOfLine(n),{lineTop:i,offset:(this._fontSizeMult-this._fontSizeFraction)*e/(this.lineHeight*this._fontSizeMult)}},getSvgStyles:function(t){return z.Object.prototype.getSvgStyles.call(this,t)+" white-space: pre;"}}),function(t){"use strict";var y=t.fabric||(t.fabric={});y.Textbox=y.util.createClass(y.IText,y.Observable,{type:"textbox",minWidth:20,dynamicMinWidth:2,__cachedLines:null,lockScalingFlip:!0,noScaleCache:!1,_dimensionAffectingProps:y.Text.prototype._dimensionAffectingProps.concat("width"),_wordJoiners:/[ \t\r]/,splitByGrapheme:!1,initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),this.dynamicMinWidth=0,this._styleMap=this._generateStyleMap(this._splitText()),this.dynamicMinWidth>this.width&&this._set("width",this.dynamicMinWidth),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},_generateStyleMap:function(t){for(var e=0,i=0,n=0,r={},s=0;s<t.graphemeLines.length;s++)"\n"===t.graphemeText[n]&&0<s?(i=0,n++,e++):!this.splitByGrapheme&&this._reSpaceAndTab.test(t.graphemeText[n])&&0<s&&(i++,n++),r[s]={line:e,offset:i},n+=t.graphemeLines[s].length,i+=t.graphemeLines[s].length;return r},styleHas:function(t,e){var i;return this._styleMap&&!this.isWrapping&&(i=this._styleMap[e])&&(e=i.line),y.Text.prototype.styleHas.call(this,t,e)},isEmptyStyles:function(t){if(this.styles){var e,i,n,r=0,s=!1,o=this._styleMap[t],a=this._styleMap[t+1];for(n in o&&(t=o.line,r=o.offset),a&&(s=a.line===t,e=a.offset),i=void 0===t?this.styles:{line:this.styles[t]})for(var h in i[n])if(r<=h&&(!s||h<e))for(var c in i[n][h])return!1}return!0},_getStyleDeclaration:function(t,e){if(this._styleMap&&!this.isWrapping){var i=this._styleMap[t];if(!i)return null;t=i.line,e=i.offset+e}return this.callSuper("_getStyleDeclaration",t,e)},_setStyleDeclaration:function(t,e,i){var n=this._styleMap[t];t=n.line,e=n.offset+e,this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){var i=this._styleMap[t];t=i.line,e=i.offset+e,delete this.styles[t][e]},_getLineStyle:function(t){t=this._styleMap[t];return!!this.styles[t.line]},_setLineStyle:function(t){t=this._styleMap[t];this.styles[t.line]={}},_wrapText:function(t,e){var i,n=[];for(this.isWrapping=!0,i=0;i<t.length;i++)n=n.concat(this._wrapLine(t[i],i,e));return this.isWrapping=!1,n},_measureWord:function(t,e,i){var n,r=0;i=i||0;for(var s=0,o=t.length;s<o;s++)r+=this._getGraphemeBox(t[s],e,s+i,n,!0).kernedWidth,n=t[s];return r},_wrapLine:function(t,e,i,n){var r,s,o=0,a=this.splitByGrapheme,h=[],c=[],l=a?y.util.string.graphemeSplit(t):t.split(this._wordJoiners),u=0,f=a?"":" ",d=0,g=0,p=!0,m=this._getWidthOfCharSpacing(),n=n||0;0===l.length&&l.push([]),i-=n;for(var v=0;v<l.length;v++)r=a?l[v]:y.util.string.graphemeSplit(l[v]),s=this._measureWord(r,e,u),u+=r.length,i<(o+=d+s-m)&&!p?(h.push(c),c=[],o=s,p=!0):o+=m,p||a||c.push(f),c=c.concat(r),d=a?0:this._measureWord([f],e,u),u++,p=!1,g<s&&(g=s);return v&&h.push(c),g+n>this.dynamicMinWidth&&(this.dynamicMinWidth=g-m+n),h},isEndOfWrapping:function(t){return!this._styleMap[t+1]||this._styleMap[t+1].line!==this._styleMap[t].line},missingNewlineOffset:function(t){return!this.splitByGrapheme||this.isEndOfWrapping(t)?1:0},_splitTextIntoLines:function(t){for(var t=y.Text.prototype._splitTextIntoLines.call(this,t),e=this._wrapText(t.lines,this.width),i=new Array(e.length),n=0;n<e.length;n++)i[n]=e[n].join("");return t.lines=i,t.graphemeLines=e,t},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var t,e={};for(t in this._styleMap)this._textLines[t]&&(e[this._styleMap[t].line]=1);for(t in this.styles)e[t]||delete this.styles[t]},toObject:function(t){return this.callSuper("toObject",["minWidth","splitByGrapheme"].concat(t))}}),y.Textbox.fromObject=function(t,e){var i=y.util.stylesFromArray(t.styles,t.text),t=Object.assign({},t,{styles:i});return y.Object._fromObject("Textbox",t,e,"text")}}(i),t=z.controlsUtils,C=t.scaleSkewCursorStyleHandler,S=t.scaleCursorStyleHandler,w=t.scalingEqually,rt=t.scalingYOrSkewingX,T=t.scalingXOrSkewingY,A=t.scaleOrSkewActionName,(O=z.Object.prototype.controls).ml=new z.Control({x:-.5,y:0,cursorStyleHandler:C,actionHandler:T,getActionName:A}),O.mr=new z.Control({x:.5,y:0,cursorStyleHandler:C,actionHandler:T,getActionName:A}),O.mb=new z.Control({x:0,y:.5,cursorStyleHandler:C,actionHandler:rt,getActionName:A}),O.mt=new z.Control({x:0,y:-.5,cursorStyleHandler:C,actionHandler:rt,getActionName:A}),O.tl=new z.Control({x:-.5,y:-.5,cursorStyleHandler:S,actionHandler:w}),O.tr=new z.Control({x:.5,y:-.5,cursorStyleHandler:S,actionHandler:w}),O.bl=new z.Control({x:-.5,y:.5,cursorStyleHandler:S,actionHandler:w}),O.br=new z.Control({x:.5,y:.5,cursorStyleHandler:S,actionHandler:w}),O.mtr=new z.Control({x:0,y:-.5,actionHandler:t.rotationWithSnapping,cursorStyleHandler:t.rotationStyleHandler,offsetY:-40,withConnection:!0,actionName:"rotate"}),z.Textbox&&((T=z.Textbox.prototype.controls={}).mtr=O.mtr,T.tr=O.tr,T.br=O.br,T.tl=O.tl,T.bl=O.bl,T.mt=O.mt,T.mb=O.mb,T.mr=new z.Control({x:.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:C,actionName:"resizing"}),T.ml=new z.Control({x:-.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:C,actionName:"resizing"}))},"./src/assets/scss/style.scss":function(t,e,i){"use strict";i.r(e);var n=i("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),n=i.n(n),r=i("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),r=i.n(r),s=i("./node_modules/style-loader/dist/runtime/insertBySelector.js"),s=i.n(s),o=i("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),o=i.n(o),a=i("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),a=i.n(a),h=i("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),h=i.n(h),i=i("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/assets/scss/style.scss"),c={};c.styleTagTransform=h(),c.setAttributes=o(),c.insert=s().bind(null,"head"),c.domAPI=r(),c.insertStyleElement=a(),n()(i.default,c);e.default=i.default&&i.default.locals?i.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(t){"use strict";var c=[];function l(t){for(var e=-1,i=0;i<c.length;i++)if(c[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},n=[],r=0;r<t.length;r++){var s=t[r],o=e.base?s[0]+e.base:s[0],a=i[o]||0,h="".concat(o," ").concat(a),o=(i[o]=a+1,l(h)),a={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};-1!==o?(c[o].references++,c[o].updater(a)):(s=function(e,t){var i=t.domAPI(t);return i.update(e),function(t){t?t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer||i.update(e=t):i.remove()}}(a,e),e.byIndex=r,c.splice(r,0,{identifier:h,updater:s,references:1})),n.push(h)}return n}t.exports=function(t,s){var o=a(t=t||[],s=s||{});return function(t){t=t||[];for(var e=0;e<o.length;e++){var i=l(o[e]);c[i].references--}for(var t=a(t,s),n=0;n<o.length;n++){var r=l(o[n]);0===c[r].references&&(c[r].updater(),c.splice(r,1))}o=t}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":function(t){"use strict";var i={};t.exports=function(t,e){if(!(t=function(t){if(void 0===i[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}i[t]=e}return i[t]}(t)))throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":function(t){"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":function(t,e,i){"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":function(t){"use strict";t.exports=function(s){var o=s.insertStyleElement(s);return{update:function(t){var e,i,n,r;e=o,i=s,n="",(t=t).supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {")),(r=void 0!==t.layer)&&(n+="@layer".concat(0<t.layer.length?" ".concat(t.layer):""," {")),n+=t.css,r&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}"),(r=t.sourceMap)&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),i.styleTagTransform(n,e,i.options)},remove:function(){var t;null!==(t=o).parentNode&&t.parentNode.removeChild(t)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":function(t){"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},"./src/assets/images/body.png":function(t,e,i){"use strict";t.exports=i.p+"35b32ed6411905f2346e.png"},"./src/assets/images/frame.png":function(t,e,i){"use strict";t.exports=i.p+"39d41d234bdb376db4af.png"},"./src/assets/images/sample1.jpg":function(t,e,i){"use strict";t.exports=i.p+"50eae45c8c4c208932b7.jpg"},"./src/assets/images/sample2.png":function(t,e,i){"use strict";t.exports=i.p+"2fa3fd5984ce78fb58bf.png"},"?7b10":function(){},"?6799":function(){},"?9748":function(){}},n={};function f(t){var e=n[t];return void 0!==e||(e=n[t]={id:t,exports:{}},i[t](e,e.exports,f)),e.exports}f.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return f.d(e,{a:e}),e},f.d=function(t,e){for(var i in e)f.o(e,i)&&!f.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},f.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),f.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},f.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},f.g.importScripts&&(t=f.g.location+"");var t,e=f.g.document;if(t||!e||(t=e.currentScript?e.currentScript.src:t)||(e=e.getElementsByTagName("script")).length&&(t=e[e.length-1].src),!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),f.p=t,f.nc=void 0;var d={};!function(){"use strict";f.r(d);function t(t,e){return"normal_canvas"==e?new s.fabric.Canvas(t,{width:h,height:c}):"static_canvas"==e?new s.fabric.StaticCanvas(t,{width:h,height:c}):void 0}function e(t,e){s.fabric.Image.fromURL(t,function(t){t.set({left:0,top:0,selectable:!1,evented:!1}),e.setBackgroundImage(t),e.renderAll()})}function i(t,e){s.fabric.Image.fromURL(t||"https://picsum.photos/200/300",function(t){t.set({left:50,top:50,originX:"center",originY:"center"}),t.setControlsVisibility({mtr:!1}),e.add(t),e.centerObject(t),t.filters.push(new s.fabric.Image.filters.BlendImage({image:e,mode:"overlay",alpha:.5}))})}var n,r,s=f("./node_modules/fabric/dist/fabric.js"),o=(f("./src/assets/scss/style.scss"),f("./src/assets/images/body.png")),a=f("./src/assets/images/frame.png"),h=(f("./src/assets/images/sample1.jpg"),f("./src/assets/images/sample2.png"),260),c=550,l=t("body_canvas","normal_canvas"),u=(e(o,l),t("frame_canvas","static_canvas"));n=u,r={left:20,top:20,width:150,height:150},s.fabric.Image.fromURL(a,function(t){t.set({top:r.top,left:r.left,selectable:!1,evented:!1}),t.scaleToWidth(r.width),t.scaleToHeight(r.height),n.setBackgroundImage(t),n.renderAll()}),window.cmdAddText=function(){var t="Type Here",e=l;t=new s.fabric.Textbox(t,{fontSize:24,left:50,top:50,width:150}),e.add(t)},window.cmdAddImage=function(t){l.clear(),e(o,l),i(t,l)},document.getElementById("file_upload").onchange=function(t){var e=new FileReader;e.onload=function(t){var e=new Image;e.src=t.target.result,e.onload=function(){i(e.src,l)}},e.readAsDataURL(t.target.files[0])},document.getElementById("image_rotate").addEventListener("input",function(t){var e,i;t=t.target.value,(i=(e=l).getActiveObject())?(document.getElementById("image_rotate_value").innerText=t+"°",i.set("angle",t),e.renderAll()):alert("Please select an imge/textbox first")}),document.getElementById("image_zoom").addEventListener("change",function(t){var e,i;t=t.target.value,e=l,console.log(t),(i=e.getActiveObject())?(document.getElementById("image_zoom_value").innerText=Math.round(100*t)+"%",i.scale(+parseFloat(t,10)).setCoords(),e.centerObject(i),e.renderAll()):alert("Please select an imge/textbox first")}),document.getElementById("btn_generate_canvas").addEventListener("click",function(t){this.href=l.toDataURL({format:"png"}),this.download="canvas.png"},!1)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,